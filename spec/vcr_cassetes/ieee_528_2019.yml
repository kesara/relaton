---
http_interactions:
- request:
    method: get
    uri: https://standards.ieee.org/bin/standards/search?data=%7B%22data%22:%7B%22searchTerm%22:%22528-2019%22%7D%7D
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.7.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 30 Aug 2021 18:11:35 GMT
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - application/json;charset=utf-8
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher1useast1
      X-Frame-Options:
      - SAMEORIGIN
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '883'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dda04a2a5373ec48a5f43e000fb24506fb5fc7fb97b2f96f16c95e68a676d2af9326cebdca528e5f21f6258b2be56c222f;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: '{"status":"success","code":200,"message":"{\"response\":{\"Facets\":[{\"facetId\":1,\"facetName\":\"contentType\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Project\",\"facetValueId\":4294967250,\"selected\":false},{\"facetValueName\":\"Standard\",\"facetValueId\":4294967245,\"selected\":false}],\"sortOrder\":1},{\"facetId\":3,\"facetName\":\"standardTopics\",\"multiselect\":true,\"facets\":[{\"facetValueName\":\"Aerospace
        Electronics\",\"facetValueId\":4294967248,\"selected\":false},{\"facetValueName\":\"Nuclear
        Power\",\"facetValueId\":4294967275,\"selected\":false},{\"facetValueName\":\"Power
        and Energy\",\"facetValueId\":4294967279,\"selected\":false}],\"sortOrder\":54}],\"searchResults\":{\"resultsMapList\":[{\"record\":{\"recordTitle\":\"IEEE
        528-2019 - IEEE Standard for Inertial Sensor Terminology\",\"recordText\":\"IEEE
        <endeca_term>528-2019<\/endeca_term> - IEEE Standard for Inertial Sensor Terminology\",\"recordURL\":\"https://standards.ieee.org/standard/528-2019.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        528-2019 - IEEE Standard for Inertial Sensor Terminology\",\"recordText\":\"IEEE
        <endeca_term>528-2019<\/endeca_term> - IEEE Standard for Inertial Sensor Terminology\",\"recordURL\":\"https://standards.ieee.org/content/ieee-standards/en/standard/528-2019.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        1293-1998/Cor 1-2008 - IEEE Standard Specification Format Guide and Test Procedure
        for Linear,Single-Axis, Nongyroscopic Accelerometers Corrigendum 1: Changes
        to Annex K and Annex L\",\"recordText\":\"IEEE 1293-1998/Cor 1-2008 - IEEE
        Standard Specification Format Guide and Test Procedure for Linear,Single-Axis,
        Nongyroscopic  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1293-1998-Cor1-2008.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        1293-2018 - IEEE Standard Specification Format Guide and Test Procedure for
        Linear Single-Axis, Nongyroscopic Accelerometers\",\"recordText\":\"IEEE 1293-2018
        - IEEE Standard Specification Format Guide and Test Procedure for Linear Single-Axis,
        Nongyroscopic  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1293-2018.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        1431-2004 - IEEE Standard Specification Format Guide and Test Procedure for
        Coriolis Vibratory Gyros\",\"recordText\":\"IEEE 1431-2004 - IEEE Standard
        Specification Format Guide and Test Procedure for Coriolis Vibratory Gyros  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1431-2004.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        1431-2004/Cor 1-2008 - IEEE Standard Specification Format Guide and Test Procedure
        for Coriolis Vibratory Gyros - Corrigendum 1\",\"recordText\":\"IEEE 1431-2004/Cor
        1-2008 - IEEE Standard Specification Format Guide and Test Procedure for Coriolis
        Vibratory  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1431-2004-Cor1-2008.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        1554-2005 - IEEE Recommended Practice for Inertial Sensor Test Equipment,
        Instrumentation, Data Acquisition, and Analysis\",\"recordText\":\"IEEE 1554-2005
        - IEEE Recommended Practice for Inertial Sensor Test Equipment, Instrumentation,
        Data Acquisition, and  ...\",\"recordURL\":\"https://standards.ieee.org/standard/1554-2005.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        292-1969 - IEEE Specification Format for Single-Degree-of-Freedom Spring-Restrained
        Rate Gyros\",\"recordText\":\"IEEE 292-1969 - IEEE Specification Format for
        Single-Degree-of-Freedom Spring-Restrained Rate Gyros IEEE.org IEEE Xplore
        Digital  ...\",\"recordURL\":\"https://standards.ieee.org/standard/292-1969.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        293-1969 - IEEE Test Procedure for Single-Degree-of-Freedom Spring-Restrained
        Rate Gyros\",\"recordText\":\"IEEE 293-1969 - IEEE Test Procedure for Single-Degree-of-Freedom
        Spring-Restrained Rate Gyros IEEE.org IEEE Xplore Digital  ...\",\"recordURL\":\"https://standards.ieee.org/standard/293-1969.html\"}},{\"record\":{\"recordTitle\":\"IEEE
        293-1969/Cor 1-2014 - IEEE Standard for IEEE Test Procedure for Single-Degree-of-Freedom
        Spring-Restrained Rate Gyros -- Corrigendum 1: Table 1 Heading\",\"recordText\":\"IEEE
        293-1969/Cor 1-2014 - IEEE Standard for IEEE Test Procedure for Single-Degree-of-Freedom
        Spring-Restrained Rate Gyros  ...\",\"recordURL\":\"https://standards.ieee.org/standard/293-1969-Cor1-2014.html\"}}],\"totalNumberOfResults\":24,\"start\":0,\"offset\":0,\"recordsPerPage\":10}}}"}'
    http_version:
  recorded_at: Mon, 30 Aug 2021 18:11:35 GMT
- request:
    method: get
    uri: https://standards.ieee.org/standard/528-2019.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.7.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 30 Aug 2021 18:11:36 GMT
      Accept-Ranges:
      - bytes
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=utf-8
      Last-Modified:
      - Mon, 30 Aug 2021 18:11:36 GMT
      Vary:
      - Host,Accept-Encoding,User-Agent
      X-Content-Type-Options:
      - nosniff
      X-Dispatcher:
      - dispatcher1useast1
      X-Frame-Options:
      - SAMEORIGIN
      X-Vhost:
      - standards.ieee.org
      Content-Length:
      - '13434'
      Set-Cookie:
      - AWSELB=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;
        Secure
      - AWSELBCORS=55B9EFD71A621664217649CC5C38F09A66B8CD41093F0BE677C154DE9C3A182DFDDF69EB7FFDA49E920AFE49EFC4DCFD91A39FD99AA4B1E09EC960E71995097EB293C2DDCA;PATH=/;MAX-AGE=900;SECURE;SAMESITE=None
      - TS01247332=01c1c020dddcec2a053a67e27ca542d175158dd61f0753954bc0bd138f35aa68d7b1858d8441a35a415a7748ed1238a18b758aa6b8;
        Path=/
      Connection:
      - close
      Content-Security-Policy:
      - frame-ancestors http://*.ieee.org https://*.ieee.org
      Strict-Transport-Security:
      - max-age=16070400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 30 Aug 2021 18:11:36 GMT
recorded_with: VCR 5.1.0
