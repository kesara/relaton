---
http_interactions:
- request:
    method: get
    uri: https://www.w3.org/TR/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - max-age=0, public, s-maxage=86400
      Date:
      - Mon, 23 Aug 2021 08:26:37 GMT
      Etag:
      - W/"aff17a4308636f8cf90854eab5b5273f"
      Last-Modified:
      - Mon, 23 Aug 2021 08:26:30 GMT
      Access-Control-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Vary:
      - Accept-Encoding
      Accept-Ranges:
      - bytes
      Content-Length:
      - '137875'
      X-Backend:
      - symfony
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIiBjbGFzcz0ibm8tanMiPgo8aGVhZD4KPHRpdGxlPkFsbCBTdGFuZGFyZHMgYW5kIERyYWZ0cyAtIFczQzwvdGl0bGU+CjxsaW5rIHJlbD0iSGVscCIgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvSGVscC8iPgo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii8vd3d3LnczLm9yZy8yMDA4L3NpdGUvY3NzL21pbmltdW0uY3NzIiBtZWRpYT0ic2NyZWVuLCBhbGwiPgo8c3R5bGUgbWVkaWE9InByaW50LCBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDUyMHB4KSI+Ci8qPCFbQ0RBVEFbKi8KQGltcG9ydCB1cmwoIi8vd3d3LnczLm9yZy8yMDA4L3NpdGUvY3NzL2FkdmFuY2VkIik7Ci8qXV0+Ki8KPC9zdHlsZT4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvL3d3dy53My5vcmcvMjAwOC9zaXRlL2Nzcy9wcmludC5jc3MiIG1lZGlhPSJwcmludCI+CjxsaW5rIHJlbD0ic2hvcnRjdXQgaWNvbiIgaHJlZj0iLy93d3cudzMub3JnLzIwMDgvc2l0ZS9pbWFnZXMvZmF2aWNvbi5pY28iIHR5cGU9ImltYWdlL3gtaWNvbiI+CjxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04Ij4KPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii8yMDA4L3NpdGUvc2YvYnVpbGQvcHVibGljYXRpb24tdHIuYzE0NzAyMDYuY3NzIj4KPC9oZWFkPgo8Ym9keSBpZD0id3d3LXczLW9yZyIgY2xhc3M9InczY19wdWJsaWMgdzNjX2phdmFzY3JpcHQgdzNjX3NjcmVlbiI+CjxkaXYgaWQ9InczY19jb250YWluZXIiPgogICAgPGRpdiBpZD0idzNjX21hc3QiPgo8aDEgY2xhc3M9ImxvZ28iPjxhIHRhYmluZGV4PSIyIiBhY2Nlc3NrZXk9IjEiIGhyZWY9Imh0dHA6Ly93d3cudzMub3JnLyI+PGltZyBzcmM9Imh0dHBzOi8vd3d3LnczLm9yZy8yMDA4L3NpdGUvaW1hZ2VzL2xvZ28tdzNjLW1vYmlsZS1sZyIgYWx0PSJXM0MiIHdpZHRoPSI5MCIgaGVpZ2h0PSI1MyI+PC9hPiA8c3BhbiBjbGFzcz0iYWx0LWxvZ28iPlczQzwvc3Bhbj48L2gxPgo8ZGl2IGlkPSJ3M2NfbmF2Ij4KPGZvcm0gYWN0aW9uPSIvL3d3dy53My5vcmcvSGVscC9zZWFyY2giIG1ldGhvZD0iZ2V0IiBlbmN0eXBlPSJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiPgo8IS0tIHczY19zZWNfbmF2IGlzIHBvcHVsYXRlZCB0aHJvdWdoIGpzIC0tPgo8ZGl2IGNsYXNzPSJ3M2Nfc2VjX25hdiI+PCEtLSAtLT48L2Rpdj4KPHVsIGNsYXNzPSJtYWluX25hdiI+PCEtLSBNYWluIG5hdmlnYXRpb24gbWVudSAtLT4KPGxpIGNsYXNzPSJmaXJzdC1pdGVtIj48YSBocmVmPSJodHRwOi8vd3d3LnczLm9yZy9zdGFuZGFyZHMvIj5TdGFuZGFyZHM8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHA6Ly93d3cudzMub3JnL3BhcnRpY2lwYXRlLyI+UGFydGljaXBhdGU8L2E+PC9saT4KPGxpPjxhIGhyZWY9Imh0dHA6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vbWVtYmVyc2hpcCI+TWVtYmVyc2hpcDwvYT48L2xpPgo8bGkgY2xhc3M9Imxhc3QtaXRlbSI+PGEgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS8iPkFib3V0IFczQzwvYT48L2xpPgoKPC91bD4KPC9mb3JtPgo8L2Rpdj4KPC9kaXY+CjwhLS0gL2VuZCAjdzNjX21hc3QgLS0+CiAgICA8ZGl2IGlkPSJ3M2NfbWFpbiI+CiAgICAgICAgPGRpdiBpZD0idzNjX2xvZ29fc2hhZG93IiBjbGFzcz0idzNjX2xlZnRDb2wiPgogICAgICAgICAgICA8aW1nIGFsdD0iIiBzcmM9Imh0dHBzOi8vd3d3LnczLm9yZy8yMDA4L3NpdGUvaW1hZ2VzL2xvZ28tc2hhZG93IiBoZWlnaHQ9IjMyIj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3M2NfbGVmdENvbCI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0ib2Zmc2NyZWVuIj5TaXRlIE5hdmlnYXRpb248L2gyPgogICAgICAgICAgICA8aDMgY2xhc3M9ImNhdGVnb3J5IHRNYXJnaW4iPjxzcGFuIGNsYXNzPSJyaWJib24iPjxhIGhyZWY9Ii9Db25zb3J0aXVtL21pc3Npb24uaHRtbCNwcmluY2lwbGVzIj5XZWIgZm9yIEFsbCA8aW1nIHNyYz0iLzIwMDgvc2l0ZS9pbWFnZXMvaGVhZGVyLWxpbmsuZ2lmIiBhbHQ9IkhlYWRlciBsaW5rIiB3aWR0aD0iMTMiIGhlaWdodD0iMTMiIGNsYXNzPSJoZWFkZXItbGluayIgLz48L2E+PC9zcGFuPjwvaDM+CiAgICAgICAgICAgIDx1bCBjbGFzcz0idGhlbWUiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9XQUkvIj5BY2Nlc3NpYmlsaXR5PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL0ludGVybmF0aW9uYWwvIj5JbnRlcm5hdGlvbmFsaXphdGlvbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9TZWN1cml0eS8iPldlYiBTZWN1cml0eTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9Qcml2YWN5LyI+UHJpdmFjeTwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8aDMgY2xhc3M9ImNhdGVnb3J5IHRNYXJnaW4iPjxzcGFuIGNsYXNzPSJyaWJib24iPjxhIGhyZWY9Ii9zdGFuZGFyZHMvIj5XZWIgYW5kIEluZHVzdHJ5IDxpbWcgc3JjPSIvMjAwOC9zaXRlL2ltYWdlcy9oZWFkZXItbGluay5naWYiIGFsdD0iSGVhZGVyIGxpbmsiIHdpZHRoPSIxMyIgaGVpZ2h0PSIxMyIgY2xhc3M9ImhlYWRlci1saW5rIiAvPjwvYT48L3NwYW4+PC9oMz4KICAgICAgICAgICAgPHVsIGNsYXNzPSJ0aGVtZSI+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL2F1dG8vIj5BdXRvbW90aXZlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL3R2LyI+RW50ZXJ0YWlubWVudCAoVFYgYW5kIEJyb2FkY2FzdGluZyk8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvcHVibGlzaGluZy8iPlB1Ymxpc2hpbmc8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvUGF5bWVudHMvIj5XZWIgUGF5bWVudHM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvMjAxMy9kYXRhLyI+V2ViIG9mIERhdGE8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvVGVsY28vIj5XZWIgYW5kIFRlbGVjb21tdW5pY2F0aW9uczwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9Xb1QvIj5XZWIgb2YgVGhpbmdzPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDxoMyBjbGFzcz0iY2F0ZWdvcnkgdE1hcmdpbiI+PHNwYW4gY2xhc3M9InJpYmJvbiI+PGEgaHJlZj0iL2dyb3Vwcy8iPlczQyBXb3JrIEdyb3VwcyA8aW1nIHNyYz0iLzIwMDgvc2l0ZS9pbWFnZXMvaGVhZGVyLWxpbmsuZ2lmIiBhbHQ9IkhlYWRlciBsaW5rIiB3aWR0aD0iMTMiIGhlaWdodD0iMTMiIGNsYXNzPSJoZWFkZXItbGluayIgLz48L2E+PC9zcGFuPjwvaDM+CiAgICAgICAgICAgIDx1bCBjbGFzcz0idGhlbWUiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii9Db25zb3J0aXVtL2NlcGMvIj5Db2RlIG9mIEV0aGljcyBhbmQgUHJvZmVzc2lvbmFsCiAgICAgICAgICAgICAgICAgICAgICAgIENvbmR1Y3Q8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvR3VpZGUvIj5QYXJ0aWNpcGFudCBndWlkZWJvb2s8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvY29tbXVuaXR5L2dyb3Vwcy8iPlczQyBDb21tdW5pdHkgR3JvdXBzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL0hlbHAvQWNjb3VudC8iPkdldCBhIFczQyBBY2NvdW50PC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDxoMyBjbGFzcz0iY2F0ZWdvcnkgdE1hcmdpbiI+PHNwYW4gY2xhc3M9InJpYmJvbiI+PGEgaHJlZj0iL3BhcnRpY2lwYXRlLyI+RGV2IFJlc291cmNlcyA8aW1nIHNyYz0iLzIwMDgvc2l0ZS9pbWFnZXMvaGVhZGVyLWxpbmsuZ2lmIiBhbHQ9IkhlYWRlciBsaW5rIiB3aWR0aD0iMTMiIGhlaWdodD0iMTMiIGNsYXNzPSJoZWFkZXItbGluayIgLz48L2E+PC9zcGFuPjwvaDM+CiAgICAgICAgICAgIDx1bCBjbGFzcz0idGhlbWUiPgogICAgICAgICAgICAgICAgPGxpPjxhIHRpdGxlPSJXM0MgRGV2ZWxvcGVyIEF2ZW51ZSIgaHJlZj0iL2RldmVsb3BlcnMvIj48aW1nIHNyYz0iLzIwMTUvMTAvVzNDLURldmVsb3BlcnNfQXNzZXRzL1czQy1EZXZlbG9wZXJzLURhcmsucG5nIiB3aWR0aD0iMTUwIiBhbHQ9IlczQyBEZXZlbG9wZXJzIiB0aXRsZT0iVzNDIERldmVsb3BlciBBdmVudWUiIC8+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgdGl0bGU9IlczQyBBUEkiIGhyZWY9Ii9hcGkvIj5BUEk8aW1nIGlkPSJhcGlsb2dvIiBzcmM9Ii8vd3d3LnczLm9yZy8yMDIwLzA3L3czYy1hcGkucG5nIiB3aWR0aD0iNjAiIGFsdD0iVzNDIEFQSSBsb2dvIiB0aXRsZT0iVzNDIEFQSSIgLz48L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSJodHRwczovL3ZhbGlkYXRvci53My5vcmcvIj5WYWxpZGF0b3JzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnLzIwMDkvY2hlYXRzaGVldC8iPlczQwogICAgICAgICAgICAgICAgICAgICAgICBjaGVhdHNoZWV0PC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iL1N0YXR1cy5odG1sIj5Nb3JlIE9wZW4gU291cmNlIFNvZnR3YXJlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgdGl0bGU9Ik9wZW4gV2ViIFBsYXRmb3JtIHRlc3RpbmciIGhyZWY9Imh0dHBzOi8vd2ViLXBsYXRmb3JtLXRlc3RzLm9yZy8iPldlYiBQbGF0Zm9ybSBUZXN0czwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpPjxhIHRpdGxlPSJNT09DcyBmcm9tIFczQyBvbiBlZFgiIGhyZWY9Imh0dHBzOi8vd3d3LmVkeC5vcmcvc2Nob29sL3czY3giPlczQ3ggKFRyYWluaW5nKTwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9InczY19tYWluQ29sIj4KICAgICAgICAgICAgPGRpdiBpZD0idzNjX2NydW1icyI+CiAgICAgICAgICAgPGRpdiBpZD0idzNjX2NydW1ic19mcmFtZSI+CiAgICAgICAgICAgIDx1bCBjbGFzcz0iYmN0Ij4gPCEtLSAuYmN0IC8gQnJlYWRjcnVtYnMgLS0+CiAgICAgICAgICAgICAgPGxpIGNsYXNzPSJza2lwIj48YSB0YWJpbmRleD0iMSIgYWNjZXNza2V5PSIyIiB0aXRsZT0iU2tpcCB0byBjb250ZW50IChlLmcuLCB3aGVuIGJyb3dzaW5nIHZpYSBhdWRpbykiIGhyZWY9IiN3M2NfY29udGVudF9ib2R5Ij5Ta2lwPC9hPjwvbGk+CiAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Imh0dHA6Ly93d3cudzMub3JnLyI+VzNDPC9hPiZuYnNwOzxzcGFuIGNsYXNzPSJjciI+wrs8L3NwYW4+Jm5ic3A7PC9saT4KICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvc3RhbmRhcmRzLyI+U3RhbmRhcmRzPC9hPiZuYnNwOzxzcGFuIGNsYXNzPSJjciI+wrs8L3NwYW4+Jm5ic3A7PC9saT4KICAgICAgICAgICAgICA8bGkgY2xhc3M9ImN1cnJlbnQiPkFsbCBTdGFuZGFyZHMgYW5kIERyYWZ0czwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPGgxIGNsYXNzPSJ0aXRsZSI+QWxsIFN0YW5kYXJkcyBhbmQgRHJhZnRzPC9oMT4KICAgIDxkaXYgY2xhc3M9InczY190b2MiPjwhLS0gLS0+PC9kaXY+ICAgICAgICAgICAgPGRpdiBpZD0idzNjX2NvbnRlbnRfYm9keSI+CiAgIDxkaXYgY2xhc3M9ImhpZXJhcmNoeSB0TWFyZ2luIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8aDIgaWQ9InN1bW1hcnkiPjwvaDI+CiAgICAgICAgPHA+VzNDIHB1Ymxpc2hlcyBhIHJhbmdlIG9mIHNwZWNpZmljYXRpb25zIGFuZCBndWlkZWxpbmVzIHdoaWNoIGhlbHAgbW92ZSB3ZWIgc3RhbmRhcmRzIGZvcndhcmQuIEZpbmQgb3V0IG1vcmUgYWJvdXQgdGhlIHZhcmlvdXMgdHlwZXMgb2YgPGEgaHJlZj0iL3N0YW5kYXJkcy90eXBlcyI+ZG9jdW1lbnRzIHB1Ymxpc2hlZCBhdCBXM0M8L2E+LjwvcD4KICAgICAgICA8Zm9ybSBpZD0iZmlsdGVycyIgbWV0aG9kPSJnZXQiIGFjdGlvbj0iIyI+CiAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InRpdGxlIj5UaXRsZTwvbGFiZWw+CiAgICAgICAgICAgIDxpbnB1dCBpZD0idGl0bGUiIG5hbWU9InRpdGxlIiB0eXBlPSJ0ZXh0IiBhdXRvZm9jdXMgLz4KICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InRhZyI+VGFnPC9sYWJlbD4KICAgICAgICAgICAgPHNlbGVjdCBpZD0idGFnIiBuYW1lPSJ0YWciPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IiIgc2VsZWN0ZWQ9InNlbGVjdGVkIj48L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImNzcyI+Q1NTPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkYXRhIj5EYXRhPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmc8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImRvbSI+RE9NPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJncmFwaGljcyI+R3JhcGhpY3M8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Imh0bWwiPkhUTUw8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Imh0dHAiPkhUVFA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImkxOG4iPmkxOG48L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im1lZGlhIj5NZWRpYTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJwcml2YWN5Ij5Qcml2YWN5PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJzZWN1cml0eSI+U2VjdXJpdHk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IndlYmFwaSI+V2ViIEFQSTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0id290Ij5Xb1Q8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InhtbCI+WE1MPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgPGZpZWxkc2V0PgogICAgICAgICAgICA8bGFiZWwgZm9yPSJzdGF0dXMiPlN0YXR1czwvbGFiZWw+CiAgICAgICAgICAgIDxzZWxlY3QgaWQ9InN0YXR1cyIgbmFtZT0ic3RhdHVzIj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+PC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iY3IiPkNhbmRpZGF0ZSBSZWNvbW1lbmRhdGlvbjwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Im5vdGUiPkdyb3VwIE5vdGU8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJwZXIiPlByb3Bvc2VkIEVkaXRlZCBSZWNvbW1lbmRhdGlvbjwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InByIj5Qcm9wb3NlZCBSZWNvbW1lbmRhdGlvbjwvb3B0aW9uPgogICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9InJlYyI+UmVjb21tZW5kYXRpb248L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJyZXQiPlJldGlyZWQ8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ3ZCI+V29ya2luZyBEcmFmdDwvb3B0aW9uPgogICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICA8ZmllbGRzZXQ+CiAgICAgICAgICAgIDxsYWJlbCBmb3I9InZlcnNpb24iPlZlcnNpb248L2xhYmVsPgogICAgICAgICAgICA8c2VsZWN0IGlkPSJ2ZXJzaW9uIiBuYW1lPSJ2ZXJzaW9uIj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIiIHNlbGVjdGVkPSJzZWxlY3RlZCI+PC9vcHRpb24+CiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0ibGF0ZXN0Ij5MYXRlc3Q8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJ1cGNvbWluZyI+VXBjb21pbmc8L29wdGlvbj4KICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJlZCI+RWRpdG9yJ3MgZHJhZnQ8L29wdGlvbj4KICAgICAgICAgICAgPC9zZWxlY3Q+CiAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJoZWxwIj4KICAgICAgICAgICAgPGEgY2xhc3M9InRyaGVscCIgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3RyLXBhZ2VzL2hlbHAuaHRtbCI+PzxzcGFuPkhlbHAgYWJvdXQgc2VhcmNoIGNyaXRlcmlhPC9zcGFuPjwvYT4KICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICA8ZmllbGRzZXQgY2xhc3M9ImJ1dHRvbnMiPgogICAgICAgICAgICA8aW5wdXQgaWQ9InJlc2V0IiB0eXBlPSJyZXNldCIgdmFsdWU9IlJlc2V0IiAvPgogICAgICAgICAgICA8aW5wdXQgaWQ9InN1Ym1pdCIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iRmlsdGVyIiAvPgogICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICA8L2Zvcm0+CiAgICAgICAgPHVsIGlkPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwYXltZW50IHJlcXVlc3QgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbkRyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9DUkQtcGF5bWVudC1yZXF1ZXN0LTIwMjEwODIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQYXltZW50IFJlcXVlc3QgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGF5bWVudCBSZXF1ZXN0IEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBheW1lbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0yMyAtIDxhIHRpdGxlPSJQYXltZW50IFJlcXVlc3QgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wYXltZW50LXJlcXVlc3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BheW1lbnQtcmVxdWVzdC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUGF5bWVudCBSZXF1ZXN0IEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvdXNsYW4gU29sb21ha2hpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBKYWNvYnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb21lbmljIERlbmljb2xhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRyaWFuIEJhdGVtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aYWNoIEtvY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3kgTWNFbG11cnJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFueWFvIFdhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJncHUiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0Qtd2ViZ3B1LTIwMjEwODIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJHUFUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJHUFU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkdQVSBmb3IgdGhlIFdlYiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMjMgLSA8YSB0aXRsZT0iV2ViR1BVIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJncHUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9ncHV3ZWIuZ2l0aHViLmlvL2dwdXdlYi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViR1BVIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkR6bWl0cnkgTWFseXNoYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LYWkgTmlub21peWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdXN0aW4gRmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViZ3B1IHNoYWRpbmcgbGFuZ3VhZ2UiIGRhdGEtdGFnPSJncmFwaGljcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1XR1NMLTIwMjEwODIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJHUFUgU2hhZGluZyBMYW5ndWFnZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYkdQVSBTaGFkaW5nIExhbmd1YWdlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5HUFUgZm9yIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTIzIC0gPGEgdGl0bGU9IldlYkdQVSBTaGFkaW5nIExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XR1NMIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZ3B1d2ViLmdpdGh1Yi5pby9ncHV3ZWIvd2dzbC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViR1BVIFNoYWRpbmcgTGFuZ3VhZ2UiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgTmV0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk15bGVzIE1heGZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViY29kZWNzIGNvZGVjIHJlZ2lzdHJ5IiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0Qtd2ViY29kZWNzLWNvZGVjLXJlZ2lzdHJ5LTIwMjEwODIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJDb2RlY3MgQ29kZWMgUmVnaXN0cnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJDb2RlY3MgQ29kZWMgUmVnaXN0cnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1lZGlhIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0yMCAtIDxhIHRpdGxlPSJXZWJDb2RlY3MgQ29kZWMgUmVnaXN0cnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmNvZGVjcy1jb2RlYy1yZWdpc3RyeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViY29kZWNzL2NvZGVjX3JlZ2lzdHJ5Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViQ29kZWNzIENvZGVjIFJlZ2lzdHJ5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzIEN1bm5pbmdoYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIEFkZW5vdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcm5hcmQgQWJvYmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhdmMgKGguMjY0KSB3ZWJjb2RlY3MgcmVnaXN0cmF0aW9uIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0Qtd2ViY29kZWNzLWF2Yy1jb2RlYy1yZWdpc3RyYXRpb24tMjAyMTA4MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFWQyAoSC4yNjQpIFdlYkNvZGVjcyBSZWdpc3RyYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BVkMgKEguMjY0KSBXZWJDb2RlY3MgUmVnaXN0cmF0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NZWRpYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMjAgLSA8YSB0aXRsZT0iQVZDIChILjI2NCkgV2ViQ29kZWNzIFJlZ2lzdHJhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2ViY29kZWNzLWF2Yy1jb2RlYy1yZWdpc3RyYXRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvZGVjcy9hdmNfY29kZWNfcmVnaXN0cmF0aW9uLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQVZDIChILjI2NCkgV2ViQ29kZWNzIFJlZ2lzdHJhdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBDdW5uaW5naGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBBZGVub3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJuYXJkIEFib2JhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNoYXJlIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC13ZWItc2hhcmUtMjAyMTA4MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTaGFyZSBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2hhcmUgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0yMCAtIDxhIHRpdGxlPSJXZWIgU2hhcmUgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWItc2hhcmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYi1zaGFyZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIFNoYXJlIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0IEdpdWNhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBXaWxsaWdlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJjb2RlY3MiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC13ZWJjb2RlY3MtMjAyMTA4MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYkNvZGVjcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYkNvZGVjczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWVkaWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTIwIC0gPGEgdGl0bGU9IldlYkNvZGVjcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2ViY29kZWNzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJjb2RlY3MvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYkNvZGVjcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBDdW5uaW5naGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBBZGVub3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJuYXJkIEFib2JhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGlkIHNwZWNpZmljYXRpb24gcmVnaXN0cmllcyIgZGF0YS10YWc9InByaXZhY3kgc2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtZGlkLXNwZWMtcmVnaXN0cmllcy0yMDIxMDgxOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRElEIFNwZWNpZmljYXRpb24gUmVnaXN0cmllcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRJRCBTcGVjaWZpY2F0aW9uIFJlZ2lzdHJpZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRlY2VudHJhbGl6ZWQgSWRlbnRpZmllciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMTkgLSA8YSB0aXRsZT0iRElEIFNwZWNpZmljYXRpb24gUmVnaXN0cmllcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGlkLXNwZWMtcmVnaXN0cmllcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZGlkLXNwZWMtcmVnaXN0cmllcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRElEIFNwZWNpZmljYXRpb24gUmVnaXN0cmllcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PcmllIFN0ZWVsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbnUgU3Bvcm55CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpdmFjeSI+UHJpdmFjeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYSBjYXB0dXJlIGFuZCBzdHJlYW1zIiBkYXRhLXRhZz0ibWVkaWEgd2ViYXBpIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbkRyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9DUkQtbWVkaWFjYXB0dXJlLXN0cmVhbXMtMjAyMTA4MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lZGlhIENhcHR1cmUgYW5kIFN0cmVhbXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZWRpYSBDYXB0dXJlIGFuZCBTdHJlYW1zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0xOSAtIDxhIHRpdGxlPSJNZWRpYSBDYXB0dXJlIGFuZCBTdHJlYW1zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYWNhcHR1cmUtc3RyZWFtcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWVkaWFjYXB0dXJlLW1haW4vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1lZGlhIENhcHR1cmUgYW5kIFN0cmVhbXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q3VsbGVuIEplbm5pbmdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVybmFyZCBBYm9iYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbi1JdmFyIEJydWFyb2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVucmlrIEJvc3Ryw7ZtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+eW91ZW5uIGZhYmxldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBCdXJuZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRhbSBCZXJna3Zpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmFudCBOYXJheWFuYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icGVyZm9ybWFuY2UgdGltZWxpbmUgbGV2ZWwgMiIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1wZXJmb3JtYW5jZS10aW1lbGluZS0yLTIwMjEwODE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQZXJmb3JtYW5jZSBUaW1lbGluZSBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGVyZm9ybWFuY2UgIFRpbWVsaW5lICBMZXZlbCZuYnNwOzI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMTkgLSA8YSB0aXRsZT0iUGVyZm9ybWFuY2UgVGltZWxpbmUgTGV2ZWwgMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcGVyZm9ybWFuY2UtdGltZWxpbmUtMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcGVyZm9ybWFuY2UtdGltZWxpbmUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBlcmZvcm1hbmNlIFRpbWVsaW5lIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tmljb2xhcyBQZW5hIE1vcmVubwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwb2ludGVyIGV2ZW50cyIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXBvaW50ZXJldmVudHMzLTIwMjEwODE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQb2ludGVyIEV2ZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvaW50ZXIgRXZlbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Qb2ludGVyIEV2ZW50cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMTggLSA8YSB0aXRsZT0iUG9pbnRlciBFdmVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BvaW50ZXJldmVudHMzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wb2ludGVyZXZlbnRzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQb2ludGVyIEV2ZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXRyaWNrIExhdWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmF2aWQgWm9sZ2hhZHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0IEJydWJlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNrIEJ5ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYmF0dGVyeSBzdGF0dXMgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWJhdHRlcnktc3RhdHVzLTIwMjEwODE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBCYXR0ZXJ5IFN0YXR1cyBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5CYXR0ZXJ5IFN0YXR1cyBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTE3IC0gPGEgdGl0bGU9IkJhdHRlcnkgU3RhdHVzIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYmF0dGVyeS1zdGF0dXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2JhdHRlcnkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEJhdHRlcnkgU3RhdHVzIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnNzaSBLb3N0aWFpbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TW91bmlyIExhbW91cmkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm94aW1pdHkgc2Vuc29yIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXByb3hpbWl0eS0yMDIxMDgxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJveGltaXR5IFNlbnNvciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlByb3hpbWl0eSBTZW5zb3I8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTE3IC0gPGEgdGl0bGU9IlByb3hpbWl0eSBTZW5zb3IgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb3hpbWl0eSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcHJveGltaXR5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQcm94aW1pdHkgU2Vuc29yIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuc3NpIEtvc3RpYWluZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWp1YnJhdGEgQmhhdW1pawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1hdGhtbCBjb3JlIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1tYXRobWwtY29yZS0yMDIxMDgxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWF0aE1MIENvcmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NYXRoTUwgQ29yZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWF0aCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMTYgLSA8YSB0aXRsZT0iTWF0aE1MIENvcmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21hdGhtbC1jb3JlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tYXRobWwtY29yZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWF0aE1MIENvcmUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQ2FybGlzbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcsOpZMOpcmljIFdhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZ2VvbG9jYXRpb24gc2Vuc29yIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWdlb2xvY2F0aW9uLXNlbnNvci0yMDIxMDgxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR2VvbG9jYXRpb24gU2Vuc29yIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+R2VvbG9jYXRpb24gU2Vuc29yPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0xNiAtIDxhIHRpdGxlPSJHZW9sb2NhdGlvbiBTZW5zb3IgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dlb2xvY2F0aW9uLXNlbnNvciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZ2VvbG9jYXRpb24tc2Vuc29yLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBHZW9sb2NhdGlvbiBTZW5zb3IiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5zc2kgS29zdGlhaW5lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRob21hcyBTdGVpbmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyaWpuIEtydWlzc2VsYnJpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im9yaWVudGF0aW9uIHNlbnNvciIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1vcmllbnRhdGlvbi1zZW5zb3ItMjAyMTA4MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9yaWVudGF0aW9uIFNlbnNvciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9yaWVudGF0aW9uIFNlbnNvcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMTYgLSA8YSB0aXRsZT0iT3JpZW50YXRpb24gU2Vuc29yIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vcmllbnRhdGlvbi1zZW5zb3IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL29yaWVudGF0aW9uLXNlbnNvci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgT3JpZW50YXRpb24gU2Vuc29yIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlbm5ldGggQ2hyaXN0aWFuc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5zc2kgS29zdGlhaW5lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2hhaWwgUG96ZG55YWtvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXhhbmRlciBTaGFsYW1vdgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFtYmllbnQgbGlnaHQgc2Vuc29yIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWFtYmllbnQtbGlnaHQtMjAyMTA4MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFtYmllbnQgTGlnaHQgU2Vuc29yIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QW1iaWVudCBMaWdodCBTZW5zb3I8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTE2IC0gPGEgdGl0bGU9IkFtYmllbnQgTGlnaHQgU2Vuc29yIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hbWJpZW50LWxpZ2h0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hbWJpZW50LWxpZ2h0LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBbWJpZW50IExpZ2h0IFNlbnNvciI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnNzaSBLb3N0aWFpbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmlqdWJyYXRhIEJoYXVtaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub2JpZSBMYW5nZWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im5hdmlnYXRpb24gdGltaW5nIGxldmVsIDIiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1uYXZpZ2F0aW9uLXRpbWluZy0yLTIwMjEwODE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBOYXZpZ2F0aW9uIFRpbWluZyBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TmF2aWdhdGlvbiAgVGltaW5nICBMZXZlbCZuYnNwOzI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMTYgLSA8YSB0aXRsZT0iTmF2aWdhdGlvbiBUaW1pbmcgTGV2ZWwgMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbmF2aWdhdGlvbi10aW1pbmctMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbmF2aWdhdGlvbi10aW1pbmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE5hdmlnYXRpb24gVGltaW5nIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW9hdiBXZWlzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vYW0gUm9zZW50aGFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWx5YSBHcmlnb3JpawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvYmluIFRpdHVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmF0aW5kZXIgTWFubgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFydmluZCBKYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHRtbCBhY2Nlc3NpYmlsaXR5IGFwaSBtYXBwaW5ncyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGh0bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtaHRtbC1hYW0tMS4wLTIwMjEwODEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MIEFjY2Vzc2liaWxpdHkgQVBJIE1hcHBpbmdzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgIEFjY2Vzc2liaWxpdHkgIEFQSSAgTWFwcGluZ3MmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTEzIC0gPGEgdGl0bGU9IkhUTUwgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3MgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLWFhbS0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2h0bWwtYWFtLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBIVE1MIEFjY2Vzc2liaWxpdHkgQVBJIE1hcHBpbmdzIDEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBGYXVsa25lcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IE8mIzAzOTtIYXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleGFuZGVyIFN1cmtvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJvZ2RhbiBCcmluemEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYXNvbiBLaXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q3ludGhpYSBTaGVsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwZXJzb25hbGl6YXRpb24gc2VtYW50aWNzIGV4cGxhaW5lciAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXBlcnNvbmFsaXphdGlvbi1zZW1hbnRpY3MtMS4wLTIwMjEwODEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQZXJzb25hbGl6YXRpb24gU2VtYW50aWNzIEV4cGxhaW5lciAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QZXJzb25hbGl6YXRpb24gIFNlbWFudGljcyAgRXhwbGFpbmVyJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFBsYXRmb3JtIEFyY2hpdGVjdHVyZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTEyIC0gPGEgdGl0bGU9IlBlcnNvbmFsaXphdGlvbiBTZW1hbnRpY3MgRXhwbGFpbmVyIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcGVyc29uYWxpemF0aW9uLXNlbWFudGljcy0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BlcnNvbmFsaXphdGlvbi1zZW1hbnRpY3MvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBlcnNvbmFsaXphdGlvbiBTZW1hbnRpY3MgRXhwbGFpbmVyIDEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MaXNhIFNlZW1hbi1Ib3J3aXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBMYVBpZXJyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gRm9saW90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SdW94aSBSYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFNjaHdlcmR0ZmVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwZXJzb25hbGl6YXRpb24gc2VtYW50aWNzIGNvbnRlbnQgbW9kdWxlIDEuMCIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtcGVyc29uYWxpemF0aW9uLXNlbWFudGljcy1jb250ZW50LTEuMC0yMDIxMDgxMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGVyc29uYWxpemF0aW9uIFNlbWFudGljcyBDb250ZW50IE1vZHVsZSAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QZXJzb25hbGl6YXRpb24gIFNlbWFudGljcyAgQ29udGVudCAgTW9kdWxlJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFBsYXRmb3JtIEFyY2hpdGVjdHVyZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTEyIC0gPGEgdGl0bGU9IlBlcnNvbmFsaXphdGlvbiBTZW1hbnRpY3MgQ29udGVudCBNb2R1bGUgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wZXJzb25hbGl6YXRpb24tc2VtYW50aWNzLWNvbnRlbnQtMS4wIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wZXJzb25hbGl6YXRpb24tc2VtYW50aWNzL2NvbnRlbnQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBlcnNvbmFsaXphdGlvbiBTZW1hbnRpY3MgQ29udGVudCBNb2R1bGUgMS4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxpc2EgU2VlbWFuLUhvcndpdHoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGFybGVzIExhUGllcnJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBGb2xpb3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ1b3hpIFJhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgU2Nod2VyZHRmZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imdlb2xvY2F0aW9uIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWdlb2xvY2F0aW9uLTIwMjEwODEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHZW9sb2NhdGlvbiBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HZW9sb2NhdGlvbiBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTEyIC0gPGEgdGl0bGU9Ikdlb2xvY2F0aW9uIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZ2VvbG9jYXRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dlb2xvY2F0aW9uLWFwaS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR2VvbG9jYXRpb24gQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmNvcyBDYWNlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2hhcmFjdGVyIG1vZGVsIGZvciB0aGUgd29ybGQgd2lkZSB3ZWI6IHN0cmluZyBtYXRjaGluZyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtY2hhcm1vZC1ub3JtLTIwMjEwODExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDaGFyYWN0ZXIgTW9kZWwgZm9yIHRoZSBXb3JsZCBXaWRlIFdlYjogU3RyaW5nIE1hdGNoaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2hhcmFjdGVyIE1vZGVsIGZvciB0aGUgV29ybGQgV2lkZSBXZWI6IFN0cmluZyBNYXRjaGluZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTExIC0gPGEgdGl0bGU9IkNoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViOiBTdHJpbmcgTWF0Y2hpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NoYXJtb2Qtbm9ybSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vY2hhcm1vZC1ub3JtLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDaGFyYWN0ZXIgTW9kZWwgZm9yIHRoZSBXb3JsZCBXaWRlIFdlYjogU3RyaW5nIE1hdGNoaW5nIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkZGlzb24gUGhpbGxpcHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZHV0Y2ggZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1sYXRuLW5sLWdhcC0yMDIxMDgxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRHV0Y2ggR2FwIEFuYWx5c2lzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RHV0Y2ggR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMTEgLSA8YSB0aXRsZT0iRHV0Y2ggR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sYXRuLW5sLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZXVybHJlcS9nYXAtYW5hbHlzaXMvbGF0bi1ubC1nYXAiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRHV0Y2ggR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcnQgQm9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGFwcGxpY2F0aW9uIG1hbmlmZXN0IiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWFwcG1hbmlmZXN0LTIwMjEwODExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQXBwbGljYXRpb24gTWFuaWZlc3QgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgQXBwbGljYXRpb24gTWFuaWZlc3Q8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTExIC0gPGEgdGl0bGU9IldlYiBBcHBsaWNhdGlvbiBNYW5pZmVzdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYXBwbWFuaWZlc3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21hbmlmZXN0LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQXBwbGljYXRpb24gTWFuaWZlc3QiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZW5uZXRoIENocmlzdGlhbnNlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuc3NpIEtvc3RpYWluZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0IEdpdWNhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWFyb24gR3VzdGFmc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIG5ldXJhbCBuZXR3b3JrIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC13ZWJubi0yMDIxMDgxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIE5ldXJhbCBOZXR3b3JrIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBOZXVyYWwgTmV0d29yayBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBNYWNoaW5lIExlYXJuaW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0xMCAtIDxhIHRpdGxlPSJXZWIgTmV1cmFsIE5ldHdvcmsgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJubiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3dlYm1hY2hpbmVsZWFybmluZy5naXRodWIuaW8vd2Vibm4vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBOZXVyYWwgTmV0d29yayBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmluZ3hpbiBIdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNoYWkgQ2hhb3dlZXJhcHJhc2l0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2xpcGJvYXJkIGFwaSBhbmQgZXZlbnRzIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNsaXBib2FyZC1hcGlzLTIwMjEwODA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDbGlwYm9hcmQgQVBJIGFuZCBldmVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DbGlwYm9hcmQgQVBJIGFuZCBldmVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTA2IC0gPGEgdGl0bGU9IkNsaXBib2FyZCBBUEkgYW5kIGV2ZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2xpcGJvYXJkLWFwaXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NsaXBib2FyZC1hcGlzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDbGlwYm9hcmQgQVBJIGFuZCBldmVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2FyeSBLYWNtYXJjaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmlzaGEgTHl1a3NoaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBzY3JvbGxiYXJzIG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNzcy1zY3JvbGxiYXJzLTEtMjAyMTA4MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBTY3JvbGxiYXJzIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBTY3JvbGxiYXJzICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMDUgLSA8YSB0aXRsZT0iQ1NTIFNjcm9sbGJhcnMgTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1zY3JvbGxiYXJzLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1zY3JvbGxiYXJzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgU2Nyb2xsYmFycyBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYW50ZWsgw4dlbGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9zc2VuIEF0YW5hc3NvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZsb3JpYW4gUml2b2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBtYXNraW5nIG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIGdyYXBoaWNzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbkRyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9DUkQtY3NzLW1hc2tpbmctMS0yMDIxMDgwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIE1hc2tpbmcgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIE1hc2tpbmcgIE1vZHVsZSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0wNSAtIDxhIHRpdGxlPSJDU1MgTWFza2luZyBNb2R1bGUgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLW1hc2tpbmctMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5meHRmLm9yZy9jc3MtbWFza2luZy0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgTWFza2luZyBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaXJrIFNjaHVsemUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmlhbiBCaXJ0bGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgY29sb3IgbW9kdWxlIGxldmVsIDMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvUkVDLWNzcy1jb2xvci0zLTIwMjEwODA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIENvbG9yICBNb2R1bGUgIExldmVsJm5ic3A7MzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDgtMDUgLSA8YSB0aXRsZT0iQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY29sb3ItMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvbG9yLTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYW50ZWsgw4dlbGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGlsbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQmFyb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRvbSIgZGF0YS10YWc9ImRvbSIgZGF0YS1zdGF0dXM9InByIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlBSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUHJvcG9zZWRSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvUFItRE9NLTIwMjEwODA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBET00gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5ET008L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTA1IC0gPGEgdGl0bGU9IkRPTSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZG9tIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRE9NIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImdhbWVwYWQiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtZ2FtZXBhZC0yMDIxMDgwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR2FtZXBhZCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkdhbWVwYWQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTA1IC0gPGEgdGl0bGU9IkdhbWVwYWQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dhbWVwYWQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dhbWVwYWQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEdhbWVwYWQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgQWdvc3RvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIEhvbGx5ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0aGV3IFJleW5vbGRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnJhbmRvbiBKb25lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IEdyYWhhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZW9kb3JlIE1pZWxjemFyZWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhcmlhIGluIGh0bWwiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbkRyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9DUkQtaHRtbC1hcmlhLTIwMjEwODA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBUklBIGluIEhUTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BUklBIGluIEhUTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTA0IC0gPGEgdGl0bGU9IkFSSUEgaW4gSFRNTCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHRtbC1hcmlhIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9odG1sLWFyaWEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEFSSUEgaW4gSFRNTCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBGYXVsa25lcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IE8mIzAzOTtIYXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF0cmljayBMYXVrZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImVwdWIgMyB0ZXh0LXRvLXNwZWVjaCBlbmhhbmNlbWVudHMgMS4wIiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS1lcHViLXR0cy0xMC0yMDIxMDgwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRVBVQiAzIFRleHQtdG8tU3BlZWNoIEVuaGFuY2VtZW50cyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FUFVCICAzICBUZXh0LXRvLVNwZWVjaCAgRW5oYW5jZW1lbnRzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5FUFVCIDMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTAzIC0gPGEgdGl0bGU9IkVQVUIgMyBUZXh0LXRvLVNwZWVjaCBFbmhhbmNlbWVudHMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lcHViLXR0cy0xMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZXB1Yi1zcGVjcy9lcHViMzMvdHRzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFUFVCIDMgVGV4dC10by1TcGVlY2ggRW5oYW5jZW1lbnRzIDEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0IEdhcnJpc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm9wYWdhdGlvbiBmb3JtYXQgZm9yIGRpc3RyaWJ1dGVkIHRyYWNlIGNvbnRleHQ6IGJhZ2dhZ2UiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtYmFnZ2FnZS0yMDIxMDgwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJvcGFnYXRpb24gZm9ybWF0IGZvciBkaXN0cmlidXRlZCB0cmFjZSBjb250ZXh0OiBCYWdnYWdlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvcGFnYXRpb24gZm9ybWF0IGZvciBkaXN0cmlidXRlZCB0cmFjZSBjb250ZXh0OiBCYWdnYWdlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EaXN0cmlidXRlZCBUcmFjaW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wOC0wMyAtIDxhIHRpdGxlPSJQcm9wYWdhdGlvbiBmb3JtYXQgZm9yIGRpc3RyaWJ1dGVkIHRyYWNlIGNvbnRleHQ6IEJhZ2dhZ2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2JhZ2dhZ2UiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2JhZ2dhZ2UvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFByb3BhZ2F0aW9uIGZvcm1hdCBmb3IgZGlzdHJpYnV0ZWQgdHJhY2UgY29udGV4dDogQmFnZ2FnZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZXJnZXkgS2FuemhlbGV2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEtoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ZdXJpIFNoa3VybwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsb2lzIFJlaXRiYXVlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1vcmdhbiBNY0xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZWNlbnRyYWxpemVkIGlkZW50aWZpZXJzIChkaWRzKSB2MS4wIiBkYXRhLXRhZz0icHJpdmFjeSBzZWN1cml0eSIgZGF0YS1zdGF0dXM9InByIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlBSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUHJvcG9zZWRSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvUFItZGlkLWNvcmUtMjAyMTA4MDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERlY2VudHJhbGl6ZWQgSWRlbnRpZmllcnMgKERJRHMpIHYxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZWNlbnRyYWxpemVkIElkZW50aWZpZXJzIChESURzKSB2MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZWNlbnRyYWxpemVkIElkZW50aWZpZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTAzIC0gPGEgdGl0bGU9IkRlY2VudHJhbGl6ZWQgSWRlbnRpZmllcnMgKERJRHMpIHYxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RpZC1jb3JlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kaWQtY29yZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRGVjZW50cmFsaXplZCBJZGVudGlmaWVycyAoRElEcykgdjEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYW51IFNwb3JueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFteSBHdXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrdXMgU2FiYWRlbGxvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RHJ1bW1vbmQgUmVlZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InByaXZhY3kiPlByaXZhY3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGV2aWNlIHBvc3R1cmUgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWRldmljZS1wb3N0dXJlLTIwMjEwODAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEZXZpY2UgUG9zdHVyZSBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZpY2UgUG9zdHVyZSBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA4LTAyIC0gPGEgdGl0bGU9IkRldmljZSBQb3N0dXJlIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGV2aWNlLXBvc3R1cmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RldmljZS1wb3N0dXJlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBEZXZpY2UgUG9zdHVyZSBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGllZ28gR29uemFsZXotWnVuaWdhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2VubmV0aCBDaHJpc3RpYW5zZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbnRlcm5hdGlvbmFsaXphdGlvbiBnbG9zc2FyeSIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtaTE4bi1nbG9zc2FyeS0yMDIxMDczMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW50ZXJuYXRpb25hbGl6YXRpb24gR2xvc3NhcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbnRlcm5hdGlvbmFsaXphdGlvbiBHbG9zc2FyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTMwIC0gPGEgdGl0bGU9IkludGVybmF0aW9uYWxpemF0aW9uIEdsb3NzYXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9pMThuLWdsb3NzYXJ5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9pMThuLWdsb3NzYXJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbnRlcm5hdGlvbmFsaXphdGlvbiBHbG9zc2FyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnZW5lcmljIHNlbnNvciBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSRC1nZW5lcmljLXNlbnNvci0yMDIxMDcyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR2VuZXJpYyBTZW5zb3IgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+R2VuZXJpYyBTZW5zb3IgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNy0yOSAtIDxhIHRpdGxlPSJHZW5lcmljIFNlbnNvciBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dlbmVyaWMtc2Vuc29yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZW5zb3JzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBHZW5lcmljIFNlbnNvciBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljayBXYWxkcm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlraGFpbCBQb3pkbnlha292CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleGFuZGVyIFNoYWxhbW92CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9iaWUgTGFuZ2VsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBmb250cyBtb2R1bGUgbGV2ZWwgNSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1jc3MtZm9udHMtNS0yMDIxMDcyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEZvbnRzIE1vZHVsZSBMZXZlbCA1IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBGb250cyAgTW9kdWxlICBMZXZlbCZuYnNwOzU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTI5IC0gPGEgdGl0bGU9IkNTUyBGb250cyBNb2R1bGUgTGV2ZWwgNSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWZvbnRzLTUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1mb250cy01LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgRm9udHMgTW9kdWxlIExldmVsIDUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TXlsZXMgTWF4ZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id29ya2xldHMgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS13b3JrbGV0cy0xLTIwMjEwNzI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXb3JrbGV0cyBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V29ya2xldHMgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGVjaG5pY2FsIEFyY2hpdGVjdHVyZSBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTI5IC0gPGEgdGl0bGU9IldvcmtsZXRzIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvcmtsZXRzLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3NzLWhvdWRpbmkub3JnL3dvcmtsZXRzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXb3JrbGV0cyBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBLaWxwYXRyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idmlzcyB2ZXJzaW9uIDIgLSBjb3JlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXZpc3MyLWNvcmUtMjAyMTA3MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZJU1MgdmVyc2lvbiAyIC0gQ29yZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlZJU1MgdmVyc2lvbiAyIC0gQ29yZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXV0b21vdGl2ZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjkgLSA8YSB0aXRsZT0iVklTUyB2ZXJzaW9uIDIgLSBDb3JlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92aXNzMi1jb3JlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZ2l0aHViLmNvbS93M2MvYXV0b21vdGl2ZS9ibG9iL2doLXBhZ2VzL3NwZWMvVklTU3YyX0NvcmUuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBWSVNTIHZlcnNpb24gMiAtIENvcmUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VWxmIEJqb3JrZW5ncmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXNhYWMgQWd1ZG8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgZm9udHMgbW9kdWxlIGxldmVsIDQiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1jc3MtZm9udHMtNC0yMDIxMDcyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEZvbnRzIE1vZHVsZSBMZXZlbCA0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBGb250cyAgTW9kdWxlICBMZXZlbCZuYnNwOzQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTI5IC0gPGEgdGl0bGU9IkNTUyBGb250cyBNb2R1bGUgTGV2ZWwgNCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWZvbnRzLTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1mb250cy00LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgRm9udHMgTW9kdWxlIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBEYWdnZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TXlsZXMgTWF4ZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InZpc3MgdmVyc2lvbiAyLXRyYW5zcG9ydCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC12aXNzMi10cmFuc3BvcnQtMjAyMTA3MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZJU1MgdmVyc2lvbiAyLVRyYW5zcG9ydCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlZJU1MgdmVyc2lvbiAyLVRyYW5zcG9ydDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXV0b21vdGl2ZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjkgLSA8YSB0aXRsZT0iVklTUyB2ZXJzaW9uIDItVHJhbnNwb3J0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92aXNzMi10cmFuc3BvcnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9naXRodWIuY29tL3czYy9hdXRvbW90aXZlL2Jsb2IvZ2gtcGFnZXMvc3BlYy9WSVNTdjJfVHJhbnNwb3J0Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVklTUyB2ZXJzaW9uIDItVHJhbnNwb3J0Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlVsZiBCam9ya2VuZ3JlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgTMO8bm5lbWFubgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGNvdW50ZXIgc3R5bGVzIGxldmVsIDMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uU25hcHNob3QiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSLWNzcy1jb3VudGVyLXN0eWxlcy0zLTIwMjEwNzI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ291bnRlciBTdHlsZXMgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgQ291bnRlciAgU3R5bGVzICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTI3IC0gPGEgdGl0bGU9IkNTUyBDb3VudGVyIFN0eWxlcyBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY291bnRlci1zdHlsZXMtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvdW50ZXItc3R5bGVzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQ291bnRlciBTdHlsZXMgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGJhY2tncm91bmRzIGFuZCBib3JkZXJzIG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbkRyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9DUkQtY3NzLWJhY2tncm91bmRzLTMtMjAyMTA3MjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBCYWNrZ3JvdW5kcyBhbmQgQm9yZGVycyBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgQmFja2dyb3VuZHMgIGFuZCAgQm9yZGVycyAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTI2IC0gPGEgdGl0bGU9IkNTUyBCYWNrZ3JvdW5kcyBhbmQgQm9yZGVycyBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWJhY2tncm91bmRzLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1iYWNrZ3JvdW5kcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEJhY2tncm91bmRzIGFuZCBCb3JkZXJzIE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcnQgQm9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnJhZCBLZW1wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1hZ25ldG9tZXRlciIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1tYWduZXRvbWV0ZXItMjAyMTA3MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1hZ25ldG9tZXRlciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1hZ25ldG9tZXRlcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjQgLSA8YSB0aXRsZT0iTWFnbmV0b21ldGVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tYWduZXRvbWV0ZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21hZ25ldG9tZXRlci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWFnbmV0b21ldGVyIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuc3NpIEtvc3RpYWluZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWp1YnJhdGEgQmhhdW1pawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFjY2VsZXJvbWV0ZXIiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSRC1hY2NlbGVyb21ldGVyLTIwMjEwNzI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY2NlbGVyb21ldGVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QWNjZWxlcm9tZXRlcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjQgLSA8YSB0aXRsZT0iQWNjZWxlcm9tZXRlciBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWNjZWxlcm9tZXRlciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYWNjZWxlcm9tZXRlci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQWNjZWxlcm9tZXRlciI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnNzaSBLb3N0aWFpbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleGFuZGVyIFNoYWxhbW92CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VsZWN0aW9uIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1zZWxlY3Rpb24tYXBpLTIwMjEwNzI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZWxlY3Rpb24gQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VsZWN0aW9uIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjQgLSA8YSB0aXRsZT0iU2VsZWN0aW9uIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2VsZWN0aW9uLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vc2VsZWN0aW9uLWFwaS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU2VsZWN0aW9uIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SeW9zdWtlIE5pd2EKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJneXJvc2NvcGUiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSRC1neXJvc2NvcGUtMjAyMTA3MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEd5cm9zY29wZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkd5cm9zY29wZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjQgLSA8YSB0aXRsZT0iR3lyb3Njb3BlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9neXJvc2NvcGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2d5cm9zY29wZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR3lyb3Njb3BlIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuc3NpIEtvc3RpYWluZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWtoYWlsIFBvemRueWFrb3YKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYXN0cmVhbXRyYWNrIGNvbnRlbnQgaGludHMiIGRhdGEtdGFnPSJtZWRpYSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtbXN0LWNvbnRlbnQtaGludC0yMDIxMDcyMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWFTdHJlYW1UcmFjayBDb250ZW50IEhpbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWFTdHJlYW1UcmFjayBDb250ZW50IEhpbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNy0yMiAtIDxhIHRpdGxlPSJNZWRpYVN0cmVhbVRyYWNrIENvbnRlbnQgSGludHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21zdC1jb250ZW50LWhpbnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21zdC1jb250ZW50LWhpbnQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1lZGlhU3RyZWFtVHJhY2sgQ29udGVudCBIaW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IYXJhbGQgQWx2ZXN0cmFuZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGNvbG9yIG1vZHVsZSBsZXZlbCA1IiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNzcy1jb2xvci01LTIwMjEwNzIyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIENvbG9yICBNb2R1bGUgIExldmVsJm5ic3A7NTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjIgLSA8YSB0aXRsZT0iQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCA1IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY29sb3ItNSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvbG9yLTUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgNSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5VbmEgS3JhdmV0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxlYSBWZXJvdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkYW0gQXJneWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJmZXRjaCBtZXRhZGF0YSByZXF1ZXN0IGhlYWRlcnMiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1mZXRjaC1tZXRhZGF0YS0yMDIxMDcyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRmV0Y2ggTWV0YWRhdGEgUmVxdWVzdCBIZWFkZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RmV0Y2ggTWV0YWRhdGEgUmVxdWVzdCBIZWFkZXJzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTIwIC0gPGEgdGl0bGU9IkZldGNoIE1ldGFkYXRhIFJlcXVlc3QgSGVhZGVycyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZmV0Y2gtbWV0YWRhdGEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1mZXRjaC1tZXRhZGF0YS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRmV0Y2ggTWV0YWRhdGEgUmVxdWVzdCBIZWFkZXJzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgV2VzdAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBlcm1pc3Npb25zIiBkYXRhLXRhZz0ic2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtcGVybWlzc2lvbnMtMjAyMTA3MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBlcm1pc3Npb25zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGVybWlzc2lvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbiBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMjAgLSA8YSB0aXRsZT0iUGVybWlzc2lvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Blcm1pc3Npb25zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wZXJtaXNzaW9ucy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUGVybWlzc2lvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TW91bmlyIExhbW91cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplZmZyZXkgWWFzc2tpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaGlnaCByZXNvbHV0aW9uIHRpbWUiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1oci10aW1lLTMtMjAyMTA3MTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhpZ2ggUmVzb2x1dGlvbiBUaW1lIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SGlnaCBSZXNvbHV0aW9uIFRpbWU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMTUgLSA8YSB0aXRsZT0iSGlnaCBSZXNvbHV0aW9uIFRpbWUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2hyLXRpbWUtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vaHItdGltZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSGlnaCBSZXNvbHV0aW9uIFRpbWUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW9hdiBXZWlzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW1lcyBTaW1vbnNlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaWRlbnRpZmllcnMgZm9yIHdlYnJ0YyYjMDM5O3Mgc3RhdGlzdGljcyBhcGkiIGRhdGEtdGFnPSJtZWRpYSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSRC13ZWJydGMtc3RhdHMtMjAyMTA3MTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIElkZW50aWZpZXJzIGZvciBXZWJSVEMmIzAzOTtzIFN0YXRpc3RpY3MgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SWRlbnRpZmllcnMgZm9yIFdlYlJUQydzIFN0YXRpc3RpY3MgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNy0xNSAtIDxhIHRpdGxlPSJJZGVudGlmaWVycyBmb3IgV2ViUlRDJiMwMzk7cyBTdGF0aXN0aWNzIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VicnRjLXN0YXRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtc3RhdHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIElkZW50aWZpZXJzIGZvciBXZWJSVEMmIzAzOTtzIFN0YXRpc3RpY3MgQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhhcmFsZCBBbHZlc3RyYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmFydW4gU2luZ2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yaWsgQm9zdHLDtm0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgdmFsdWVzIGFuZCB1bml0cyBtb2R1bGUgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNzcy12YWx1ZXMtNC0yMDIxMDcxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFZhbHVlcyBhbmQgVW5pdHMgTW9kdWxlIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFZhbHVlcyAgYW5kICBVbml0cyAgTW9kdWxlICBMZXZlbCZuYnNwOzQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTE1IC0gPGEgdGl0bGU9IkNTUyBWYWx1ZXMgYW5kIFVuaXRzIE1vZHVsZSBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtdmFsdWVzLTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtNC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFZhbHVlcyBhbmQgVW5pdHMgTW9kdWxlIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBheW1lbnQgaGFuZGxlciBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtcGF5bWVudC1oYW5kbGVyLTIwMjEwNzE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQYXltZW50IEhhbmRsZXIgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGF5bWVudCBIYW5kbGVyIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBheW1lbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNy0xNCAtIDxhIHRpdGxlPSJQYXltZW50IEhhbmRsZXIgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wYXltZW50LWhhbmRsZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BheW1lbnQtaGFuZGxlci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUGF5bWVudCBIYW5kbGVyIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZHJpYW4gSG9wZS1CYWlsaWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSmFjb2JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um91c2xhbiBTb2xvbWFraGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmluaG8gQmFuZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphc29uIE5vcm1vcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub21teSBUaG9yc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRhbSBSb2FjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idXNlciB0aW1pbmcgbGV2ZWwgMyIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXVzZXItdGltaW5nLTMtMjAyMTA3MTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVzZXIgVGltaW5nIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2VyICBUaW1pbmcgIExldmVsJm5ic3A7MzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNy0xMyAtIDxhIHRpdGxlPSJVc2VyIFRpbWluZyBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS91c2VyLXRpbWluZy0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby91c2VyLXRpbWluZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVXNlciBUaW1pbmcgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OaWNvbGFzIFBlbmEgTW9yZW5vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWx5YSBHcmlnb3JpawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aaGloZW5nIFdhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRlcnNvbiBRdWFjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImVwdWIgMy4zIiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1lcHViLTMzLTIwMjEwNzEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFUFVCIDMuMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVQVUImbmJzcDszLjM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVQVUIgMyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMTIgLSA8YSB0aXRsZT0iRVBVQiAzLjMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2VwdWItMzMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2VwdWItc3BlY3MvZXB1YjMzL2NvcmUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEVQVUIgMy4zIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgR2FycmlzaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkl2YW4gSGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBDcmFtZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HYXJ0aCBDb25ib3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJpc2EgRGVNZWdsaW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgV2VjawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRwdWIiPkRpZ2l0YWwgUHVibGlzaGluZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlcHViIGFjY2Vzc2liaWxpdHkgMS4xIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSBkcHViIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWVwdWItYTExeS0xMS0yMDIxMDcxMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRVBVQiBBY2Nlc3NpYmlsaXR5IDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVQVUIgIEFjY2Vzc2liaWxpdHkmbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVQVUIgMyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMTIgLSA8YSB0aXRsZT0iRVBVQiBBY2Nlc3NpYmlsaXR5IDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZXB1Yi1hMTF5LTExIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9lcHViLXNwZWNzL2VwdWIzMy9hMTF5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFUFVCIEFjY2Vzc2liaWxpdHkgMS4xIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgR2FycmlzaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdlb3JnZSBLZXJzY2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNoYXJsZXMgTGFQaWVycmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnb3JpbyBQZWxsZWdyaW5vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXZuZWVzaCBTaW5naAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZXB1YiByZWFkaW5nIHN5c3RlbXMgMy4zIiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1lcHViLXJzLTMzLTIwMjEwNzEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFUFVCIFJlYWRpbmcgU3lzdGVtcyAzLjMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FUFVCICBSZWFkaW5nICBTeXN0ZW1zJm5ic3A7My4zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5FUFVCIDMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTEyIC0gPGEgdGl0bGU9IkVQVUIgUmVhZGluZyBTeXN0ZW1zIDMuMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZXB1Yi1ycy0zMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZXB1Yi1zcGVjcy9lcHViMzMvcnMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEVQVUIgUmVhZGluZyBTeXN0ZW1zIDMuMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIENyYW1lcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgR2FycmlzaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkl2YW4gSGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2FydGggQ29uYm95CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyaXNhIERlTWVnbGlvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFdlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlcHViIGFjY2Vzc2liaWxpdHkgdGVjaG5pcXVlcyAxLjEiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGRwdWIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtZXB1Yi1hMTF5LXRlY2gtMTEtMjAyMTA3MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEVQVUIgQWNjZXNzaWJpbGl0eSBUZWNobmlxdWVzIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVQVUIgIEFjY2Vzc2liaWxpdHkgIFRlY2huaXF1ZXMmbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVQVUIgMyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDctMTIgLSA8YSB0aXRsZT0iRVBVQiBBY2Nlc3NpYmlsaXR5IFRlY2huaXF1ZXMgMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lcHViLWExMXktdGVjaC0xMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZXB1Yi1zcGVjcy9lcHViMzMvYTExeS10ZWNoLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFUFVCIEFjY2Vzc2liaWxpdHkgVGVjaG5pcXVlcyAxLjEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBHYXJyaXNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2VvcmdlIEtlcnNjaGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBMYVBpZXJyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWdvcmlvIFBlbGxlZ3Jpbm8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bdm5lZXNoIFNpbmdoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzY2FsYWJsZSB2aWRlbyBjb2RpbmcgKHN2YykgZXh0ZW5zaW9uIGZvciB3ZWJydGMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC13ZWJydGMtc3ZjLTIwMjEwNzEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTY2FsYWJsZSBWaWRlbyBDb2RpbmcgKFNWQykgRXh0ZW5zaW9uIGZvciBXZWJSVEMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TY2FsYWJsZSBWaWRlbyBDb2RpbmcgKFNWQykgRXh0ZW5zaW9uIGZvciBXZWJSVEM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTEyIC0gPGEgdGl0bGU9IlNjYWxhYmxlIFZpZGVvIENvZGluZyAoU1ZDKSBFeHRlbnNpb24gZm9yIFdlYlJUQyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VicnRjLXN2YyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2VicnRjLXN2Yy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU2NhbGFibGUgVmlkZW8gQ29kaW5nIChTVkMpIEV4dGVuc2lvbiBmb3IgV2ViUlRDIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcm5hcmQgQWJvYmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBUaGF0Y2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndvZmYgZmlsZSBmb3JtYXQgMi4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9SRUMtV09GRjItMjAyMTA3MDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdPRkYgRmlsZSBGb3JtYXQgMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V09GRiAgRmlsZSAgRm9ybWF0Jm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgRm9udHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA3LTA2IC0gPGEgdGl0bGU9IldPRkYgRmlsZSBGb3JtYXQgMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XT0ZGMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd29mZi93b2ZmMi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV09GRiBGaWxlIEZvcm1hdCAyLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmxhZGltaXIgTGV2YW50b3Zza3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SYXBoIExldmllbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1ZGlvIG91dHB1dCBkZXZpY2VzIGFwaSIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb25EcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvQ1JELWF1ZGlvLW91dHB1dC0yMDIxMDcwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXVkaW8gT3V0cHV0IERldmljZXMgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QXVkaW8gT3V0cHV0IERldmljZXMgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNy0wNiAtIDxhIHRpdGxlPSJBdWRpbyBPdXRwdXQgRGV2aWNlcyBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2F1ZGlvLW91dHB1dCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWVkaWFjYXB0dXJlLW91dHB1dC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQXVkaW8gT3V0cHV0IERldmljZXMgQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1c3RpbiBVYmVydGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HdWlkbyBVcmRhbmV0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnlvdWVubiBmYWJsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWVkaWEgY2FwdHVyZSBmcm9tIGRvbSBlbGVtZW50cyIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1tZWRpYWNhcHR1cmUtZnJvbWVsZW1lbnQtMjAyMTA3MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lZGlhIENhcHR1cmUgZnJvbSBET00gRWxlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZWRpYSBDYXB0dXJlIGZyb20gRE9NIEVsZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNy0wNSAtIDxhIHRpdGxlPSJNZWRpYSBDYXB0dXJlIGZyb20gRE9NIEVsZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYWNhcHR1cmUtZnJvbWVsZW1lbnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21lZGlhY2FwdHVyZS1mcm9tZWxlbWVudC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWVkaWEgQ2FwdHVyZSBmcm9tIERPTSBFbGVtZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gVGhvbXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pZ3VlbCBDYXNhcy1zYW5jaGV6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RW1pcmNhbiBVeXNhbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNlcnZlciB0aW1pbmciIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0Qtc2VydmVyLXRpbWluZy0yMDIxMDYzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2VydmVyIFRpbWluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNlcnZlciBUaW1pbmc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMzAgLSA8YSB0aXRsZT0iU2VydmVyIFRpbWluZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2VydmVyLXRpbWluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vc2VydmVyLXRpbWluZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU2VydmVyIFRpbWluZyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGFybGVzIFZhemFjCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWx5YSBHcmlnb3JpawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlcHViIGFjY2Vzc2liaWxpdHkgLSBldSBhY2Nlc3NpYmlsaXR5IGFjdCBtYXBwaW5nIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSBkcHViIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9OT1RFLWVwdWItYTExeS1lYWEtbWFwcGluZy0yMDIxMDYyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRVBVQiBBY2Nlc3NpYmlsaXR5IC0gRVUgQWNjZXNzaWJpbGl0eSBBY3QgTWFwcGluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVQVUIgQWNjZXNzaWJpbGl0eSAtIEVVIEFjY2Vzc2liaWxpdHkgQWN0IE1hcHBpbmc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVQVUIgMyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMjkgLSA8YSB0aXRsZT0iRVBVQiBBY2Nlc3NpYmlsaXR5IC0gRVUgQWNjZXNzaWJpbGl0eSBBY3QgTWFwcGluZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZXB1Yi1hMTF5LWVhYS1tYXBwaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9lcHViLXNwZWNzL2VwdWIzMy9lcHViLWExMXktZWFhLW1hcHBpbmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEVQVUIgQWNjZXNzaWJpbGl0eSAtIEVVIEFjY2Vzc2liaWxpdHkgQWN0IE1hcHBpbmciPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q3Jpc3RpbmEgTXVzc2luZWxsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkx1YyBBdWRyYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZ29yaW8gUGVsbGVncmlubwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlIHBsYWluIGNib3IgcmVwcmVzZW50YXRpb24gdjEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS1kaWQtY2Jvci1yZXByZXNlbnRhdGlvbi0yMDIxMDYyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIFBsYWluIENCT1IgUmVwcmVzZW50YXRpb24gdjEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBQbGFpbiBDQk9SIFJlcHJlc2VudGF0aW9uIHYxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRlY2VudHJhbGl6ZWQgSWRlbnRpZmllciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMjkgLSA8YSB0aXRsZT0iVGhlIFBsYWluIENCT1IgUmVwcmVzZW50YXRpb24gdjEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGlkLWNib3ItcmVwcmVzZW50YXRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RpZC1jYm9yLW5vdGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRoZSBQbGFpbiBDQk9SIFJlcHJlc2VudGF0aW9uIHYxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RHJ1bW1vbmQgUmVlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbnUgU3Bvcm55CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbnRlbnQgc2VjdXJpdHkgcG9saWN5IGxldmVsIDMiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELUNTUDMtMjAyMTA2MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db250ZW50ICBTZWN1cml0eSAgUG9saWN5ICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbiBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMjkgLSA8YSB0aXRsZT0iQ29udGVudCBTZWN1cml0eSBQb2xpY3kgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvQ1NQMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLWNzcC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWtlIFdlc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzY3JlZW4gd2FrZSBsb2NrIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1zY3JlZW4td2FrZS1sb2NrLTIwMjEwNjI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTY3JlZW4gV2FrZSBMb2NrIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNjcmVlbiBXYWtlIExvY2sgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0yOSAtIDxhIHRpdGxlPSJTY3JlZW4gV2FrZSBMb2NrIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2NyZWVuLXdha2UtbG9jayI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vc2NyZWVuLXdha2UtbG9jay8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU2NyZWVuIFdha2UgTG9jayBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2VubmV0aCBDaHJpc3RpYW5zZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhcGhhZWwgS3VibyBkYSBDb3N0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgQm9nZGFub3ZpY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXkgTG9ndmlub3YKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtaW5pYXBwIG1hbmlmZXN0IiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELW1pbmlhcHAtbWFuaWZlc3QtMjAyMTA2MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1pbmlBcHAgTWFuaWZlc3QgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NaW5pQXBwIE1hbmlmZXN0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NaW5pQXBwcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMjggLSA8YSB0aXRsZT0iTWluaUFwcCBNYW5pZmVzdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWluaWFwcC1tYW5pZmVzdCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWluaWFwcC1tYW5pZmVzdC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWluaUFwcCBNYW5pZmVzdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gQWx2YXJlei1Fc3BpbmFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW9uZ2ppbmcgWkhBTkcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaG91cmVuIExhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlpoaXFpYW5nIFl1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WGlhb2ZlbmcgWmhhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIiIGRhdGEtdGFnPSJkb20iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtaW50ZXJzZWN0aW9uLW9ic2VydmVyLTIwMjEwNjI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbnRlcnNlY3Rpb24gT2JzZXJ2ZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbnRlcnNlY3Rpb24gT2JzZXJ2ZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTI0IC0gPGEgdGl0bGU9IkludGVyc2VjdGlvbiBPYnNlcnZlciBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaW50ZXJzZWN0aW9uLW9ic2VydmVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9JbnRlcnNlY3Rpb25PYnNlcnZlci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSW50ZXJzZWN0aW9uIE9ic2VydmVyIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZWZhbiBaYWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVtaWxpbyBDb2JvcyDDgWx2YXJlegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQmxhaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW5kZXhlZCBkYXRhYmFzZSBhcGkgMy4wIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtSW5kZXhlZERCLTMtMjAyMTA2MTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEluZGV4ZWQgRGF0YWJhc2UgQVBJIDMuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkluZGV4ZWQgIERhdGFiYXNlICBBUEkmbmJzcDszLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTE4IC0gPGEgdGl0bGU9IkluZGV4ZWQgRGF0YWJhc2UgQVBJIDMuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvSW5kZXhlZERCLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0luZGV4ZWREQi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSW5kZXhlZCBEYXRhYmFzZSBBUEkgMy4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsaSBBbGFiYmFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zaHVhIEJlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aGUgc2NyZWVuIG9yaWVudGF0aW9uIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1zY3JlZW4tb3JpZW50YXRpb24tMjAyMTA2MTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRoZSBTY3JlZW4gT3JpZW50YXRpb24gQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIFNjcmVlbiBPcmllbnRhdGlvbiBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTE3IC0gPGEgdGl0bGU9IlRoZSBTY3JlZW4gT3JpZW50YXRpb24gQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zY3JlZW4tb3JpZW50YXRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3NjcmVlbi1vcmllbnRhdGlvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVGhlIFNjcmVlbiBPcmllbnRhdGlvbiBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TW91bmlyIExhbW91cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaGFubmEgSGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGF1ZGlvIGFwaSIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvUkVDLXdlYmF1ZGlvLTIwMjEwNjE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQXVkaW8gQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIEF1ZGlvIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXVkaW8gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTE3IC0gPGEgdGl0bGU9IldlYiBBdWRpbyBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmF1ZGlvIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd2ViYXVkaW8uZ2l0aHViLmlvL3dlYi1hdWRpby1hcGkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBBdWRpbyBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBBZGVub3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ib25nY2hhbiBDaG9pCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InB1c2ggYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXB1c2gtYXBpLTIwMjEwNjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQdXNoIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlB1c2ggQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0xNiAtIDxhIHRpdGxlPSJQdXNoIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHVzaC1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3B1c2gtYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQdXNoIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBCZXZlcmxvbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnRpbiBUaG9tc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBjb2xvciBhZGp1c3RtZW50IG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNzcy1jb2xvci1hZGp1c3QtMS0yMDIxMDYxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIENvbG9yIEFkanVzdG1lbnQgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIENvbG9yICBBZGp1c3RtZW50ICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMTYgLSA8YSB0aXRsZT0iQ1NTIENvbG9yIEFkanVzdG1lbnQgTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1jb2xvci1hZGp1c3QtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvbG9yLWFkanVzdC0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQ29sb3IgQWRqdXN0bWVudCBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3NzZW4gQXRhbmFzc292CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UnVuZSBMaWxsZXN2ZWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1pbmlhcHAgbGlmZWN5Y2xlIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELW1pbmlhcHAtbGlmZWN5Y2xlLTIwMjEwNjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNaW5pQXBwIExpZmVjeWNsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1pbmlBcHAgTGlmZWN5Y2xlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NaW5pQXBwcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMTYgLSA8YSB0aXRsZT0iTWluaUFwcCBMaWZlY3ljbGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21pbmlhcHAtbGlmZWN5Y2xlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9taW5pYXBwLWxpZmVjeWNsZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWluaUFwcCBMaWZlY3ljbGUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UWluZyBBbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhhb3lhbmcgWHUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjaGluZXNlIGxheW91dCBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNscmVxLWdhcC0yMDIxMDYxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ2hpbmVzZSBMYXlvdXQgR2FwIEFuYWx5c2lzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2hpbmVzZSBMYXlvdXQgR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMTQgLSA8YSB0aXRsZT0iQ2hpbmVzZSBMYXlvdXQgR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jbHJlcS1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NscmVxL2dhcC1hbmFseXNpcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ2hpbmVzZSBMYXlvdXQgR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZ1cWlhbyBYdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzY3JlZW4gY2FwdHVyZSIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1zY3JlZW4tY2FwdHVyZS0yMDIxMDYxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2NyZWVuIENhcHR1cmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TY3JlZW4gQ2FwdHVyZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFJlYWwtVGltZSBDb21tdW5pY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMTAgLSA8YSB0aXRsZT0iU2NyZWVuIENhcHR1cmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NjcmVlbi1jYXB0dXJlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tZWRpYWNhcHR1cmUtc2NyZWVuLXNoYXJlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTY3JlZW4gQ2FwdHVyZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gVGhvbXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlaXRoIEdyaWZmaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdWhhcyBOYW5kYWt1bWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVucmlrIEJvc3Ryw7ZtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFuLUl2YXIgQnJ1YXJvZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGFkIEFsb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVhZHktbWFkZSBjb3VudGVyIHN0eWxlcyIgZGF0YS10YWc9ImNzcyBpMThuIHhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS1wcmVkZWZpbmVkLWNvdW50ZXItc3R5bGVzLTIwMjEwNjA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZWFkeS1tYWRlIENvdW50ZXIgU3R5bGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVhZHktbWFkZSBDb3VudGVyIFN0eWxlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTA5IC0gPGEgdGl0bGU9IlJlYWR5LW1hZGUgQ291bnRlciBTdHlsZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ByZWRlZmluZWQtY291bnRlci1zdHlsZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3ByZWRlZmluZWQtY291bnRlci1zdHlsZXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlYWR5LW1hZGUgQ291bnRlciBTdHlsZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGNhc2NhZGluZyBhbmQgaW5oZXJpdGFuY2UgbGV2ZWwgNSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNzcy1jYXNjYWRlLTUtMjAyMTA2MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBDYXNjYWRpbmcgYW5kIEluaGVyaXRhbmNlIExldmVsIDUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIENhc2NhZGluZyAgYW5kICBJbmhlcml0YW5jZSAgTGV2ZWwmbmJzcDs1PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0wOCAtIDxhIHRpdGxlPSJDU1MgQ2FzY2FkaW5nIGFuZCBJbmhlcml0YW5jZSBMZXZlbCA1IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY2FzY2FkZS01Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY2FzY2FkZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIENhc2NhZGluZyBhbmQgSW5oZXJpdGFuY2UgTGV2ZWwgNSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaXJpYW0gU3V6YW5uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idzNjIGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAod2NhZykgMy4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXdjYWctMy4wLTIwMjEwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXM0MgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChXQ0FHKSAzLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XM0MgIEFjY2Vzc2liaWxpdHkgIEd1aWRlbGluZXMgIChXQ0FHKSZuYnNwOzMuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0wOCAtIDxhIHRpdGxlPSJXM0MgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChXQ0FHKSAzLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3djYWctMy4wIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zaWx2ZXIvZ3VpZGVsaW5lcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVzNDIEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykgMy4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplYW5uZSBGIFNwZWxsbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFjaGFlbCBCcmFkbGV5IE1vbnRnb21lcnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGF3biBMYXVyaWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViY29kZWNzIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0Qtd2ViY29kZWNzLTIwMjEwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJDb2RlY3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJDb2RlY3M8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1lZGlhIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0wOCAtIDxhIHRpdGxlPSJXZWJDb2RlY3MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmNvZGVjcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViY29kZWNzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJDb2RlY3MiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgQ3VubmluZ2hhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgQWRlbm90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVybmFyZCBBYm9iYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1ZGlvIGVxIGNvb2tib29rIiBkYXRhLXRhZz0ibWVkaWEgd2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9OT1RFLWF1ZGlvLWVxLWNvb2tib29rLTIwMjEwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBdWRpbyBFUSBDb29rYm9vayBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkF1ZGlvIEVRIENvb2tib29rPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BdWRpbyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMDggLSA8YSB0aXRsZT0iQXVkaW8gRVEgQ29va2Jvb2sgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2F1ZGlvLWVxLWNvb2tib29rIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd2ViYXVkaW8uZ2l0aHViLmlvL0F1ZGlvLUVRLUNvb2tib29rL2F1ZGlvLWVxLWNvb2tib29rLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQXVkaW8gRVEgQ29va2Jvb2siPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmF5bW9uZCBUb3kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgb2YgdGhpbmdzICh3b3QpIHRoaW5nIGRlc2NyaXB0aW9uIDEuMSIgZGF0YS10YWc9IndvdCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXdvdC10aGluZy1kZXNjcmlwdGlvbjExLTIwMjEwNjA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgb2YgVGhpbmdzIChXb1QpIFRoaW5nIERlc2NyaXB0aW9uIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiAgb2YgIFRoaW5ncyAgKFdvVCkgIFRoaW5nICBEZXNjcmlwdGlvbiZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIG9mIFRoaW5ncyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMDcgLSA8YSB0aXRsZT0iV2ViIG9mIFRoaW5ncyAoV29UKSBUaGluZyBEZXNjcmlwdGlvbiAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvdC10aGluZy1kZXNjcmlwdGlvbjExIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93b3QtdGhpbmctZGVzY3JpcHRpb24vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBvZiBUaGluZ3MgKFdvVCkgVGhpbmcgRGVzY3JpcHRpb24gMS4xIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNlYmFzdGlhbiBLw6RiaXNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRha3VraSBLYW1peWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIE1jQ29vbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZpY3RvciBDaGFycGVuYXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImZpbGUgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELUZpbGVBUEktMjAyMTA2MDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEZpbGUgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RmlsZSBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTA0IC0gPGEgdGl0bGU9IkZpbGUgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9GaWxlQVBJIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9GaWxlQVBJLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBGaWxlIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJpam4gS3J1aXNzZWxicmluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFydW4gUmFuZ2FuYXRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYSBjYXBhYmlsaXRpZXMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1tZWRpYS1jYXBhYmlsaXRpZXMtMjAyMTA2MDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lZGlhIENhcGFiaWxpdGllcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1lZGlhIENhcGFiaWxpdGllczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWVkaWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTA0IC0gPGEgdGl0bGU9Ik1lZGlhIENhcGFiaWxpdGllcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWVkaWEtY2FwYWJpbGl0aWVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tZWRpYS1jYXBhYmlsaXRpZXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1lZGlhIENhcGFiaWxpdGllcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Nb3VuaXIgTGFtb3VyaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzIEN1bm5pbmdoYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WaSBOZ3V5ZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwaWN0dXJlLWluLXBpY3R1cmUiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1waWN0dXJlLWluLXBpY3R1cmUtMjAyMTA2MDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBpY3R1cmUtaW4tUGljdHVyZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBpY3R1cmUtaW4tUGljdHVyZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWVkaWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA2LTA0IC0gPGEgdGl0bGU9IlBpY3R1cmUtaW4tUGljdHVyZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcGljdHVyZS1pbi1waWN0dXJlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9waWN0dXJlLWluLXBpY3R1cmUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBpY3R1cmUtaW4tUGljdHVyZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmFuY29pcyBCZWF1Zm9ydAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1vdW5pciBMYW1vdXJpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWVkaWEgc2Vzc2lvbiBzdGFuZGFyZCIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELW1lZGlhc2Vzc2lvbi0yMDIxMDYwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWEgU2Vzc2lvbiBTdGFuZGFyZCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1lZGlhIFNlc3Npb24gU3RhbmRhcmQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1lZGlhIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0wNCAtIDxhIHRpdGxlPSJNZWRpYSBTZXNzaW9uIFN0YW5kYXJkIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYXNlc3Npb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21lZGlhc2Vzc2lvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWVkaWEgU2Vzc2lvbiBTdGFuZGFyZCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Nb3VuaXIgTGFtb3VyaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlY2NhIEh1Z2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImltYWdlIHJlc291cmNlIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWltYWdlLXJlc291cmNlLTIwMjEwNjA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbWFnZSBSZXNvdXJjZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkltYWdlIFJlc291cmNlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0wNCAtIDxhIHRpdGxlPSJJbWFnZSBSZXNvdXJjZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaW1hZ2UtcmVzb3VyY2UiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2ltYWdlLXJlc291cmNlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbWFnZSBSZXNvdXJjZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BYXJvbiBHdXN0YWZzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SYXlhbiBLYW5zbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmNvcyBDYWNlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWVkaWFzdHJlYW0gcmVjb3JkaW5nIiBkYXRhLXRhZz0ibWVkaWEgd2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELW1lZGlhc3RyZWFtLXJlY29yZGluZy0yMDIxMDYwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWFTdHJlYW0gUmVjb3JkaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWFTdHJlYW0gUmVjb3JkaW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0wNCAtIDxhIHRpdGxlPSJNZWRpYVN0cmVhbSBSZWNvcmRpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21lZGlhc3RyZWFtLXJlY29yZGluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWVkaWFjYXB0dXJlLXJlY29yZC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWVkaWFTdHJlYW0gUmVjb3JkaW5nIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pZ3VlbCBDYXNhcy1zYW5jaGV6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQmFybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRyYXZpcyBMZWl0aGVhZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgb2YgdGhpbmdzICh3b3QpIGRpc2NvdmVyeSIgZGF0YS10YWc9IndvdCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC13b3QtZGlzY292ZXJ5LTIwMjEwNjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgb2YgVGhpbmdzIChXb1QpIERpc2NvdmVyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBvZiBUaGluZ3MgKFdvVCkgRGlzY292ZXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgb2YgVGhpbmdzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNi0wMiAtIDxhIHRpdGxlPSJXZWIgb2YgVGhpbmdzIChXb1QpIERpc2NvdmVyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd290LWRpc2NvdmVyeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd290LWRpc2NvdmVyeS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBEaXNjb3ZlcnkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVhIENpbW1pbm8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIE1jQ29vbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZhcnNoaWQgVGF2YWtvbGl6YWRlaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkt1bmloaWtvIFRvdW11cmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBjb2xvciBtb2R1bGUgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNzcy1jb2xvci00LTIwMjEwNjAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIENvbG9yICBNb2R1bGUgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDYtMDEgLSA8YSB0aXRsZT0iQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY29sb3ItNCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvbG9yLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSByZXNwb25zaWJsZSB1c2Ugb2Ygc3BhdGlhbCBkYXRhIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS1yZXNwb25zaWJsZS11c2Utc3BhdGlhbC0yMDIxMDUyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIFJlc3BvbnNpYmxlIFVzZSBvZiBTcGF0aWFsIERhdGEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgUmVzcG9uc2libGUgVXNlIG9mIFNwYXRpYWwgRGF0YTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U3BhdGlhbCBEYXRhIG9uIHRoZSBXZWIgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNyAtIDxhIHRpdGxlPSJUaGUgUmVzcG9uc2libGUgVXNlIG9mIFNwYXRpYWwgRGF0YSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmVzcG9uc2libGUtdXNlLXNwYXRpYWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3Nkdy9yZXNwb25zaWJsZS11c2UvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRoZSBSZXNwb25zaWJsZSBVc2Ugb2YgU3BhdGlhbCBEYXRhIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpPU0VQSCBBQkhBWUFSQVROQQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVkIFBhcnNvbnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGliZXRhbiBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXRpYnQtZ2FwLTIwMjEwNTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaWJldGFuIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRpYmV0YW4gR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjUgLSA8YSB0aXRsZT0iVGliZXRhbiBHYXAgQW5hbHlzaXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RpYnQtZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby90bHJlcS9nYXAtYW5hbHlzaXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRpYmV0YW4gR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRldmFuYWdhcmkgZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1kZXZhLWdhcC0yMDIxMDUyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGV2YW5hZ2FyaSBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZhbmFnYXJpIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTI1IC0gPGEgdGl0bGU9IkRldmFuYWdhcmkgR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kZXZhLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vaWlwL2dhcC1hbmFseXNpcy9kZXZhLWdhcCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBEZXZhbmFnYXJpIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ba3NoYXQgSm9zaGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsYW8gZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1sYW9vLWdhcC0yMDIxMDUyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTGFvIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkxhbyBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNSAtIDxhIHRpdGxlPSJMYW8gR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sYW9vLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vc2VhbHJlcS9nYXAtYW5hbHlzaXMvbGFvby1nYXAiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTGFvIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJydGMgYWNjZXNzaWJpbGl0eSB1c2VyIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtcmF1ci0yMDIxMDUyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUlRDIEFjY2Vzc2liaWxpdHkgVXNlciBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SVEMgQWNjZXNzaWJpbGl0eSBVc2VyIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBQbGF0Zm9ybSBBcmNoaXRlY3R1cmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNSAtIDxhIHRpdGxlPSJSVEMgQWNjZXNzaWJpbGl0eSBVc2VyIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmF1ciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYXBhL3JhdXIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJUQyBBY2Nlc3NpYmlsaXR5IFVzZXIgUmVxdWlyZW1lbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2h1ZSBPJiMwMzk7Q29ubm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFuaW5hIFNhamthCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFzb24gV2hpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJoZWJyZXcgZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1oZWJyLWdhcC0yMDIxMDUyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSGVicmV3IEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhlYnJldyBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNSAtIDxhIHRpdGxlPSJIZWJyZXcgR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9oZWJyLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vaGxyZXEvZ2FwLWFuYWx5c2lzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBIZWJyZXcgR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imd1cm11a2hpIGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtZ3VydS1nYXAtMjAyMTA1MjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEd1cm11a2hpIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkd1cm11a2hpIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTI1IC0gPGEgdGl0bGU9Ikd1cm11a2hpIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZ3VydS1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2lpcC9nYXAtYW5hbHlzaXMvZ3VydS1nYXAiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR3VybXVraGkgR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFrc2hhdCBKb3NoaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1vZGVybiBncmVlayBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWdyZWstZ2FwLTIwMjEwNTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNb2Rlcm4gR3JlZWsgR2FwIEFuYWx5c2lzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TW9kZXJuIEdyZWVrIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTI1IC0gPGEgdGl0bGU9Ik1vZGVybiBHcmVlayBHYXAgQW5hbHlzaXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dyZWstZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9ldXJscmVxL2dhcC1hbmFseXNpcy9ncmVrLWdhcCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBNb2Rlcm4gR3JlZWsgR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImtobWVyIGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0Qta2htci1nYXAtMjAyMTA1MjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEtobWVyIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPktobWVyIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTI1IC0gPGEgdGl0bGU9IktobWVyIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkva2htci1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3NlYWxyZXEvZ2FwLWFuYWx5c2lzL2tobXItZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEtobWVyIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJndWphcmF0aSBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWd1anItZ2FwLTIwMjEwNTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHdWphcmF0aSBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HdWphcmF0aSBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNSAtIDxhIHRpdGxlPSJHdWphcmF0aSBHYXAgQW5hbHlzaXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2d1anItZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9paXAvZ2FwLWFuYWx5c2lzL2d1anItZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEd1amFyYXRpIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OZWhhIEd1cHRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZ2VybWFuIGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtbGF0bi1kZS1nYXAtMjAyMTA1MjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEdlcm1hbiBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HZXJtYW4gR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjUgLSA8YSB0aXRsZT0iR2VybWFuIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGF0bi1kZS1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2V1cmxyZXEvZ2FwLWFuYWx5c2lzL2xhdG4tZGUtZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEdlcm1hbiBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHVuZ2FyaWFuIGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtbGF0bi1odS1nYXAtMjAyMTA1MjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEh1bmdhcmlhbiBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IdW5nYXJpYW4gR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjUgLSA8YSB0aXRsZT0iSHVuZ2FyaWFuIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGF0bi1odS1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2V1cmxyZXEvZ2FwLWFuYWx5c2lzL2xhdG4taHUtZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEh1bmdhcmlhbiBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXZhbiBIZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlcHViIG11bHRpcGxlLXJlbmRpdGlvbiBwdWJsaWNhdGlvbnMgMS4xIiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS1lcHViLW11bHRpLXJlbmQtMTEtMjAyMTA1MjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEVQVUIgTXVsdGlwbGUtUmVuZGl0aW9uIFB1YmxpY2F0aW9ucyAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FUFVCICBNdWx0aXBsZS1SZW5kaXRpb24gIFB1YmxpY2F0aW9ucyZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RVBVQiAzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNSAtIDxhIHRpdGxlPSJFUFVCIE11bHRpcGxlLVJlbmRpdGlvbiBQdWJsaWNhdGlvbnMgMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lcHViLW11bHRpLXJlbmQtMTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2VwdWItc3BlY3MvZXB1YjMzL211bHRpLXJlbmQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEVQVUIgTXVsdGlwbGUtUmVuZGl0aW9uIFB1YmxpY2F0aW9ucyAxLjEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBHYXJyaXNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iamF2YW5lc2Ugc2NyaXB0IGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtamF2YS1nYXAtMjAyMTA1MjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEphdmFuZXNlIFNjcmlwdCBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5KYXZhbmVzZSBTY3JpcHQgR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjUgLSA8YSB0aXRsZT0iSmF2YW5lc2UgU2NyaXB0IEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvamF2YS1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3NlYWxyZXEvZ2FwLWFuYWx5c2lzL2phdmEtZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEphdmFuZXNlIFNjcmlwdCBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGFtaWwgZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC10YW1sLWdhcC0yMDIxMDUyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGFtaWwgR2FwIEFuYWx5c2lzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGFtaWwgR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjUgLSA8YSB0aXRsZT0iVGFtaWwgR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90YW1sLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vaWlwL2dhcC1hbmFseXNpcy90YW1sLWdhcCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUYW1pbCBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZnJlbmNoIGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtbGF0bi1mci1nYXAtMjAyMTA1MjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEZyZW5jaCBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5GcmVuY2ggR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjUgLSA8YSB0aXRsZT0iRnJlbmNoIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGF0bi1mci1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2V1cmxyZXEvZ2FwLWFuYWx5c2lzL2xhdG4tZnItZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEZyZW5jaCBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhhaSBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXRoYWktZ2FwLTIwMjEwNTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGFpIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoYWkgR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjUgLSA8YSB0aXRsZT0iVGhhaSBHYXAgQW5hbHlzaXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RoYWktZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZWFscmVxL2dhcC1hbmFseXNpcy90aGFpLWdhcCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUaGFpIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJqYXBhbmVzZSBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWpwYW4tZ2FwLTIwMjEwNTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBKYXBhbmVzZSBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5KYXBhbmVzZSBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNSAtIDxhIHRpdGxlPSJKYXBhbmVzZSBHYXAgQW5hbHlzaXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2pwYW4tZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9qbHJlcS9nYXAtYW5hbHlzaXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEphcGFuZXNlIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtb25nb2xpYW4gZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1tb25nLWdhcC0yMDIxMDUyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTW9uZ29saWFuIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1vbmdvbGlhbiBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNSAtIDxhIHRpdGxlPSJNb25nb2xpYW4gR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tb25nLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWxyZXEvZ2FwLWFuYWx5c2lzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBNb25nb2xpYW4gR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImJlbmdhbGkgZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1iZW5nLWdhcC0yMDIxMDUyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQmVuZ2FsaSBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5CZW5nYWxpIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTI1IC0gPGEgdGl0bGU9IkJlbmdhbGkgR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9iZW5nLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vaWlwL2dhcC1hbmFseXNpcy9iZW5nLWdhcCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBCZW5nYWxpIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnZW9yZ2lhbiBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWdlb3ItZ2FwLTIwMjEwNTI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHZW9yZ2lhbiBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HZW9yZ2lhbiBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yNCAtIDxhIHRpdGxlPSJHZW9yZ2lhbiBHYXAgQW5hbHlzaXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dlb3ItZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9ldXJscmVxL2dhcC1hbmFseXNpcy9nZW9yLWdhcC5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEdlb3JnaWFuIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJldGhpb3BpYyBsYXlvdXQgZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1lbHJlcS1nYXAtMjAyMTA1MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEV0aGlvcGljIExheW91dCBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FdGhpb3BpYyBMYXlvdXQgR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjQgLSA8YSB0aXRsZT0iRXRoaW9waWMgTGF5b3V0IEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZWxyZXEtZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9lbHJlcS9nYXAtYW5hbHlzaXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEV0aGlvcGljIExheW91dCBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3NhZ2UgZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1vc2dlLW9zYS1nYXAtMjAyMTA1MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9zYWdlIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9zYWdlIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTI0IC0gPGEgdGl0bGU9Ik9zYWdlIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3NnZS1vc2EtZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hbWxyZXEvZ2FwLWFuYWx5c2lzL29zZ2Utb3NhLWdhcCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBPc2FnZSBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2hlcm9rZWUgZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1jaGVyLWdhcC0yMDIxMDUyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ2hlcm9rZWUgR2FwIEFuYWx5c2lzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2hlcm9rZWUgR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjEgLSA8YSB0aXRsZT0iQ2hlcm9rZWUgR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jaGVyLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYW1scmVxL2dhcC1hbmFseXNpcy9jaHItZ2FwLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ2hlcm9rZWUgR2FwIEFuYWx5c2lzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBjb250ZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAod2NhZykgMi4yIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1XQ0FHMjItMjAyMTA1MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykgMi4yIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViICBDb250ZW50ICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzICAoV0NBRykmbmJzcDsyLjI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjEgLSA8YSB0aXRsZT0iV2ViIENvbnRlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChXQ0FHKSAyLjIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dDQUcyMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2NhZy9ndWlkZWxpbmVzLzIyLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQ29udGVudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgKFdDQUcpIDIuMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGFybGVzIEFkYW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxhc3RhaXIgQ2FtcGJlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SYWNoYWVsIEJyYWRsZXkgTW9udGdvbWVyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IEtpcmtwYXRyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFkbGFtIGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtYWRsbS1nYXAtMjAyMTA1MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFkbGFtIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFkbGFtIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTIxIC0gPGEgdGl0bGU9IkFkbGFtIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWRsbS1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FmcmxyZXEvZ2FwLWFuYWx5c2lzL2FkbG0tZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEFkbGFtIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhcmFiaWMgYW5kIHBlcnNpYW4gZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1hbHJlcS1nYXAtMjAyMTA1MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFyYWJpYyBhbmQgUGVyc2lhbiBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BcmFiaWMgYW5kIFBlcnNpYW4gR2FwIEFuYWx5c2lzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjEgLSA8YSB0aXRsZT0iQXJhYmljIGFuZCBQZXJzaWFuIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWxyZXEtZ2FwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hbHJlcS9nYXAtYW5hbHlzaXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEFyYWJpYyBhbmQgUGVyc2lhbiBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hlcnZpbiBBZnNoYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJu4oCZa28gZ2FwIGFuYWx5c2lzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1ua29vLWdhcC0yMDIxMDUyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTuKAmUtvIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk7igJlLbyBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNS0yMSAtIDxhIHRpdGxlPSJO4oCZS28gR2FwIEFuYWx5c2lzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ua29vLWdhcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYWZybHJlcS9nYXAtYW5hbHlzaXMvbmtvby1nYXAiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTuKAmUtvIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbnVrdGl0dXQgJmFtcDsgY3JlZSBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNhbnMtaXUtY3ItZ2FwLTIwMjEwNTIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbnVrdGl0dXQgJmFtcDsgQ3JlZSBHYXAgQW5hbHlzaXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbnVrdGl0dXQgJiBDcmVlIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTIxIC0gPGEgdGl0bGU9IkludWt0aXR1dCAmYW1wOyBDcmVlIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2Fucy1pdS1jci1nYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FtbHJlcS9nYXAtYW5hbHlzaXMvaXUtY3ItZ2FwIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEludWt0aXR1dCAmYW1wOyBDcmVlIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgYm94IHNpemluZyBtb2R1bGUgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWNzcy1zaXppbmctNC0yMDIxMDUyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEJveCBTaXppbmcgTW9kdWxlIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEJveCAgU2l6aW5nICBNb2R1bGUgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMjAgLSA8YSB0aXRsZT0iQ1NTIEJveCBTaXppbmcgTW9kdWxlIExldmVsIDQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1zaXppbmctNCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXNpemluZy00LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQm94IFNpemluZyBNb2R1bGUgTGV2ZWwgNCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplbiBTaW1tb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGVjaWZpY2F0aW9uIGZvciBzcG9rZW4gcHJlc2VudGF0aW9uIGluIGh0bWwiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXNwb2tlbi1odG1sLTIwMjEwNTE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTcGVjaWZpY2F0aW9uIGZvciBTcG9rZW4gUHJlc2VudGF0aW9uIGluIEhUTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TcGVjaWZpY2F0aW9uIGZvciBTcG9rZW4gUHJlc2VudGF0aW9uIGluIEhUTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUGxhdGZvcm0gQXJjaGl0ZWN0dXJlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMTggLSA8YSB0aXRsZT0iU3BlY2lmaWNhdGlvbiBmb3IgU3Bva2VuIFByZXNlbnRhdGlvbiBpbiBIVE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zcG9rZW4taHRtbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcHJvbnVuY2lhdGlvbi90ZWNobmljYWwtYXBwcm9hY2gvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNwZWNpZmljYXRpb24gZm9yIFNwb2tlbiBQcmVzZW50YXRpb24gaW4gSFRNTCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JcmZhbiBBbGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJra3UgSGFra2luZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIEdyZW5pZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SdW94aSBSYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGFuaW1hdGlvbnMiIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0Qtd2ViLWFuaW1hdGlvbnMtMS0yMDIxMDUxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIEFuaW1hdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgQW5pbWF0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMTggLSA8YSB0aXRsZT0iV2ViIEFuaW1hdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYi1hbmltYXRpb25zLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3dlYi1hbmltYXRpb25zLTEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBBbmltYXRpb25zIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyaWFuIEJpcnRsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JlcnQgRmxhY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGVwaGVuIE1jR3J1ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRvaW5lIFF1aW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIG9mIHRoaW5ncyAod290KTogdXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ3b3QiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtd290LXVzZWNhc2VzLTIwMjEwNTE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgb2YgVGhpbmdzIChXb1QpOiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBvZiBUaGluZ3MgKFdvVCk6IFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgb2YgVGhpbmdzIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMTggLSA8YSB0aXRsZT0iV2ViIG9mIFRoaW5ncyAoV29UKTogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvdC11c2VjYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd290LXVzZWNhc2VzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgb2YgVGhpbmdzIChXb1QpOiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIExhZ2FsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIE1jQ29vbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ5dWljaGkgTWF0c3VrdXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9tb2FraSBNaXp1c2hpbWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBhZ2UgdmlzaWJpbGl0eSBsZXZlbCAyIiBkYXRhLXRhZz0icGVyZm9ybWFuY2Ugd2ViYXBpIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvblNuYXBzaG90Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9DUi1wYWdlLXZpc2liaWxpdHktMi0yMDIxMDUxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGFnZSBWaXNpYmlsaXR5IExldmVsIDIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QYWdlICBWaXNpYmlsaXR5ICBMZXZlbCZuYnNwOzI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDUtMTggLSA8YSB0aXRsZT0iUGFnZSBWaXNpYmlsaXR5IExldmVsIDIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BhZ2UtdmlzaWJpbGl0eS0yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wYWdlLXZpc2liaWxpdHkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBhZ2UgVmlzaWJpbGl0eSBMZXZlbCAyIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJ0cmFuc3BvcnQiIGRhdGEtdGFnPSJodHRwIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXdlYnRyYW5zcG9ydC0yMDIxMDUwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViVHJhbnNwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViVHJhbnNwb3J0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWJUcmFuc3BvcnQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTA0IC0gPGEgdGl0bGU9IldlYlRyYW5zcG9ydCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VidHJhbnNwb3J0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJ0cmFuc3BvcnQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYlRyYW5zcG9ydCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJuYXJkIEFib2JhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmljdG9yIFZhc2lsaWV2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXV0YWthIEhpcmFubwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0dHAiPkhUVFAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRhdGEgY2F0YWxvZyB2b2NhYnVsYXJ5IChkY2F0KSAtIHZlcnNpb24gMyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC12b2NhYi1kY2F0LTMtMjAyMTA1MDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKSAtIFZlcnNpb24gMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRhdGEgIENhdGFsb2cgIFZvY2FidWxhcnkgIChEQ0FUKSAgLSAgVmVyc2lvbiZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRhdGFzZXQgRXhjaGFuZ2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA1LTA0IC0gPGEgdGl0bGU9IkRhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKSAtIFZlcnNpb24gMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9jYWItZGNhdC0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9keHdnL2RjYXQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIERhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKSAtIFZlcnNpb24gMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNjYXJkbyBBbGJlcnRvbmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCcm93bmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIENveAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZWphbmRyYSBHb256YWxleiBCZWx0cmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVhIFBlcmVnbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFdpbnN0YW5sZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWFraW5nIGNvbnRlbnQgdXNhYmxlIGZvciBwZW9wbGUgd2l0aCBjb2duaXRpdmUgYW5kIGxlYXJuaW5nIGRpc2FiaWxpdGllcyIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtY29nYS11c2FibGUtMjAyMTA0MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1ha2luZyBDb250ZW50IFVzYWJsZSBmb3IgUGVvcGxlIHdpdGggQ29nbml0aXZlIGFuZCBMZWFybmluZyBEaXNhYmlsaXRpZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NYWtpbmcgQ29udGVudCBVc2FibGUgZm9yIFBlb3BsZSB3aXRoIENvZ25pdGl2ZSBhbmQgTGVhcm5pbmcgRGlzYWJpbGl0aWVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUGxhdGZvcm0gQXJjaGl0ZWN0dXJlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDQtMjkgLSA8YSB0aXRsZT0iTWFraW5nIENvbnRlbnQgVXNhYmxlIGZvciBQZW9wbGUgd2l0aCBDb2duaXRpdmUgYW5kIExlYXJuaW5nIERpc2FiaWxpdGllcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY29nYS11c2FibGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NvZ2EvY29udGVudC11c2FibGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1ha2luZyBDb250ZW50IFVzYWJsZSBmb3IgUGVvcGxlIHdpdGggQ29nbml0aXZlIGFuZCBMZWFybmluZyBEaXNhYmlsaXRpZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGlzYSBTZWVtYW4tSG9yd2l0egogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhY2hhZWwgQnJhZGxleSBNb250Z29tZXJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgTGVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UnVveGkgUmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBhdXRoZW50aWNhdGlvbjogYW4gYXBpIGZvciBhY2Nlc3NpbmcgcHVibGljIGtleSBjcmVkZW50aWFscyAtIGxldmVsIDMiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELXdlYmF1dGhuLTMtMjAyMTA0MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBBdXRoZW50aWNhdGlvbjogQW4gQVBJIGZvciBhY2Nlc3NpbmcgUHVibGljIEtleSBDcmVkZW50aWFscyAtIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgIEF1dGhlbnRpY2F0aW9uOiAgQW4gIEFQSSAgZm9yICBhY2Nlc3NpbmcgIFB1YmxpYyAgS2V5ICBDcmVkZW50aWFscyAgLSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXV0aGVudGljYXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA0LTI3IC0gPGEgdGl0bGU9IldlYiBBdXRoZW50aWNhdGlvbjogQW4gQVBJIGZvciBhY2Nlc3NpbmcgUHVibGljIEtleSBDcmVkZW50aWFscyAtIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmF1dGhuLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmF1dGhuLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQXV0aGVudGljYXRpb246IEFuIEFQSSBmb3IgYWNjZXNzaW5nIFB1YmxpYyBLZXkgQ3JlZGVudGlhbHMgLSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplZmYgSG9kZ2VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Si5DLiBKb25lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgSm9uZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ba3NoYXkgS3VtYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbWlsIEx1bmRiZXJnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB0ZXh0IG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIGkxOG4iIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb25EcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvQ1JELWNzcy10ZXh0LTMtMjAyMTA0MjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBUZXh0IE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBUZXh0ICBNb2R1bGUgIExldmVsJm5ic3A7MzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDQtMjIgLSA8YSB0aXRsZT0iQ1NTIFRleHQgTW9kdWxlIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy10ZXh0LTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy10ZXh0LTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBUZXh0IE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktvamkgSXNoaWkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlc291cmNlIHRpbWluZyBsZXZlbCAyIiBkYXRhLXRhZz0icGVyZm9ybWFuY2Ugd2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtcmVzb3VyY2UtdGltaW5nLTItMjAyMTA0MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlc291cmNlIFRpbWluZyBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVzb3VyY2UgIFRpbWluZyAgTGV2ZWwmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA0LTE0IC0gPGEgdGl0bGU9IlJlc291cmNlIFRpbWluZyBMZXZlbCAyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZXNvdXJjZS10aW1pbmctMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcmVzb3VyY2UtdGltaW5nLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSZXNvdXJjZSBUaW1pbmcgTGV2ZWwgMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb2F2IFdlaXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9hbSBSb3NlbnRoYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbHlhIEdyaWdvcmlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9kZCBSZWlmc3RlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BcnZpbmQgSmFpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aaGloZW5nIFdhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRlcnNvbiBRdWFjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgYXV0aGVudGljYXRpb246IGFuIGFwaSBmb3IgYWNjZXNzaW5nIHB1YmxpYyBrZXkgY3JlZGVudGlhbHMgLSBsZXZlbCAyIiBkYXRhLXRhZz0ic2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1JFQy13ZWJhdXRobi0yLTIwMjEwNDA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQXV0aGVudGljYXRpb246IEFuIEFQSSBmb3IgYWNjZXNzaW5nIFB1YmxpYyBLZXkgQ3JlZGVudGlhbHMgLSBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViICBBdXRoZW50aWNhdGlvbjogIEFuICBBUEkgIGZvciAgYWNjZXNzaW5nICBQdWJsaWMgIEtleSAgQ3JlZGVudGlhbHMgIC0gIExldmVsJm5ic3A7MjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEF1dGhlbnRpY2F0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wNC0wOCAtIDxhIHRpdGxlPSJXZWIgQXV0aGVudGljYXRpb246IEFuIEFQSSBmb3IgYWNjZXNzaW5nIFB1YmxpYyBLZXkgQ3JlZGVudGlhbHMgLSBMZXZlbCAyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJhdXRobi0yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhdXRobi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIEF1dGhlbnRpY2F0aW9uOiBBbiBBUEkgZm9yIGFjY2Vzc2luZyBQdWJsaWMgS2V5IENyZWRlbnRpYWxzIC0gTGV2ZWwgMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZWZmIEhvZGdlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkouQy4gSm9uZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEpvbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWtzaGF5IEt1bWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RW1pbCBMdW5kYmVyZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1lZGlhc3RyZWFtIGltYWdlIGNhcHR1cmUiIGRhdGEtdGFnPSJtZWRpYSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtaW1hZ2UtY2FwdHVyZS0yMDIxMDQwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWFTdHJlYW0gSW1hZ2UgQ2FwdHVyZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1lZGlhU3RyZWFtIEltYWdlIENhcHR1cmU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA0LTA2IC0gPGEgdGl0bGU9Ik1lZGlhU3RyZWFtIEltYWdlIENhcHR1cmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2ltYWdlLWNhcHR1cmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21lZGlhY2FwdHVyZS1pbWFnZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWVkaWFTdHJlYW0gSW1hZ2UgQ2FwdHVyZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWd1ZWwgQ2FzYXMtc2FuY2hlegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpanVicmF0YSBCaGF1bWlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2lyaWRoYXIgTWFuZHlhbQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBlYXNpbmcgZnVuY3Rpb25zIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSRC1jc3MtZWFzaW5nLTEtMjAyMTA0MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBFYXNpbmcgRnVuY3Rpb25zIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEVhc2luZyAgRnVuY3Rpb25zICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTA0LTAxIC0gPGEgdGl0bGU9IkNTUyBFYXNpbmcgRnVuY3Rpb25zIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1lYXNpbmctMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWVhc2luZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEVhc2luZyBGdW5jdGlvbnMgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmlhbiBCaXJ0bGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVhbiBKYWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBSYWtvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIFN0ZXBoZW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4c2wgdHJhbnNmb3JtYXRpb25zICh4c2x0KSB2ZXJzaW9uIDIuMCAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9SRUMteHNsdDIwLTIwMjEwMzMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYU0wgVHJhbnNmb3JtYXRpb25zIChYU0xUKSBWZXJzaW9uIDIuMCAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFNMIFRyYW5zZm9ybWF0aW9ucyAoWFNMVCkgVmVyc2lvbiAyLjAgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDMtMzAgLSA8YSB0aXRsZT0iWFNMIFRyYW5zZm9ybWF0aW9ucyAoWFNMVCkgVmVyc2lvbiAyLjAgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsdDIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBLYXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImludGVybmF0aW9uYWxpemF0aW9uIGJlc3QgcHJhY3RpY2VzIGZvciBzcGVjIGRldmVsb3BlcnMiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELWludGVybmF0aW9uYWwtc3BlY3MtMjAyMTAzMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEludGVybmF0aW9uYWxpemF0aW9uIEJlc3QgUHJhY3RpY2VzIGZvciBTcGVjIERldmVsb3BlcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbnRlcm5hdGlvbmFsaXphdGlvbiBCZXN0IFByYWN0aWNlcyBmb3IgU3BlYyBEZXZlbG9wZXJzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDMtMjUgLSA8YSB0aXRsZT0iSW50ZXJuYXRpb25hbGl6YXRpb24gQmVzdCBQcmFjdGljZXMgZm9yIFNwZWMgRGV2ZWxvcGVycyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaW50ZXJuYXRpb25hbC1zcGVjcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYnAtaTE4bi1zcGVjZGV2LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbnRlcm5hdGlvbmFsaXphdGlvbiBCZXN0IFByYWN0aWNlcyBmb3IgU3BlYyBEZXZlbG9wZXJzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRkaXNvbiBQaGlsbGlwcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgYXBwIG1hbmlmZXN0IC0gYXBwbGljYXRpb24gaW5mb3JtYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtbWFuaWZlc3QtYXBwLWluZm8tMjAyMTAzMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBBcHAgTWFuaWZlc3QgLSBBcHBsaWNhdGlvbiBJbmZvcm1hdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBBcHAgTWFuaWZlc3QgLSBBcHBsaWNhdGlvbiBJbmZvcm1hdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDMtMjQgLSA8YSB0aXRsZT0iV2ViIEFwcCBNYW5pZmVzdCAtIEFwcGxpY2F0aW9uIEluZm9ybWF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tYW5pZmVzdC1hcHAtaW5mbyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWFuaWZlc3QtYXBwLWluZm8vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBBcHAgTWFuaWZlc3QgLSBBcHBsaWNhdGlvbiBJbmZvcm1hdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BYXJvbiBHdXN0YWZzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZWxmLXJldmlldyBxdWVzdGlvbm5haXJlOiBzZWN1cml0eSBhbmQgcHJpdmFjeSIgZGF0YS10YWc9InByaXZhY3kiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtc2VjdXJpdHktcHJpdmFjeS1xdWVzdGlvbm5haXJlLTIwMjEwMzIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZWxmLVJldmlldyBRdWVzdGlvbm5haXJlOiBTZWN1cml0eSBhbmQgUHJpdmFjeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNlbGYtUmV2aWV3IFF1ZXN0aW9ubmFpcmU6IFNlY3VyaXR5IGFuZCBQcml2YWN5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UZWNobmljYWwgQXJjaGl0ZWN0dXJlIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJpdmFjeSBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAzLTIzIC0gPGEgdGl0bGU9IlNlbGYtUmV2aWV3IFF1ZXN0aW9ubmFpcmU6IFNlY3VyaXR5IGFuZCBQcml2YWN5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zZWN1cml0eS1wcml2YWN5LXF1ZXN0aW9ubmFpcmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2N0YWcuZ2l0aHViLmlvL3NlY3VyaXR5LXF1ZXN0aW9ubmFpcmUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNlbGYtUmV2aWV3IFF1ZXN0aW9ubmFpcmU6IFNlY3VyaXR5IGFuZCBQcml2YWN5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRoZXJlc2EgTyYjMDM5O0Nvbm5vcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFNueWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InByaXZhY3kiPlByaXZhY3kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBjYXNjYWRpbmcgYW5kIGluaGVyaXRhbmNlIGxldmVsIDQiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1jc3MtY2FzY2FkZS00LTIwMjEwMzE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ2FzY2FkaW5nIGFuZCBJbmhlcml0YW5jZSBMZXZlbCA0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBDYXNjYWRpbmcgIGFuZCAgSW5oZXJpdGFuY2UgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDMtMTkgLSA8YSB0aXRsZT0iQ1NTIENhc2NhZGluZyBhbmQgSW5oZXJpdGFuY2UgTGV2ZWwgNCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWNhc2NhZGUtNCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNhc2NhZGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBDYXNjYWRpbmcgYW5kIEluaGVyaXRhbmNlIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYnJ0YyBwcmlvcml0eSBjb250cm9sIGFwaSIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb25TbmFwc2hvdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvQ1Itd2VicnRjLXByaW9yaXR5LTIwMjEwMzE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJSVEMgUHJpb3JpdHkgQ29udHJvbCBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJSVEMgUHJpb3JpdHkgQ29udHJvbCBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAzLTE4IC0gPGEgdGl0bGU9IldlYlJUQyBQcmlvcml0eSBDb250cm9sIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VicnRjLXByaW9yaXR5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJydGMtcHJpb3JpdHkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYlJUQyBQcmlvcml0eSBDb250cm9sIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IYXJhbGQgQWx2ZXN0cmFuZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvcGVuIHNjcmVlbiBwcm90b2NvbCIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1dELW9wZW5zY3JlZW5wcm90b2NvbC0yMDIxMDMxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT3BlbiBTY3JlZW4gUHJvdG9jb2wgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PcGVuIFNjcmVlbiBQcm90b2NvbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2Vjb25kIFNjcmVlbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDMtMTggLSA8YSB0aXRsZT0iT3BlbiBTY3JlZW4gUHJvdG9jb2wgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L29wZW5zY3JlZW5wcm90b2NvbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vb3BlbnNjcmVlbnByb3RvY29sLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBPcGVuIFNjcmVlbiBQcm90b2NvbCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEZvbHR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGJveCBzaXppbmcgbW9kdWxlIGxldmVsIDMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtY3NzLXNpemluZy0zLTIwMjEwMzE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQm94IFNpemluZyBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgQm94ICBTaXppbmcgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMy0xNyAtIDxhIHRpdGxlPSJDU1MgQm94IFNpemluZyBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXNpemluZy0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtc2l6aW5nLTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBCb3ggU2l6aW5nIE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyBmb3IgZGVjZW50cmFsaXplZCBpZGVudGlmaWVycyIgZGF0YS10YWc9InByaXZhY3kgc2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtZGlkLXVzZS1jYXNlcy0yMDIxMDMxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9yIERlY2VudHJhbGl6ZWQgSWRlbnRpZmllcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3IgRGVjZW50cmFsaXplZCBJZGVudGlmaWVyczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGVjZW50cmFsaXplZCBJZGVudGlmaWVyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMy0xNyAtIDxhIHRpdGxlPSJVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3IgRGVjZW50cmFsaXplZCBJZGVudGlmaWVycyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGlkLXVzZS1jYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZGlkLXVzZS1jYXNlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9yIERlY2VudHJhbGl6ZWQgSWRlbnRpZmllcnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9lIEFuZHJpZXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsIEFyY2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktpbSBEdWZmeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ5YW4gR3JhbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZHJpYW4gR3JvcHBlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InByaXZhY3kiPlByaXZhY3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2VicnRjIG5leHQgdmVyc2lvbiB1c2UgY2FzZXMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC13ZWJydGMtbnYtdXNlLWNhc2VzLTIwMjEwMzE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJSVEMgTmV4dCBWZXJzaW9uIFVzZSBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYlJUQyBOZXh0IFZlcnNpb24gVXNlIENhc2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMy0xNiAtIDxhIHRpdGxlPSJXZWJSVEMgTmV4dCBWZXJzaW9uIFVzZSBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VicnRjLW52LXVzZS1jYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2VicnRjLW52LXVzZS1jYXNlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViUlRDIE5leHQgVmVyc2lvbiBVc2UgQ2FzZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVybmFyZCBBYm9iYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGJhc2ljIHVzZXIgaW50ZXJmYWNlIG1vZHVsZSBsZXZlbCA0IiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtY3NzLXVpLTQtMjAyMTAzMTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBCYXNpYyBVc2VyIEludGVyZmFjZSBNb2R1bGUgTGV2ZWwgNCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgQmFzaWMgIFVzZXIgIEludGVyZmFjZSAgTW9kdWxlICBMZXZlbCZuYnNwOzQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAzLTE2IC0gPGEgdGl0bGU9IkNTUyBCYXNpYyBVc2VyIEludGVyZmFjZSBNb2R1bGUgTGV2ZWwgNCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXVpLTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy11aS00LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQmFzaWMgVXNlciBJbnRlcmZhY2UgTW9kdWxlIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmxvcmlhbiBSaXZvYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBvc3Qtc3BlY3RyZSB3ZWIgZGV2ZWxvcG1lbnQiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC1wb3N0LXNwZWN0cmUtd2ViZGV2LTIwMjEwMzE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQb3N0LVNwZWN0cmUgV2ViIERldmVsb3BtZW50IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UG9zdC1TcGVjdHJlIFdlYiBEZXZlbG9wbWVudDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMy0xNiAtIDxhIHRpdGxlPSJQb3N0LVNwZWN0cmUgV2ViIERldmVsb3BtZW50IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wb3N0LXNwZWN0cmUtd2ViZGV2Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtcG9zdC1zcGVjdHJlLXdlYmRldi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUG9zdC1TcGVjdHJlIFdlYiBEZXZlbG9wbWVudCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWtlIFdlc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHNjcm9sbCBzbmFwIG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvblNuYXBzaG90Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9DUi1jc3Mtc2Nyb2xsLXNuYXAtMS0yMDIxMDMxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFNjcm9sbCBTbmFwIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBTY3JvbGwgIFNuYXAgIE1vZHVsZSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMy0xMSAtIDxhIHRpdGxlPSJDU1MgU2Nyb2xsIFNuYXAgTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1zY3JvbGwtc25hcC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtc2Nyb2xsLXNuYXAtMS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFNjcm9sbCBTbmFwIE1vZHVsZSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgUmFrb3cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYWNvYiBSb3NzaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBydWJ5IGFubm90YXRpb24gbGF5b3V0IG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIGkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtY3NzLXJ1YnktMS0yMDIxMDMxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFJ1YnkgQW5ub3RhdGlvbiBMYXlvdXQgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFJ1YnkgIEFubm90YXRpb24gIExheW91dCAgTW9kdWxlICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAzLTEwIC0gPGEgdGl0bGU9IkNTUyBSdWJ5IEFubm90YXRpb24gTGF5b3V0IE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtcnVieS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtcnVieS0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgUnVieSBBbm5vdGF0aW9uIExheW91dCBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Lb2ppIElzaGlpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WGlkb3JuIFF1YW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aW1lZCB0ZXh0IG1hcmt1cCBsYW5ndWFnZSAyICh0dG1sMikgKDJuZCBlZGl0aW9uKSIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkgY3NzIGh0bWwiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uU25hcHNob3QiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSLXR0bWwyLTIwMjEwMzA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaW1lZCBUZXh0IE1hcmt1cCBMYW5ndWFnZSAyIChUVE1MMikgKDJuZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRpbWVkIFRleHQgTWFya3VwIExhbmd1YWdlIDIgKFRUTUwyKSAoMm5kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UaW1lZCBUZXh0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMy0wOSAtIDxhIHRpdGxlPSJUaW1lZCBUZXh0IE1hcmt1cCBMYW5ndWFnZSAyIChUVE1MMikgKDJuZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdHRtbDIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3R0bWwyL2luZGV4Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVGltZWQgVGV4dCBNYXJrdXAgTGFuZ3VhZ2UgMiAoVFRNTDIpICgybmQgRWRpdGlvbikiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2xlbm4gQWRhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DeXJpbCBDb25jb2xhdG8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYWNjZXNzaWJsZSByaWNoIGludGVybmV0IGFwcGxpY2F0aW9ucyAod2FpLWFyaWEpIDEuMiIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uU25hcHNob3QiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL0NSLXdhaS1hcmlhLTEuMi0yMDIxMDMwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyAoV0FJLUFSSUEpIDEuMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFjY2Vzc2libGUgIFJpY2ggIEludGVybmV0ICBBcHBsaWNhdGlvbnMgIChXQUktQVJJQSkmbmJzcDsxLjI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAzLTAyIC0gPGEgdGl0bGU9IkFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgKFdBSS1BUklBKSAxLjIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dhaS1hcmlhLTEuMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYXJpYS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyAoV0FJLUFSSUEpIDEuMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2FubWFyaWUgRGlnZ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW1lcyBOdXJ0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIG11bHRpLWNvbHVtbiBsYXlvdXQgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvV0QtY3NzLW11bHRpY29sLTEtMjAyMTAyMTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBNdWx0aS1jb2x1bW4gTGF5b3V0IE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBNdWx0aS1jb2x1bW4gIExheW91dCAgTW9kdWxlICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAyLTEyIC0gPGEgdGl0bGU9IkNTUyBNdWx0aS1jb2x1bW4gTGF5b3V0IE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtbXVsdGljb2wtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLW11bHRpY29sLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgTXVsdGktY29sdW1uIExheW91dCBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Iw6Vrb24gV2l1bSBMaWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhY2hlbCBBbmRyZXcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBjYXNjYWRpbmcgYW5kIGluaGVyaXRhbmNlIGxldmVsIDMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1JFQy1jc3MtY2FzY2FkZS0zLTIwMjEwMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ2FzY2FkaW5nIGFuZCBJbmhlcml0YW5jZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBDYXNjYWRpbmcgIGFuZCAgSW5oZXJpdGFuY2UgIExldmVsJm5ic3A7MzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDItMTEgLSA8YSB0aXRsZT0iQ1NTIENhc2NhZGluZyBhbmQgSW5oZXJpdGFuY2UgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWNhc2NhZGUtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNhc2NhZGUtMy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIENhc2NhZGluZyBhbmQgSW5oZXJpdGFuY2UgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiB3b3JrZXJzIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL05PVEUtd29ya2Vycy0yMDIxMDEyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFdvcmtlcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgV29ya2VyczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDEtMjggLSA8YSB0aXRsZT0iV2ViIFdvcmtlcnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvcmtlcnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd29ya2Vycy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBXb3JrZXJzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBIaWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwgNS4xIDJuZCBlZGl0aW9uIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9TUFNELWh0bWw1MS0yMDIxMDEyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSFRNTCA1LjEgMm5kIEVkaXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MIDUuMSAybmQgRWRpdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDEtMjggLSA8YSB0aXRsZT0iSFRNTCA1LjEgMm5kIEVkaXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWw1MSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3Jhd2dpdC5jb20vdzNjL2h0bWwvaHRtbDUuMS0yL3NpbmdsZS1wYWdlLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSFRNTCA1LjEgMm5kIEVkaXRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgRmF1bGtuZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BcnJvbiBFaWNob2x6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VHJhdmlzIExlaXRoZWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleCBEYW5pbG8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwgbWljcm9kYXRhIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9OT1RFLW1pY3JvZGF0YS0yMDIxMDEyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSFRNTCBNaWNyb2RhdGEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MIE1pY3JvZGF0YTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDEtMjggLSA8YSB0aXRsZT0iSFRNTCBNaWNyb2RhdGEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21pY3JvZGF0YSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWljcm9kYXRhLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBIVE1MIE1pY3JvZGF0YSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGFybGVzICYjMDM5O2NoYWFscyYjMDM5OyAoTWNDYXRoaWUpIE5ldmlsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbiBCcmlja2xleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBIaWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIGNhbnZhcyAyZCBjb250ZXh0IiBkYXRhLXRhZz0iZ3JhcGhpY3MgaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9TUFNELTJkY29udGV4dC0yMDIxMDEyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSFRNTCBDYW52YXMgMkQgQ29udGV4dCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgQ2FudmFzIDJEIENvbnRleHQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAxLTI4IC0gPGEgdGl0bGU9IkhUTUwgQ2FudmFzIDJEIENvbnRleHQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5LzJkY29udGV4dCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpayBDYWJhbmllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYXkgTXVucm8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub20gV2lsdHppdXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSGlja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHRtbCA1LjIiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1NQU0QtaHRtbDUyLTIwMjEwMTI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MIDUuMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwmbmJzcDs1LjI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIxLTAxLTI4IC0gPGEgdGl0bGU9IkhUTUwgNS4yIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sNTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2h0bWwvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEhUTUwgNS4yIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlIEZhdWxrbmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXJyb24gRWljaG9segogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRyYXZpcyBMZWl0aGVhZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXggRGFuaWxvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2FuZ3doYW4gTW9vbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIDUuMyIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS1odG1sNTMtMjAyMTAxMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgNS4zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTCZuYnNwOzUuMzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDEtMjggLSA8YSB0aXRsZT0iSFRNTCA1LjMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWw1MyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vaHRtbC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSFRNTCA1LjMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF0cmljaWEgQWFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2h3ZXRhbmsgRGl4aXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UZXJlbmNlIEVkZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcnVjZSBMYXdzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW5nd2hhbiBNb29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WGlhb3FpYW4gV3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBPJiMwMzk7SGFyYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlIHdlYnNvY2tldCBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS13ZWJzb2NrZXRzLTIwMjEwMTI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgV2ViU29ja2V0IEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBXZWJTb2NrZXQgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMS0yOCAtIDxhIHRpdGxlPSJUaGUgV2ViU29ja2V0IEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2Vic29ja2V0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBIaWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHRtbCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvUkVDLWh0bWwtMjAyMTAxMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMS0yOCAtIDxhIHRpdGxlPSJIVE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEhUTUwiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sNSB3ZWIgbWVzc2FnaW5nIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1NQU0Qtd2VibWVzc2FnaW5nLTIwMjEwMTI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MNSBXZWIgTWVzc2FnaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTDUgV2ViIE1lc3NhZ2luZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDEtMjggLSA8YSB0aXRsZT0iSFRNTDUgV2ViIE1lc3NhZ2luZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VibWVzc2FnaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYi1tZXNzYWdpbmcuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBIVE1MNSBXZWIgTWVzc2FnaW5nIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBIaWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzdG9yYWdlIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJodG1sIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9TUFNELXdlYnN0b3JhZ2UtMjAyMTAxMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTdG9yYWdlIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU3RvcmFnZSAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMS0yOCAtIDxhIHRpdGxlPSJXZWIgU3RvcmFnZSAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJzdG9yYWdlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJzdG9yYWdlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgU3RvcmFnZSAoU2Vjb25kIEVkaXRpb24pIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBIaWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VydmVyLXNlbnQgZXZlbnRzIiBkYXRhLXRhZz0iZG9tIGh0dHAgd2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1NQU0QtZXZlbnRzb3VyY2UtMjAyMTAxMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNlcnZlci1TZW50IEV2ZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNlcnZlci1TZW50IEV2ZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDEtMjggLSA8YSB0aXRsZT0iU2VydmVyLVNlbnQgRXZlbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ldmVudHNvdXJjZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZXJ2ZXItc2VudC1ldmVudHMuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTZXJ2ZXItU2VudCBFdmVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEhpY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodHRwIj5IVFRQCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYnJ0YyAxLjA6IHJlYWwtdGltZSBjb21tdW5pY2F0aW9uIGJldHdlZW4gYnJvd3NlcnMiIGRhdGEtdGFnPSJtZWRpYSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIxL1JFQy13ZWJydGMtMjAyMTAxMjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYlJUQyAxLjA6IFJlYWwtVGltZSBDb21tdW5pY2F0aW9uIEJldHdlZW4gQnJvd3NlcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJSVEMgMS4wOiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbiBCZXR3ZWVuIEJyb3dzZXJzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMS0yNiAtIDxhIHRpdGxlPSJXZWJSVEMgMS4wOiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbiBCZXR3ZWVuIEJyb3dzZXJzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJydGMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1wYy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViUlRDIDEuMDogUmVhbC1UaW1lIENvbW11bmljYXRpb24gQmV0d2VlbiBCcm93c2VycyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DdWxsZW4gSmVubmluZ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yaWsgQm9zdHLDtm0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW4tSXZhciBCcnVhcm9leQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIHdjYWcgMy4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMS9XRC13Y2FnLTMuMC1yZXF1aXJlbWVudHMtMjAyMTAxMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgV0NBRyAzLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgIGZvciAgV0NBRyZuYnNwOzMuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMS0wMS0yMSAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIFdDQUcgMy4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93Y2FnLTMuMC1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3NpbHZlci9yZXF1aXJlbWVudHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgV0NBRyAzLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbm5lIEYgU3BlbGxtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGF3biBMYXVyaWF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZXB1YiAzIG92ZXJ2aWV3IiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjEvTk9URS1lcHViLW92ZXJ2aWV3LTMzLTIwMjEwMTEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFUFVCIDMgT3ZlcnZpZXcgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FUFVCIDMgT3ZlcnZpZXc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVQVUIgMyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjEtMDEtMTIgLSA8YSB0aXRsZT0iRVBVQiAzIE92ZXJ2aWV3IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lcHViLW92ZXJ2aWV3LTMzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9lcHViLXNwZWNzL2VwdWIzMy9vdmVydmlldy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRVBVQiAzIE92ZXJ2aWV3Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdhcnRoIENvbmJveQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgR2FycmlzaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBXZWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBwc2V1ZG8tZWxlbWVudHMgbW9kdWxlIGxldmVsIDQiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtY3NzLXBzZXVkby00LTIwMjAxMjMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgUHNldWRvLUVsZW1lbnRzIE1vZHVsZSBMZXZlbCA0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBQc2V1ZG8tRWxlbWVudHMgIE1vZHVsZSAgTGV2ZWwmbmJzcDs0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMi0zMSAtIDxhIHRpdGxlPSJDU1MgUHNldWRvLUVsZW1lbnRzIE1vZHVsZSBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtcHNldWRvLTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1wc2V1ZG8tNC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFBzZXVkby1FbGVtZW50cyBNb2R1bGUgTGV2ZWwgNCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgR2xhem1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsYW4gU3RlYXJucwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGJveCBtb2RlbCBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvblNuYXBzaG90Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9DUi1jc3MtYm94LTMtMjAyMDEyMjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBCb3ggTW9kZWwgTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEJveCAgTW9kZWwgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMi0yMiAtIDxhIHRpdGxlPSJDU1MgQm94IE1vZGVsIE1vZHVsZSBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtYm94LTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1ib3gtMy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEJveCBNb2RlbCBNb2R1bGUgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBzbmFwc2hvdCAyMDIwIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLWNzcy0yMDIwLTIwMjAxMjIyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgU25hcHNob3QgMjAyMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBTbmFwc2hvdCAyMDIwPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMi0yMiAtIDxhIHRpdGxlPSJDU1MgU25hcHNob3QgMjAyMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLTIwMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy0yMDIwLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgU25hcHNob3QgMjAyMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZsb3JpYW4gUml2b2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGNvbnRhaW5tZW50IG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1JFQy1jc3MtY29udGFpbi0xLTIwMjAxMjIyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ29udGFpbm1lbnQgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIENvbnRhaW5tZW50ICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTItMjIgLSA8YSB0aXRsZT0iQ1NTIENvbnRhaW5tZW50IE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY29udGFpbi0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY29udGFpbi0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQ29udGFpbm1lbnQgTW9kdWxlIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgZ3JpZCBsYXlvdXQgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb25EcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvQ1JELWNzcy1ncmlkLTEtMjAyMDEyMTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBHcmlkIExheW91dCBNb2R1bGUgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgR3JpZCAgTGF5b3V0ICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTItMTggLSA8YSB0aXRsZT0iQ1NTIEdyaWQgTGF5b3V0IE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtZ3JpZC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZ3JpZC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEdyaWQgTGF5b3V0IE1vZHVsZSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9zc2VuIEF0YW5hc3NvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9yaW9sIEJydWZhdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBncmlkIGxheW91dCBtb2R1bGUgbGV2ZWwgMiIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb25EcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvQ1JELWNzcy1ncmlkLTItMjAyMDEyMTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBHcmlkIExheW91dCBNb2R1bGUgTGV2ZWwgMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgR3JpZCAgTGF5b3V0ICBNb2R1bGUgIExldmVsJm5ic3A7MjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTItMTggLSA8YSB0aXRsZT0iQ1NTIEdyaWQgTGF5b3V0IE1vZHVsZSBMZXZlbCAyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtZ3JpZC0yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZ3JpZC0yLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgR3JpZCBMYXlvdXQgTW9kdWxlIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3NzZW4gQXRhbmFzc292CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBkaXNwbGF5IG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbkRyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9DUkQtY3NzLWRpc3BsYXktMy0yMDIwMTIxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIERpc3BsYXkgTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIERpc3BsYXkgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMi0xOCAtIDxhIHRpdGxlPSJDU1MgRGlzcGxheSBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWRpc3BsYXktMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWRpc3BsYXkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBEaXNwbGF5IE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGltYWdlcyBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb25EcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvQ1JELWNzcy1pbWFnZXMtMy0yMDIwMTIxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEltYWdlcyBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgSW1hZ2VzICBNb2R1bGUgIExldmVsJm5ic3A7MzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTItMTcgLSA8YSB0aXRsZT0iQ1NTIEltYWdlcyBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWltYWdlcy0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtaW1hZ2VzLTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBJbWFnZXMgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MZWEgVmVyb3UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgY29udGFpbm1lbnQgbW9kdWxlIGxldmVsIDIiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1jc3MtY29udGFpbi0yLTIwMjAxMjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQ29udGFpbm1lbnQgTW9kdWxlIExldmVsIDIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIENvbnRhaW5tZW50ICBNb2R1bGUgIExldmVsJm5ic3A7MjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTItMTYgLSA8YSB0aXRsZT0iQ1NTIENvbnRhaW5tZW50IE1vZHVsZSBMZXZlbCAyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY29udGFpbi0yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY29udGFpbi0yLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQ29udGFpbm1lbnQgTW9kdWxlIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZsYWRpbWlyIExldmluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgY3VzdG9tIGhpZ2hsaWdodCBhcGkgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtY3NzLWhpZ2hsaWdodC1hcGktMS0yMDIwMTIwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEN1c3RvbSBIaWdobGlnaHQgQVBJIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBDdXN0b20gIEhpZ2hsaWdodCAgQVBJICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTItMDggLSA8YSB0aXRsZT0iQ1NTIEN1c3RvbSBIaWdobGlnaHQgQVBJIE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtaGlnaGxpZ2h0LWFwaS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtaGlnaGxpZ2h0LWFwaS0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQ3VzdG9tIEhpZ2hsaWdodCBBUEkgTW9kdWxlIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmxvcmlhbiBSaXZvYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBtZXJjaGFudHZhbGlkYXRpb25ldmVudCBpbnRlcmZhY2UiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtbWVyY2hhbnQtdmFsaWRhdGlvbi0yMDIwMTIwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIE1lcmNoYW50VmFsaWRhdGlvbkV2ZW50IGludGVyZmFjZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBNZXJjaGFudFZhbGlkYXRpb25FdmVudCBpbnRlcmZhY2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQYXltZW50cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTItMDggLSA8YSB0aXRsZT0iVGhlIE1lcmNoYW50VmFsaWRhdGlvbkV2ZW50IGludGVyZmFjZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWVyY2hhbnQtdmFsaWRhdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWVyY2hhbnQtdmFsaWRhdGlvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVGhlIE1lcmNoYW50VmFsaWRhdGlvbkV2ZW50IGludGVyZmFjZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBjb25kaXRpb25hbCBydWxlcyBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvblNuYXBzaG90Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9DUi1jc3MtY29uZGl0aW9uYWwtMy0yMDIwMTIwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIENvbmRpdGlvbmFsIFJ1bGVzIE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBDb25kaXRpb25hbCAgUnVsZXMgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMi0wOCAtIDxhIHRpdGxlPSJDU1MgQ29uZGl0aW9uYWwgUnVsZXMgTW9kdWxlIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1jb25kaXRpb25hbC0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY29uZGl0aW9uYWwtMy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIENvbmRpdGlvbmFsIFJ1bGVzIE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIEJhcm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGlsbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYnhyIGxheWVycyBhcGkgbGV2ZWwgMSIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELXdlYnhybGF5ZXJzLTEtMjAyMDEyMDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYlhSIExheWVycyBBUEkgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYlhSICBMYXllcnMgIEFQSSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbW1lcnNpdmUgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMi0wMyAtIDxhIHRpdGxlPSJXZWJYUiBMYXllcnMgQVBJIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYnhybGF5ZXJzLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9pbW1lcnNpdmUtd2ViLmdpdGh1Yi5pby9sYXllcnMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYlhSIExheWVycyBBUEkgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWsgQ2FiYW5pZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgb2YgdGhpbmdzICh3b3QpIHByb2ZpbGUiIGRhdGEtdGFnPSJ3b3QiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0Qtd290LXByb2ZpbGUtMjAyMDExMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBvZiBUaGluZ3MgKFdvVCkgUHJvZmlsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBvZiBUaGluZ3MgKFdvVCkgUHJvZmlsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIG9mIFRoaW5ncyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTEtMjQgLSA8YSB0aXRsZT0iV2ViIG9mIFRoaW5ncyAoV29UKSBQcm9maWxlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93b3QtcHJvZmlsZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd290LXByb2ZpbGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBvZiBUaGluZ3MgKFdvVCkgUHJvZmlsZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIExhZ2FsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIE1jQ29vbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ5dWljaGkgTWF0c3VrdXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2ViYXN0aWFuIEvDpGJpc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9tb2FraSBNaXp1c2hpbWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBvZiB0aGluZ3MgKHdvdCkgYXJjaGl0ZWN0dXJlIDEuMSIgZGF0YS10YWc9IndvdCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELXdvdC1hcmNoaXRlY3R1cmUxMS0yMDIwMTEyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBBcmNoaXRlY3R1cmUgMS4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViICBvZiAgVGhpbmdzICAoV29UKSAgQXJjaGl0ZWN0dXJlJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgb2YgVGhpbmdzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMS0yNCAtIDxhIHRpdGxlPSJXZWIgb2YgVGhpbmdzIChXb1QpIEFyY2hpdGVjdHVyZSAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvdC1hcmNoaXRlY3R1cmUxMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd290LWFyY2hpdGVjdHVyZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBBcmNoaXRlY3R1cmUgMS4xIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgTGFnYWxseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ5dWljaGkgTWF0c3VrdXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9ydSBLYXdhZ3VjaGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LdW5paGlrbyBUb3VtdXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F6dW8gS2FqaW1vdG8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIG9mIHRoaW5ncyAod290KSBzY3JpcHRpbmcgYXBpIiBkYXRhLXRhZz0id290IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLXdvdC1zY3JpcHRpbmctYXBpLTIwMjAxMTI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgb2YgVGhpbmdzIChXb1QpIFNjcmlwdGluZyBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgb2YgVGhpbmdzIChXb1QpIFNjcmlwdGluZyBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBvZiBUaGluZ3MgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTI0IC0gPGEgdGl0bGU9IldlYiBvZiBUaGluZ3MgKFdvVCkgU2NyaXB0aW5nIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd290LXNjcmlwdGluZy1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dvdC1zY3JpcHRpbmctYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgb2YgVGhpbmdzIChXb1QpIFNjcmlwdGluZyBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Wm9sdGFuIEtpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBQZWludG5lcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNyaXN0aWFubyBBZ3V6emkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbm5lcyBIdW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F6dWFraSBOaW11cmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InR0bWwgbWVkaWEgdHlwZSBkZWZpbml0aW9uIGFuZCBwcm9maWxlIHJlZ2lzdHJ5IiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSBjc3MgaHRtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS10dG1sLXByb2ZpbGUtcmVnaXN0cnktMjAyMDExMTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRUTUwgTWVkaWEgVHlwZSBEZWZpbml0aW9uIGFuZCBQcm9maWxlIFJlZ2lzdHJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VFRNTCBNZWRpYSBUeXBlIERlZmluaXRpb24gYW5kIFByb2ZpbGUgUmVnaXN0cnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRpbWVkIFRleHQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTE5IC0gPGEgdGl0bGU9IlRUTUwgTWVkaWEgVHlwZSBEZWZpbml0aW9uIGFuZCBQcm9maWxlIFJlZ2lzdHJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90dG1sLXByb2ZpbGUtcmVnaXN0cnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3R0LXByb2ZpbGUtcmVnaXN0cnkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRUTUwgTWVkaWEgVHlwZSBEZWZpbml0aW9uIGFuZCBQcm9maWxlIFJlZ2lzdHJ5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgRG9sYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OaWdlbCBNZWdpdHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HbGVubiBBZGFtcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGxpc3RzIGFuZCBjb3VudGVycyBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyBpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELWNzcy1saXN0cy0zLTIwMjAxMTE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgTGlzdHMgYW5kIENvdW50ZXJzIE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBMaXN0cyAgYW5kICBDb3VudGVycyAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTE3IC0gPGEgdGl0bGU9IkNTUyBMaXN0cyBhbmQgQ291bnRlcnMgTW9kdWxlIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1saXN0cy0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtbGlzdHMtMy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIExpc3RzIGFuZCBDb3VudGVycyBNb2R1bGUgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHNjcm9sbCBhbmNob3JpbmcgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtY3NzLXNjcm9sbC1hbmNob3JpbmctMS0yMDIwMTExMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFNjcm9sbCBBbmNob3JpbmcgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFNjcm9sbCAgQW5jaG9yaW5nICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTEtMTEgLSA8YSB0aXRsZT0iQ1NTIFNjcm9sbCBBbmNob3JpbmcgTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1zY3JvbGwtYW5jaG9yaW5nLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1zY3JvbGwtYW5jaG9yaW5nLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgU2Nyb2xsIEFuY2hvcmluZyBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHBsYXRmb3JtIGRlc2lnbiBwcmluY2lwbGVzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLWRlc2lnbi1wcmluY2lwbGVzLTIwMjAxMTEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgUGxhdGZvcm0gRGVzaWduIFByaW5jaXBsZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgUGxhdGZvcm0gRGVzaWduIFByaW5jaXBsZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRlY2huaWNhbCBBcmNoaXRlY3R1cmUgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMS0xMCAtIDxhIHRpdGxlPSJXZWIgUGxhdGZvcm0gRGVzaWduIFByaW5jaXBsZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Rlc2lnbi1wcmluY2lwbGVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjdGFnLmdpdGh1Yi5pby9kZXNpZ24tcHJpbmNpcGxlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIFBsYXRmb3JtIERlc2lnbiBQcmluY2lwbGVzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbmd3aGFuIE1vb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhdWRpb2Jvb2tzIiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvUkVDLWF1ZGlvYm9va3MtMjAyMDExMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEF1ZGlvYm9va3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BdWRpb2Jvb2tzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BdWRpb2Jvb2tzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMS0xMCAtIDxhIHRpdGxlPSJBdWRpb2Jvb2tzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hdWRpb2Jvb2tzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hdWRpb2Jvb2tzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBdWRpb2Jvb2tzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldlbmR5IFJlaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0IEdhcnJpc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwdWJsaWNhdGlvbiBtYW5pZmVzdCIgZGF0YS10YWc9ImRwdWIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1JFQy1wdWItbWFuaWZlc3QtMjAyMDExMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFB1YmxpY2F0aW9uIE1hbmlmZXN0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHVibGljYXRpb24gTWFuaWZlc3Q8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1ZGlvYm9va3MgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTEwIC0gPGEgdGl0bGU9IlB1YmxpY2F0aW9uIE1hbmlmZXN0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wdWItbWFuaWZlc3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3B1Yi1tYW5pZmVzdC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUHVibGljYXRpb24gTWFuaWZlc3QiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBHYXJyaXNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXZhbiBIZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcmVzZW50YXRpb24gYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbkRyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9DUkQtcHJlc2VudGF0aW9uLWFwaS0yMDIwMTEwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJlc2VudGF0aW9uIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlByZXNlbnRhdGlvbiBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlY29uZCBTY3JlZW4gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTA1IC0gPGEgdGl0bGU9IlByZXNlbnRhdGlvbiBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ByZXNlbnRhdGlvbi1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3ByZXNlbnRhdGlvbi1hcGkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFByZXNlbnRhdGlvbiBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBGb2x0egogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbWluaWsgUsO2dHRzY2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaG93IGVtdmNvLCBmaWRvLCBhbmQgdzNjIHRlY2hub2xvZ2llcyByZWxhdGUiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtaHRyLTIwMjAxMTA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIb3cgRU1WQ28sIEZJRE8sIGFuZCBXM0MgVGVjaG5vbG9naWVzIFJlbGF0ZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhvdyBFTVZDbywgRklETywgYW5kIFczQyBUZWNobm9sb2dpZXMgUmVsYXRlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGF5bWVudCBTZWN1cml0eSBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTA1IC0gPGEgdGl0bGU9IkhvdyBFTVZDbywgRklETywgYW5kIFczQyBUZWNobm9sb2dpZXMgUmVsYXRlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odHIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSmFjb2JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ianNvbi1sZCAxLjAiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1NQU0QtanNvbi1sZC0yMDIwMTEwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSlNPTi1MRCAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5KU09OLUxEJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTAzIC0gPGEgdGl0bGU9IkpTT04tTEQgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9qc29uLWxkIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFudSBTcG9ybnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBLZWxsb2dnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya3VzIExhbnRoYWxlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZG9jdW1lbnQgb2JqZWN0IG1vZGVsIChkb20pIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRvbSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLURPTS1SZXF1aXJlbWVudHMtMjAyMDExMDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Eb2N1bWVudCBPYmplY3QgTW9kZWwgKERPTSkgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMS0wMyAtIDxhIHRpdGxlPSJEb2N1bWVudCBPYmplY3QgTW9kZWwgKERPTSkgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ET00tUmVxdWlyZW1lbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVuIENoYW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbGlwcGUgTGUgSMOpZ2FyZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bcm5hdWQgTGUgSG9ycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJheSBXaGl0bWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBDaGFtcGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBLZXNzZWxtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmR5IEhlbmluZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5nZWwgRGlhegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIERhdmlkc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGF1cmVuIFdvb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYXJlZCBTb3JlbnNlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRvbSI+RE9NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Impzb24tbGQgMS4wIHByb2Nlc3NpbmcgYWxnb3JpdGhtcyBhbmQgYXBpIiBkYXRhLXRhZz0iZGF0YSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvU1BTRC1qc29uLWxkLWFwaS0yMDIwMTEwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSlNPTi1MRCAxLjAgUHJvY2Vzc2luZyBBbGdvcml0aG1zIGFuZCBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5KU09OLUxEIDEuMCBQcm9jZXNzaW5nIEFsZ29yaXRobXMgYW5kIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMS0wMyAtIDxhIHRpdGxlPSJKU09OLUxEIDEuMCBQcm9jZXNzaW5nIEFsZ29yaXRobXMgYW5kIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvanNvbi1sZC1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrdXMgTGFudGhhbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZ2cgS2VsbG9nZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbnUgU3Bvcm55CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZG9jdW1lbnQgb2JqZWN0IG1vZGVsIChkb20pIGxldmVsIDMgeHBhdGggc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9ImRvbSB4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS1ET00tTGV2ZWwtMy1YUGF0aC0yMDIwMTEwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRG9jdW1lbnQgT2JqZWN0IE1vZGVsIChET00pIExldmVsIDMgWFBhdGggU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIFhQYXRoIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTAzIC0gPGEgdGl0bGU9IkRvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIFhQYXRoIFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0RPTS1MZXZlbC0zLVhQYXRoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmF5IFdoaXRtZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkb2N1bWVudCBvYmplY3QgbW9kZWwgKGRvbSkgbGV2ZWwgMyB2aWV3cyBhbmQgZm9ybWF0dGluZyBzcGVjaWZpY2F0aW9uIiBkYXRhLXRhZz0iZG9tIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtRE9NLUxldmVsLTMtVmlld3MtMjAyMDExMDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIFZpZXdzIGFuZCBGb3JtYXR0aW5nIFNwZWNpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Eb2N1bWVudCBPYmplY3QgTW9kZWwgKERPTSkgTGV2ZWwgMyBWaWV3cyBhbmQgRm9ybWF0dGluZyBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMS0wMyAtIDxhIHRpdGxlPSJEb2N1bWVudCBPYmplY3QgTW9kZWwgKERPTSkgTGV2ZWwgMyBWaWV3cyBhbmQgRm9ybWF0dGluZyBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ET00tTGV2ZWwtMy1WaWV3cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJheSBXaGl0bWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZG9jdW1lbnQgb2JqZWN0IG1vZGVsIChkb20pIGxldmVsIDMgYWJzdHJhY3Qgc2NoZW1hcyBzcGVjaWZpY2F0aW9uIiBkYXRhLXRhZz0iZG9tIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtRE9NLUxldmVsLTMtQVMtMjAyMDExMDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIEFic3RyYWN0IFNjaGVtYXMgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIEFic3RyYWN0IFNjaGVtYXMgU3BlY2lmaWNhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTEtMDMgLSA8YSB0aXRsZT0iRG9jdW1lbnQgT2JqZWN0IE1vZGVsIChET00pIExldmVsIDMgQWJzdHJhY3QgU2NoZW1hcyBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ET00tTGV2ZWwtMy1BUyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlbiBDaGFuZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsZW5hIExpdGFuaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBLZXNzZWxtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5yZXphdXIgcmFobWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIGNoaW5lc2UgdGV4dCBsYXlvdXTkuK3mlofmjpLniYjpnIDmsYIiIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MgaTE4biB4bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtY2xyZXEtMjAyMDExMDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgQ2hpbmVzZSBUZXh0IExheW91dOS4reaWh+aOkueJiOmcgOaxgiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyBmb3IgQ2hpbmVzZSBUZXh0IExheW91dOS4reaWh+aOkueJiOmcgOaxgjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTExLTAxIC0gPGEgdGl0bGU9IlJlcXVpcmVtZW50cyBmb3IgQ2hpbmVzZSBUZXh0IExheW91dOS4reaWh+aOkueJiOmcgOaxgiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2xyZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NscmVxLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSZXF1aXJlbWVudHMgZm9yIENoaW5lc2UgVGV4dCBMYXlvdXTkuK3mlofmjpLniYjpnIDmsYIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Qm9iYnkgVHVuZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllpanVuIENoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIFEgTElVCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SHVpIEppbmcgQ2hlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZ1cWlhbyBYdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuIFFpIExpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGFpIExpYW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WGlhb3FpYW4gV3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BaWppZSBaaGFuZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGZvciBwZXJzb25hbGl6YXRpb24gc2VtYW50aWNzIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1wZXJzb25hbGl6YXRpb24tc2VtYW50aWNzLXJlcXVpcmVtZW50cy0xLjAtMjAyMDEwMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgUGVyc29uYWxpemF0aW9uIFNlbWFudGljcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyBmb3IgUGVyc29uYWxpemF0aW9uIFNlbWFudGljczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBQbGF0Zm9ybSBBcmNoaXRlY3R1cmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMC0yOCAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIFBlcnNvbmFsaXphdGlvbiBTZW1hbnRpY3MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BlcnNvbmFsaXphdGlvbi1zZW1hbnRpY3MtcmVxdWlyZW1lbnRzLTEuMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcGVyc29uYWxpemF0aW9uLXNlbWFudGljcy9yZXF1aXJlbWVudHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgUGVyc29uYWxpemF0aW9uIFNlbWFudGljcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MaXNhIFNlZW1hbi1Ib3J3aXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBMYVBpZXJyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UnVveGkgUmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYnhyIGhhbmQgaW5wdXQgbW9kdWxlIC0gbGV2ZWwgMSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC13ZWJ4ci1oYW5kLWlucHV0LTEtMjAyMDEwMjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYlhSIEhhbmQgSW5wdXQgTW9kdWxlIC0gTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYlhSICBIYW5kICBJbnB1dCAgTW9kdWxlICAtICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkltbWVyc2l2ZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTEwLTIyIC0gPGEgdGl0bGU9IldlYlhSIEhhbmQgSW5wdXQgTW9kdWxlIC0gTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VieHItaGFuZC1pbnB1dC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vaW1tZXJzaXZlLXdlYi5naXRodWIuaW8vd2VieHItaGFuZC1pbnB1dC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViWFIgSGFuZCBJbnB1dCBNb2R1bGUgLSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbmlzaCBHb3JlZ2Fva2FyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvZ3Jlc3NpdmUgZm9udCBlbnJpY2htZW50OiBldmFsdWF0aW9uIHJlcG9ydCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS1QRkUtZXZhbHVhdGlvbi0yMDIwMTAxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJvZ3Jlc3NpdmUgRm9udCBFbnJpY2htZW50OiBFdmFsdWF0aW9uIFJlcG9ydCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlByb2dyZXNzaXZlIEZvbnQgRW5yaWNobWVudDogRXZhbHVhdGlvbiBSZXBvcnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBGb250cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTAtMTUgLSA8YSB0aXRsZT0iUHJvZ3Jlc3NpdmUgRm9udCBFbnJpY2htZW50OiBFdmFsdWF0aW9uIFJlcG9ydCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUEZFLWV2YWx1YXRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL1BGRS1hbmFseXNpcy9yZXBvcnQvZXZhbHVhdGlvbi1yZXBvcnQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQcm9ncmVzc2l2ZSBGb250IEVucmljaG1lbnQ6IEV2YWx1YXRpb24gUmVwb3J0Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzIExpbGxleQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHByb3BlcnRpZXMgYW5kIHZhbHVlcyBhcGkgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1jc3MtcHJvcGVydGllcy12YWx1ZXMtYXBpLTEtMjAyMDEwMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBQcm9wZXJ0aWVzIGFuZCBWYWx1ZXMgQVBJIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFByb3BlcnRpZXMgIGFuZCAgVmFsdWVzICBBUEkgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGVjaG5pY2FsIEFyY2hpdGVjdHVyZSBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTEwLTEzIC0gPGEgdGl0bGU9IkNTUyBQcm9wZXJ0aWVzIGFuZCBWYWx1ZXMgQVBJIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1wcm9wZXJ0aWVzLXZhbHVlcy1hcGktMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3MtaG91ZGluaS5vcmcvY3NzLXByb3BlcnRpZXMtdmFsdWVzLWFwaS0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgUHJvcGVydGllcyBhbmQgVmFsdWVzIEFQSSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEdsYXptYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGFuIFN0ZWFybnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnIFdoaXR3b3J0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIFN0ZXBoZW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsYW5ndWFnZSB0YWdzIGFuZCBsb2NhbGUgaWRlbnRpZmllcnMgZm9yIHRoZSB3b3JsZCB3aWRlIHdlYiIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtbHRsaS0yMDIwMTAwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTGFuZ3VhZ2UgVGFncyBhbmQgTG9jYWxlIElkZW50aWZpZXJzIGZvciB0aGUgV29ybGQgV2lkZSBXZWIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5MYW5ndWFnZSBUYWdzIGFuZCBMb2NhbGUgSWRlbnRpZmllcnMgZm9yIHRoZSBXb3JsZCBXaWRlIFdlYjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTEwLTA3IC0gPGEgdGl0bGU9Ikxhbmd1YWdlIFRhZ3MgYW5kIExvY2FsZSBJZGVudGlmaWVycyBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sdGxpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9sdGxpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBMYW5ndWFnZSBUYWdzIGFuZCBMb2NhbGUgSWRlbnRpZmllcnMgZm9yIHRoZSBXb3JsZCBXaWRlIFdlYiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGRpc29uIFBoaWxsaXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlc291cmNlIGhpbnRzIiBkYXRhLXRhZz0icGVyZm9ybWFuY2UiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtcmVzb3VyY2UtaGludHMtMjAyMDEwMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlc291cmNlIEhpbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVzb3VyY2UgSGludHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTAtMDUgLSA8YSB0aXRsZT0iUmVzb3VyY2UgSGludHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Jlc291cmNlLWhpbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9yZXNvdXJjZS1oaW50cy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUmVzb3VyY2UgSGludHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWx5YSBHcmlnb3JpawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgYW5ub3RhdGlvbiBleHRlbnNpb25zIGZvciB3ZWIgcHVibGljYXRpb25zIiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLXdwdWItYW5uLTIwMjAxMDAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQW5ub3RhdGlvbiBFeHRlbnNpb25zIGZvciBXZWIgUHVibGljYXRpb25zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIEFubm90YXRpb24gRXh0ZW5zaW9ucyBmb3IgV2ViIFB1YmxpY2F0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXVkaW9ib29rcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMTAtMDEgLSA8YSB0aXRsZT0iV2ViIEFubm90YXRpb24gRXh0ZW5zaW9ucyBmb3IgV2ViIFB1YmxpY2F0aW9ucyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3B1Yi1hbm4iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dwdWItYW5uLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQW5ub3RhdGlvbiBFeHRlbnNpb25zIGZvciBXZWIgUHVibGljYXRpb25zIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRpbW90aHkgQ29sZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkl2YW4gSGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBhY2thZ2VkIHdlYiBwdWJsaWNhdGlvbnMiIGRhdGEtdGFnPSJkcHViIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtcHdwdWItMjAyMDEwMDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBhY2thZ2VkIFdlYiBQdWJsaWNhdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QYWNrYWdlZCBXZWIgUHVibGljYXRpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BdWRpb2Jvb2tzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0xMC0wMSAtIDxhIHRpdGxlPSJQYWNrYWdlZCBXZWIgUHVibGljYXRpb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wd3B1YiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcHdwdWIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBhY2thZ2VkIFdlYiBQdWJsaWNhdGlvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgV29vZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRwdWIiPkRpZ2l0YWwgUHVibGlzaGluZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhyIGFjY2Vzc2liaWxpdHkgdXNlciByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELXhhdXItMjAyMDA5MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhSIEFjY2Vzc2liaWxpdHkgVXNlciBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUiBBY2Nlc3NpYmlsaXR5IFVzZXIgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFBsYXRmb3JtIEFyY2hpdGVjdHVyZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA5LTE2IC0gPGEgdGl0bGU9IlhSIEFjY2Vzc2liaWxpdHkgVXNlciBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hhdXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FwYS94YXVyLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBYUiBBY2Nlc3NpYmlsaXR5IFVzZXIgUmVxdWlyZW1lbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2h1ZSBPJiMwMzk7Q29ubm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFuaW5hIFNhamthCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFzb24gV2hpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgaW5saW5lIGxheW91dCBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1jc3MtaW5saW5lLTMtMjAyMDA4MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBJbmxpbmUgTGF5b3V0IE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBJbmxpbmUgIExheW91dCAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA4LTI3IC0gPGEgdGl0bGU9IkNTUyBJbmxpbmUgTGF5b3V0IE1vZHVsZSBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtaW5saW5lLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1pbmxpbmUtMy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIElubGluZSBMYXlvdXQgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBDcmFtZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBaaWxsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViZHJpdmVyIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0Qtd2ViZHJpdmVyMi0yMDIwMDgyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViRHJpdmVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViRHJpdmVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Ccm93c2VyIFRlc3RpbmcgYW5kIFRvb2xzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wOC0yNCAtIDxhIHRpdGxlPSJXZWJEcml2ZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmRyaXZlcjIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViRHJpdmVyIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFN0ZXdhcnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCdXJucwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlcXVpcmVtZW50cyBmb3IgamFwYW5lc2UgdGV4dCBsYXlvdXQg5pel5pys6Kqe57WE54mI5Yem55CG44Gu6KaB5Lu2KOaXpeacrOiqnueJiCkiIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MgaTE4biB4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtamxyZXEtMjAyMDA4MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgSmFwYW5lc2UgVGV4dCBMYXlvdXQg5pel5pys6Kqe57WE54mI5Yem55CG44Gu6KaB5Lu2KOaXpeacrOiqnueJiCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgZm9yIEphcGFuZXNlIFRleHQgTGF5b3V0IOaXpeacrOiqnue1hOeJiOWHpueQhuOBruimgeS7tijml6XmnKzoqp7niYgpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDgtMTEgLSA8YSB0aXRsZT0iUmVxdWlyZW1lbnRzIGZvciBKYXBhbmVzZSBUZXh0IExheW91dCDml6XmnKzoqp7ntYTniYjlh6bnkIbjga7opoHku7Yo5pel5pys6Kqe54mIKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvamxyZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2pscmVxLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSZXF1aXJlbWVudHMgZm9yIEphcGFuZXNlIFRleHQgTGF5b3V0IOaXpeacrOiqnue1hOeJiOWHpueQhuOBruimgeS7tijml6XmnKzoqp7niYgpIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhpcm95dWtpIENoaWJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVuemFidXJvIEVkYW1vdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNlaWljaGkgS2F0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhdHN1byBLT0JBWUFTSEkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub3NoaSBLb2JheWFzaGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYXRoYW5pZWwgTWNDdWxseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZlbGl4IFNhc2FraQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkF0c3VzaGkgU2hpbW9ubwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhhamltZSBTaGlvemF3YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZ1cWlhbyBYdWUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0dG1sIHByb2ZpbGVzIGZvciBpbnRlcm5ldCBtZWRpYSBzdWJ0aXRsZXMgYW5kIGNhcHRpb25zIDEuMiIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9SRUMtdHRtbC1pbXNjMS4yLTIwMjAwODA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUVE1MIFByb2ZpbGVzIGZvciBJbnRlcm5ldCBNZWRpYSBTdWJ0aXRsZXMgYW5kIENhcHRpb25zIDEuMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRUTUwgIFByb2ZpbGVzICBmb3IgIEludGVybmV0ICBNZWRpYSAgU3VidGl0bGVzICBhbmQgIENhcHRpb25zJm5ic3A7MS4yPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UaW1lZCBUZXh0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wOC0wNCAtIDxhIHRpdGxlPSJUVE1MIFByb2ZpbGVzIGZvciBJbnRlcm5ldCBNZWRpYSBTdWJ0aXRsZXMgYW5kIENhcHRpb25zIDEuMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdHRtbC1pbXNjMS4yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9pbXNjL2ltc2MxL3NwZWMvdHRtbC13dy1wcm9maWxlcy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRUTUwgUHJvZmlsZXMgZm9yIEludGVybmV0IE1lZGlhIFN1YnRpdGxlcyBhbmQgQ2FwdGlvbnMgMS4yIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBpZXJyZS1BbnRob255IExlbWlldXgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1lZGlhIHF1ZXJpZXMgbGV2ZWwgNSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELW1lZGlhcXVlcmllcy01LTIwMjAwNzMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNZWRpYSBRdWVyaWVzIExldmVsIDUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZWRpYSAgUXVlcmllcyAgTGV2ZWwmbmJzcDs1PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNy0zMSAtIDxhIHRpdGxlPSJNZWRpYSBRdWVyaWVzIExldmVsIDUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21lZGlhcXVlcmllcy01Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9tZWRpYXF1ZXJpZXMtNS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWVkaWEgUXVlcmllcyBMZXZlbCA1Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlYW4gSmFja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZsb3JpYW4gUml2b2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYnhyIGRldmljZSBhcGkiIGRhdGEtdGFnPSJncmFwaGljcyB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0Qtd2VieHItMjAyMDA3MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYlhSIERldmljZSBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJYUiBEZXZpY2UgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbW1lcnNpdmUgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNy0yNCAtIDxhIHRpdGxlPSJXZWJYUiBEZXZpY2UgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJ4ciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2ltbWVyc2l2ZS13ZWIuZ2l0aHViLmlvL3dlYnhyLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJYUiBEZXZpY2UgQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyYW5kb24gSm9uZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYW5pc2ggR29yZWdhb2thcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5lbGwgV2FsaWN6ZWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYSBxdWVyaWVzIGxldmVsIDQiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9DUi1tZWRpYXF1ZXJpZXMtNC0yMDIwMDcyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWEgUXVlcmllcyBMZXZlbCA0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWEgIFF1ZXJpZXMgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDctMjEgLSA8YSB0aXRsZT0iTWVkaWEgUXVlcmllcyBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYXF1ZXJpZXMtNCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvbWVkaWFxdWVyaWVzLTQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1lZGlhIFF1ZXJpZXMgTGV2ZWwgNCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgcGF5bWVudHMgaHR0cCBtZXNzYWdlcyAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS13ZWJwYXltZW50cy1odHRwLW1lc3NhZ2VzLTIwMjAwNzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgUGF5bWVudHMgSFRUUCBNZXNzYWdlcyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgIFBheW1lbnRzICBIVFRQICBNZXNzYWdlcyZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBheW1lbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNy0yMSAtIDxhIHRpdGxlPSJXZWIgUGF5bWVudHMgSFRUUCBNZXNzYWdlcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYnBheW1lbnRzLWh0dHAtbWVzc2FnZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYnBheW1lbnRzLWh0dHAtbWVzc2FnZXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBQYXltZW50cyBIVFRQIE1lc3NhZ2VzIDEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYW51IFNwb3JueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIE1jQ2Fycm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJqc29uLWxkIDEuMSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1JFQy1qc29uLWxkMTEtMjAyMDA3MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEpTT04tTEQgMS4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SlNPTi1MRCZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SlNPTi1MRCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDctMTYgLSA8YSB0aXRsZT0iSlNPTi1MRCAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2pzb24tbGQxMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vanNvbi1sZC1zeW50YXgvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEpTT04tTEQgMS4xIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWdnIEtlbGxvZ2cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaWVycmUtQW50b2luZSBDaGFtcGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBMb25nbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBlcm1pc3Npb25zIHBvbGljeSIgZGF0YS10YWc9InNlY3VyaXR5IHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1wZXJtaXNzaW9ucy1wb2xpY3ktMS0yMDIwMDcxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGVybWlzc2lvbnMgUG9saWN5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGVybWlzc2lvbnMgUG9saWN5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA3LTE2IC0gPGEgdGl0bGU9IlBlcm1pc3Npb25zIFBvbGljeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcGVybWlzc2lvbnMtcG9saWN5LTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1wZXJtaXNzaW9ucy1wb2xpY3kvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBlcm1pc3Npb25zIFBvbGljeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gQ2xlbGxhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ianNvbi1sZCAxLjEgcHJvY2Vzc2luZyBhbGdvcml0aG1zIGFuZCBhcGkiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9SRUMtanNvbi1sZDExLWFwaS0yMDIwMDcxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSlNPTi1MRCAxLjEgUHJvY2Vzc2luZyBBbGdvcml0aG1zIGFuZCBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5KU09OLUxEIDEuMSBQcm9jZXNzaW5nIEFsZ29yaXRobXMgYW5kIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SlNPTi1MRCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDctMTYgLSA8YSB0aXRsZT0iSlNPTi1MRCAxLjEgUHJvY2Vzc2luZyBBbGdvcml0aG1zIGFuZCBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2pzb24tbGQxMS1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2pzb24tbGQtYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBKU09OLUxEIDEuMSBQcm9jZXNzaW5nIEFsZ29yaXRobXMgYW5kIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBLZWxsb2dnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBMb25nbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGllcnJlLUFudG9pbmUgQ2hhbXBpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJqc29uLWxkIDEuMSBmcmFtaW5nIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvUkVDLWpzb24tbGQxMS1mcmFtaW5nLTIwMjAwNzE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBKU09OLUxEIDEuMSBGcmFtaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SlNPTi1MRCAxLjEgRnJhbWluZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SlNPTi1MRCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDctMTYgLSA8YSB0aXRsZT0iSlNPTi1MRCAxLjEgRnJhbWluZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvanNvbi1sZDExLWZyYW1pbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2pzb24tbGQtZnJhbWluZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSlNPTi1MRCAxLjEgRnJhbWluZyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIExvbmdsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBLZWxsb2dnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGllcnJlLUFudG9pbmUgQ2hhbXBpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJleHRlbnNpb25zIHRvIHRoZSBvd2wtdGltZSBvbnRvbG9neSAtIGVudGl0eSByZWxhdGlvbnMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLXZvY2FiLW93bC10aW1lLXJlbC0yMDIwMDcwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXh0ZW5zaW9ucyB0byB0aGUgT1dMLVRpbWUgT250b2xvZ3kgLSBlbnRpdHkgcmVsYXRpb25zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RXh0ZW5zaW9ucyB0byB0aGUgT1dMLVRpbWUgT250b2xvZ3kgLSBlbnRpdHkgcmVsYXRpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TcGF0aWFsIERhdGEgb24gdGhlIFdlYiBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA3LTA3IC0gPGEgdGl0bGU9IkV4dGVuc2lvbnMgdG8gdGhlIE9XTC1UaW1lIE9udG9sb2d5IC0gZW50aXR5IHJlbGF0aW9ucyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9jYWItb3dsLXRpbWUtcmVsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZHcvdGltZS1lbnRpdHktcmVsYXRpb25zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFeHRlbnNpb25zIHRvIHRoZSBPV0wtVGltZSBPbnRvbG9neSAtIGVudGl0eSByZWxhdGlvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2ltb24gQ294CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGl0dGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2lvbnMgdG8gdGhlIG93bC10aW1lIG9udG9sb2d5IC0gdGVtcG9yYWwgYWdncmVnYXRlcyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtdm9jYWItb3dsLXRpbWUtYWdnLTIwMjAwNzA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFeHRlbnNpb25zIHRvIHRoZSBPV0wtVGltZSBPbnRvbG9neSAtIHRlbXBvcmFsIGFnZ3JlZ2F0ZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FeHRlbnNpb25zIHRvIHRoZSBPV0wtVGltZSBPbnRvbG9neSAtIHRlbXBvcmFsIGFnZ3JlZ2F0ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNwYXRpYWwgRGF0YSBvbiB0aGUgV2ViIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDctMDcgLSA8YSB0aXRsZT0iRXh0ZW5zaW9ucyB0byB0aGUgT1dMLVRpbWUgT250b2xvZ3kgLSB0ZW1wb3JhbCBhZ2dyZWdhdGVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2NhYi1vd2wtdGltZS1hZ2ciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3Nkdy90aW1lLWFnZ3JlZ2F0ZXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEV4dGVuc2lvbnMgdG8gdGhlIE9XTC1UaW1lIE9udG9sb2d5IC0gdGVtcG9yYWwgYWdncmVnYXRlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaW1vbiBDb3gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGFtIFNoZXBoZXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBWYXJkZW1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIG1lZGlhIHRpbWVkIGV2ZW50cyIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLW1lZGlhLXRpbWVkLWV2ZW50cy0yMDIwMDYyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVxdWlyZW1lbnRzIGZvciBNZWRpYSBUaW1lZCBFdmVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgZm9yIE1lZGlhIFRpbWVkIEV2ZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWVkaWEgYW5kIEVudGVydGFpbm1lbnQgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNi0yNSAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIE1lZGlhIFRpbWVkIEV2ZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWVkaWEtdGltZWQtZXZlbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tZS1tZWRpYS10aW1lZC1ldmVudHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgTWVkaWEgVGltZWQgRXZlbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzIE5lZWRoYW0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjaGFsbGVuZ2VzIHdpdGggYWNjZXNzaWJpbGl0eSBndWlkZWxpbmVzIGNvbmZvcm1hbmNlIGFuZCB0ZXN0aW5nLCBhbmQgYXBwcm9hY2hlcyBmb3IgbWl0aWdhdGluZyB0aGVtIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1hY2Nlc3NpYmlsaXR5LWNvbmZvcm1hbmNlLWNoYWxsZW5nZXMtMjAyMDA2MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENoYWxsZW5nZXMgd2l0aCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgQ29uZm9ybWFuY2UgYW5kIFRlc3RpbmcsIGFuZCBBcHByb2FjaGVzIGZvciBNaXRpZ2F0aW5nIFRoZW0gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DaGFsbGVuZ2VzIHdpdGggQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIENvbmZvcm1hbmNlIGFuZCBUZXN0aW5nLCBhbmQgQXBwcm9hY2hlcyBmb3IgTWl0aWdhdGluZyBUaGVtPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA2LTE5IC0gPGEgdGl0bGU9IkNoYWxsZW5nZXMgd2l0aCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgQ29uZm9ybWFuY2UgYW5kIFRlc3RpbmcsIGFuZCBBcHByb2FjaGVzIGZvciBNaXRpZ2F0aW5nIFRoZW0gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2FjY2Vzc2liaWxpdHktY29uZm9ybWFuY2UtY2hhbGxlbmdlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2NhZy9jb25mb3JtYW5jZS1jaGFsbGVuZ2VzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDaGFsbGVuZ2VzIHdpdGggQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIENvbmZvcm1hbmNlIGFuZCBUZXN0aW5nLCBhbmQgQXBwcm9hY2hlcyBmb3IgTWl0aWdhdGluZyBUaGVtIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGV0ZXIgS29ybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNoYXJsZXMgSGFsbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0YW1pbCBsYXlvdXQgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1pbHJlcS10YW1sLTIwMjAwNjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUYW1pbCBMYXlvdXQgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGFtaWwgTGF5b3V0IFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA2LTE2IC0gPGEgdGl0bGU9IlRhbWlsIExheW91dCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2lscmVxLXRhbWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2lpcC90YW1pbC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVGFtaWwgTGF5b3V0IFJlcXVpcmVtZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtb25nb2xpYW4gbGF5b3V0IHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtbWxyZXEtMjAyMDA2MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vbmdvbGlhbiBMYXlvdXQgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TW9uZ29saWFuIExheW91dCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNi0xNiAtIDxhIHRpdGxlPSJNb25nb2xpYW4gTGF5b3V0IFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWxyZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21scmVxLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBNb25nb2xpYW4gTGF5b3V0IFJlcXVpcmVtZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIHRpYmV0YW4gdGV4dCBsYXlvdXQgYW5kIHR5cG9ncmFwaHkiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELXRscmVxLTIwMjAwNjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXF1aXJlbWVudHMgZm9yIFRpYmV0YW4gVGV4dCBMYXlvdXQgYW5kIFR5cG9ncmFwaHkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgZm9yIFRpYmV0YW4gVGV4dCBMYXlvdXQgYW5kIFR5cG9ncmFwaHk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNi0xNiAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIFRpYmV0YW4gVGV4dCBMYXlvdXQgYW5kIFR5cG9ncmFwaHkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RscmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby90bHJlcS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUmVxdWlyZW1lbnRzIGZvciBUaWJldGFuIFRleHQgTGF5b3V0IGFuZCBUeXBvZ3JhcGh5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2h1bm1pbmcgSHUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icnVsZXMgZm9yIHNpbXBsZSBwbGFjZW1lbnQgb2YgamFwYW5lc2UgcnVieSIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0Qtc2ltcGxlLXJ1YnktMjAyMDA2MDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJ1bGVzIGZvciBTaW1wbGUgUGxhY2VtZW50IG9mIEphcGFuZXNlIFJ1YnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SdWxlcyBmb3IgU2ltcGxlIFBsYWNlbWVudCBvZiBKYXBhbmVzZSBSdWJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDYtMDkgLSA8YSB0aXRsZT0iUnVsZXMgZm9yIFNpbXBsZSBQbGFjZW1lbnQgb2YgSmFwYW5lc2UgUnVieSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2ltcGxlLXJ1YnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3NpbXBsZS1ydWJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSdWxlcyBmb3IgU2ltcGxlIFBsYWNlbWVudCBvZiBKYXBhbmVzZSBSdWJ5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZsb3JpYW4gUml2b2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXRzdXNoaSBTaGltb25vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBvdmVyZmxvdyBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1jc3Mtb3ZlcmZsb3ctMy0yMDIwMDYwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIE92ZXJmbG93IE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBPdmVyZmxvdyAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA2LTAzIC0gPGEgdGl0bGU9IkNTUyBPdmVyZmxvdyBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLW92ZXJmbG93LTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1vdmVyZmxvdy0zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgT3ZlcmZsb3cgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQmFyb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImVuY29kaW5nIiBkYXRhLXRhZz0iY3NzIGh0bWwgaTE4biIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9OT1RFLWVuY29kaW5nLTIwMjAwNjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFbmNvZGluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVuY29kaW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDYtMDIgLSA8YSB0aXRsZT0iRW5jb2RpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2VuY29kaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZW5jb2Rpbmcuc3BlYy53aGF0d2cub3JnLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFbmNvZGluZyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bbm5lIHZhbiBLZXN0ZXJlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2h1YSBCZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRkaXNvbiBQaGlsbGlwcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm9ncmVzcyBldmVudHMiIGRhdGEtdGFnPSJkb20gd2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1NQU0QtcHJvZ3Jlc3MtZXZlbnRzLTIwMjAwNjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcm9ncmVzcyBFdmVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qcm9ncmVzcyBFdmVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPihoaXN0b3JpY2FsKSBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNi0wMiAtIDxhIHRpdGxlPSJQcm9ncmVzcyBFdmVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb2dyZXNzLWV2ZW50cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3hoci5zcGVjLndoYXR3Zy5vcmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFByb2dyZXNzIEV2ZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bbm5lIHZhbiBLZXN0ZXJlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNoYXJsZXMgJiMwMzk7Y2hhYWxzJiMwMzk7IChNY0NhdGhpZSkgTmV2aWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVuZ2tlZSBTb25nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNyb3NzLW9yaWdpbiByZXNvdXJjZSBzaGFyaW5nIiBkYXRhLXRhZz0ic2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvU1BTRC1jb3JzLTIwMjAwNjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNi0wMiAtIDxhIHRpdGxlPSJDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY29ycyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFubmUgdmFuIEtlc3RlcmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBub3RpZmljYXRpb25zIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1NQU0Qtbm90aWZpY2F0aW9ucy0yMDIwMDYwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIE5vdGlmaWNhdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgTm90aWZpY2F0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIE5vdGlmaWNhdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDYtMDIgLSA8YSB0aXRsZT0iV2ViIE5vdGlmaWNhdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L25vdGlmaWNhdGlvbnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIEdyZWdnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5uZSB2YW4gS2VzdGVyZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbmRpYyBsYXlvdXQgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1pbHJlcS0yMDIwMDUyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW5kaWMgTGF5b3V0IFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkluZGljIExheW91dCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNS0yOSAtIDxhIHRpdGxlPSJJbmRpYyBMYXlvdXQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9pbHJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vaWxyZXEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEluZGljIExheW91dCBSZXF1aXJlbWVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3dhcmFuIExhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGZvciBoYW5ndWwgdGV4dCBsYXlvdXQgYW5kIHR5cG9ncmFwaHkgOiDtlZzqta3slrQg7YWN7Iqk7Yq4IOugiOydtOyVhOybgyDrsI8g7YOA7J207Y+s6re4656Y7ZS866W8IOychO2VnCDsmpTqtazsgqztla0iIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MgaTE4biB4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUta2xyZXEtMjAyMDA1MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgSGFuZ3VsIFRleHQgTGF5b3V0IGFuZCBUeXBvZ3JhcGh5IDog7ZWc6rWt7Ja0IO2FjeyKpO2KuCDroIjsnbTslYTsm4Mg67CPIO2DgOydtO2PrOq3uOuemO2UvOulvCDsnITtlZwg7JqU6rWs7IKs7ZWtIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVxdWlyZW1lbnRzIGZvciBIYW5ndWwgVGV4dCBMYXlvdXQgYW5kIFR5cG9ncmFwaHkgOiDtlZzqta3slrQg7YWN7Iqk7Yq4IOugiOydtOyVhOybgyDrsI8g7YOA7J207Y+s6re4656Y7ZS866W8IOychO2VnCDsmpTqtazsgqztla08L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNS0yNyAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIEhhbmd1bCBUZXh0IExheW91dCBhbmQgVHlwb2dyYXBoeSA6IO2VnOq1reyWtCDthY3siqTtirgg66CI7J207JWE7JuDIOuwjyDtg4DsnbTtj6zqt7jrnpjtlLzrpbwg7JyE7ZWcIOyalOq1rOyCrO2VrSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkva2xyZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2tscmVxLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSZXF1aXJlbWVudHMgZm9yIEhhbmd1bCBUZXh0IExheW91dCBhbmQgVHlwb2dyYXBoeSA6IO2VnOq1reyWtCDthY3siqTtirgg66CI7J207JWE7JuDIOuwjyDtg4DsnbTtj6zqt7jrnpjtlLzrpbwg7JyE7ZWcIOyalOq1rOyCrO2VrSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZXRoaW9waWMgbGF5b3V0IHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImNzcyBncmFwaGljcyBpMThuIHhtbCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1lbHJlcS0yMDIwMDUyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXRoaW9waWMgTGF5b3V0IFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkV0aGlvcGljIExheW91dCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNS0yNiAtIDxhIHRpdGxlPSJFdGhpb3BpYyBMYXlvdXQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbHJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZWxyZXEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEV0aGlvcGljIExheW91dCBSZXF1aXJlbWVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIE1la29ubmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imxhbmd1YWdlIGVuYWJsZW1lbnQgaW5kZXgiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELXR5cG9ncmFwaHktMjAyMDA1MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIExhbmd1YWdlIGVuYWJsZW1lbnQgaW5kZXggZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5MYW5ndWFnZSBlbmFibGVtZW50IGluZGV4PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDUtMjAgLSA8YSB0aXRsZT0iTGFuZ3VhZ2UgZW5hYmxlbWVudCBpbmRleCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdHlwb2dyYXBoeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vdHlwb2dyYXBoeS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTGFuZ3VhZ2UgZW5hYmxlbWVudCBpbmRleCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZXh0IGxheW91dCByZXF1aXJlbWVudHMgZm9yIHRoZSBhcmFiaWMgc2NyaXB0IiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1hbHJlcS0yMDIwMDUyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGV4dCBMYXlvdXQgUmVxdWlyZW1lbnRzIGZvciB0aGUgQXJhYmljIFNjcmlwdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRleHQgTGF5b3V0IFJlcXVpcmVtZW50cyBmb3IgdGhlIEFyYWJpYyBTY3JpcHQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNS0yMCAtIDxhIHRpdGxlPSJUZXh0IExheW91dCBSZXF1aXJlbWVudHMgZm9yIHRoZSBBcmFiaWMgU2NyaXB0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hbHJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYWxyZXEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRleHQgTGF5b3V0IFJlcXVpcmVtZW50cyBmb3IgdGhlIEFyYWJpYyBTY3JpcHQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHBvc2l0aW9uZWQgbGF5b3V0IG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELWNzcy1wb3NpdGlvbi0zLTIwMjAwNTE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgUG9zaXRpb25lZCBMYXlvdXQgTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFBvc2l0aW9uZWQgIExheW91dCAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA1LTE5IC0gPGEgdGl0bGU9IkNTUyBQb3NpdGlvbmVkIExheW91dCBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXBvc2l0aW9uLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1wb3NpdGlvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFBvc2l0aW9uZWQgTGF5b3V0IE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9zc2VuIEF0YW5hc3NvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFycm9uIEVpY2hvbHoKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN0cmVhbWluZyBqc29uLWxkIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS1qc29uLWxkMTEtc3RyZWFtaW5nLTIwMjAwNTA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTdHJlYW1pbmcgSlNPTi1MRCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlN0cmVhbWluZyBKU09OLUxEPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5KU09OLUxEIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNS0wNyAtIDxhIHRpdGxlPSJTdHJlYW1pbmcgSlNPTi1MRCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvanNvbi1sZDExLXN0cmVhbWluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vanNvbi1sZC1zdHJlYW1pbmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFN0cmVhbWluZyBKU09OLUxEIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ1YmVuIFRhZWxtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHRleHQgZGVjb3JhdGlvbiBtb2R1bGUgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELWNzcy10ZXh0LWRlY29yLTQtMjAyMDA1MDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBUZXh0IERlY29yYXRpb24gTW9kdWxlIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFRleHQgIERlY29yYXRpb24gIE1vZHVsZSAgTGV2ZWwmbmJzcDs0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNS0wNiAtIDxhIHRpdGxlPSJDU1MgVGV4dCBEZWNvcmF0aW9uIE1vZHVsZSBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtdGV4dC1kZWNvci00Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdGV4dC1kZWNvci00LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgVGV4dCBEZWNvcmF0aW9uIE1vZHVsZSBMZXZlbCA0Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktvamkgSXNoaWkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBib3ggbW9kZWwgbW9kdWxlIGxldmVsIDQiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1jc3MtYm94LTQtMjAyMDA0MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBCb3ggTW9kZWwgTW9kdWxlIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEJveCAgTW9kZWwgIE1vZHVsZSAgTGV2ZWwmbmJzcDs0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNC0yMSAtIDxhIHRpdGxlPSJDU1MgQm94IE1vZGVsIE1vZHVsZSBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtYm94LTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1ib3gtNC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEJveCBNb2RlbCBNb2R1bGUgTGV2ZWwgNCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBib3ggYWxpZ25tZW50IG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELWNzcy1hbGlnbi0zLTIwMjAwNDIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQm94IEFsaWdubWVudCBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgQm94ICBBbGlnbm1lbnQgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wNC0yMSAtIDxhIHRpdGxlPSJDU1MgQm94IEFsaWdubWVudCBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWFsaWduLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1hbGlnbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEJveCBBbGlnbm1lbnQgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIG9mIHRoaW5ncyAod290KSB0aGluZyBkZXNjcmlwdGlvbiIgZGF0YS10YWc9IndvdCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvUkVDLXdvdC10aGluZy1kZXNjcmlwdGlvbi0yMDIwMDQwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBUaGluZyBEZXNjcmlwdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBvZiBUaGluZ3MgKFdvVCkgVGhpbmcgRGVzY3JpcHRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBvZiBUaGluZ3MgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTA0LTA5IC0gPGEgdGl0bGU9IldlYiBvZiBUaGluZ3MgKFdvVCkgVGhpbmcgRGVzY3JpcHRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvdC10aGluZy1kZXNjcmlwdGlvbjEwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93b3QtdGhpbmctZGVzY3JpcHRpb24vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBvZiBUaGluZ3MgKFdvVCkgVGhpbmcgRGVzY3JpcHRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2ViYXN0aWFuIEvDpGJpc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFrdWtpIEthbWl5YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgTWNDb29sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmljdG9yIENoYXJwZW5heQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHRoaWFzIEtvdmF0c2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id290Ij5Xb1QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBvZiB0aGluZ3MgKHdvdCkgYXJjaGl0ZWN0dXJlIiBkYXRhLXRhZz0id290IiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9SRUMtd290LWFyY2hpdGVjdHVyZS0yMDIwMDQwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBBcmNoaXRlY3R1cmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgb2YgVGhpbmdzIChXb1QpIEFyY2hpdGVjdHVyZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIG9mIFRoaW5ncyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDQtMDkgLSA8YSB0aXRsZT0iV2ViIG9mIFRoaW5ncyAoV29UKSBBcmNoaXRlY3R1cmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvdC1hcmNoaXRlY3R1cmUxMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd290LWFyY2hpdGVjdHVyZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBBcmNoaXRlY3R1cmUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dGhpYXMgS292YXRzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SeXVpY2hpIE1hdHN1a3VyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgTGFnYWxseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvcnUgS2F3YWd1Y2hpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S3VuaWhpa28gVG91bXVyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkthenVvIEthamltb3RvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id290Ij5Xb1QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aW1lIG9udG9sb2d5IGluIG93bCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9DUi1vd2wtdGltZS0yMDIwMDMyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGltZSBPbnRvbG9neSBpbiBPV0wgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaW1lIE9udG9sb2d5IGluIE9XTDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U3BhdGlhbCBEYXRhIG9uIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTAzLTI2IC0gPGEgdGl0bGU9IlRpbWUgT250b2xvZ3kgaW4gT1dMIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wtdGltZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vc2R3L3RpbWUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRpbWUgT250b2xvZ3kgaW4gT1dMIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIENveAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzIExpdHRsZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsaWdodHdlaWdodCBwYWNrYWdpbmcgZm9ybWF0IChscGYpIiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS1scGYtMjAyMDAzMTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIExpZ2h0d2VpZ2h0IFBhY2thZ2luZyBGb3JtYXQgKExQRikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5MaWdodHdlaWdodCBQYWNrYWdpbmcgRm9ybWF0IChMUEYpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BdWRpb2Jvb2tzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMy0xOSAtIDxhIHRpdGxlPSJMaWdodHdlaWdodCBQYWNrYWdpbmcgRm9ybWF0IChMUEYpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9scGYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2xwZi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTGlnaHR3ZWlnaHQgUGFja2FnaW5nIEZvcm1hdCAoTFBGKSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYXVyZW50IExlIE1ldXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvbnVuY2lhdGlvbiBnYXAgYW5hbHlzaXMiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtcHJvbnVuY2lhdGlvbi1nYXAtYW5hbHlzaXMtMjAyMDAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByb251bmNpYXRpb24gR2FwIEFuYWx5c2lzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvbnVuY2lhdGlvbiBHYXAgQW5hbHlzaXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUGxhdGZvcm0gQXJjaGl0ZWN0dXJlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDMtMTcgLSA8YSB0aXRsZT0iUHJvbnVuY2lhdGlvbiBHYXAgQW5hbHlzaXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb251bmNpYXRpb24tZ2FwLWFuYWx5c2lzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wcm9udW5jaWF0aW9uL2dhcC1hbmFseXNpcyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQcm9udW5jaWF0aW9uIEdhcCBBbmFseXNpcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJra3UgSGFra2luZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBOb2JsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklyZmFuIEFsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ1b3hpIFJhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InczYyBkb20gNC4xIiBkYXRhLXRhZz0iZG9tIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL05PVEUtZG9tNDEtMjAyMDAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFczQyBET00gNC4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VzNDICBET00mbmJzcDs0LjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDMtMTcgLSA8YSB0aXRsZT0iVzNDIERPTSA0LjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RvbTQxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kb20vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFczQyBET00gNC4xIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvbmdzaGVuZyBaaHUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm9udW5jaWF0aW9uIHVzZSBjYXNlcyIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS1wcm9udW5jaWF0aW9uLXVzZS1jYXNlcy0yMDIwMDMxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJvbnVuY2lhdGlvbiBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qcm9udW5jaWF0aW9uIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBQbGF0Zm9ybSBBcmNoaXRlY3R1cmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMy0xNyAtIDxhIHRpdGxlPSJQcm9udW5jaWF0aW9uIFVzZSBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHJvbnVuY2lhdGlvbi11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3Byb251bmNpYXRpb24vdXNlLWNhc2VzIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFByb251bmNpYXRpb24gVXNlIENhc2VzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklyZmFuIEFsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgR3JlbmllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmtrdSBIYWtraW5lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ1b3hpIFJhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm9udW5jaWF0aW9uIGdhcCBhbmFseXNpcyBhbmQgdXNlIGNhc2VzIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1wcm9udW5jaWF0aW9uLWdhcC1hbmFseXNpcy1hbmQtdXNlLWNhc2VzLTIwMjAwMzEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcm9udW5jaWF0aW9uIEdhcCBBbmFseXNpcyBhbmQgVXNlIENhc2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvbnVuY2lhdGlvbiBHYXAgQW5hbHlzaXMgYW5kIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBQbGF0Zm9ybSBBcmNoaXRlY3R1cmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMy0xMCAtIDxhIHRpdGxlPSJQcm9udW5jaWF0aW9uIEdhcCBBbmFseXNpcyBhbmQgVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcm9udW5jaWF0aW9uLWdhcC1hbmFseXNpcy1hbmQtdXNlLWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wcm9udW5jaWF0aW9uL2dhcC1hbmFseXNpc19hbmRfdXNlLWNhc2UiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUHJvbnVuY2lhdGlvbiBHYXAgQW5hbHlzaXMgYW5kIFVzZSBDYXNlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJra3UgSGFra2luZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBOb2JsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlZSBEeWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXJmYW4gQWxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBHcmVuaWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UnVveGkgUmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4cGxhaW5lcjogaW1wcm92aW5nIHNwb2tlbiBwcmVzZW50YXRpb24gb24gdGhlIHdlYiIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtcHJvbnVuY2lhdGlvbi1leHBsYWluZXItMjAyMDAzMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEV4cGxhaW5lcjogSW1wcm92aW5nIFNwb2tlbiBQcmVzZW50YXRpb24gb24gdGhlIFdlYiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkV4cGxhaW5lcjogSW1wcm92aW5nIFNwb2tlbiBQcmVzZW50YXRpb24gb24gdGhlIFdlYjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBQbGF0Zm9ybSBBcmNoaXRlY3R1cmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMy0xMCAtIDxhIHRpdGxlPSJFeHBsYWluZXI6IEltcHJvdmluZyBTcG9rZW4gUHJlc2VudGF0aW9uIG9uIHRoZSBXZWIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb251bmNpYXRpb24tZXhwbGFpbmVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wcm9udW5jaWF0aW9uL2V4cGxhaW5lciIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFeHBsYWluZXI6IEltcHJvdmluZyBTcG9rZW4gUHJlc2VudGF0aW9uIG9uIHRoZSBXZWIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya2t1IEhha2tpbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXJmYW4gQWxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBzcGVlY2ggbW9kdWxlIiBkYXRhLXRhZz0iY3NzIG1lZGlhIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvQ1ItY3NzLXNwZWVjaC0xLTIwMjAwMzEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgU3BlZWNoIE1vZHVsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBTcGVlY2ggTW9kdWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMy0xMCAtIDxhIHRpdGxlPSJDU1MgU3BlZWNoIE1vZHVsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXNwZWVjaC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtc3BlZWNoLTEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBTcGVlY2ggTW9kdWxlIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBXZWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGNvbmRpdGlvbmFsIHJ1bGVzIG1vZHVsZSBsZXZlbCA0IiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtY3NzLWNvbmRpdGlvbmFsLTQtMjAyMDAzMDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBDb25kaXRpb25hbCBSdWxlcyBNb2R1bGUgTGV2ZWwgNCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgQ29uZGl0aW9uYWwgIFJ1bGVzICBNb2R1bGUgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDMtMDMgLSA8YSB0aXRsZT0iQ1NTIENvbmRpdGlvbmFsIFJ1bGVzIE1vZHVsZSBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY29uZGl0aW9uYWwtNCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvbmRpdGlvbmFsLTQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBDb25kaXRpb25hbCBSdWxlcyBNb2R1bGUgTGV2ZWwgNCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCYXJvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB0cmFuc2Zvcm1zIG1vZHVsZSBsZXZlbCAyIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvV0QtY3NzLXRyYW5zZm9ybXMtMi0yMDIwMDMwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFRyYW5zZm9ybXMgTW9kdWxlIExldmVsIDIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFRyYW5zZm9ybXMgIE1vZHVsZSAgTGV2ZWwmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMy0wMyAtIDxhIHRpdGxlPSJDU1MgVHJhbnNmb3JtcyBNb2R1bGUgTGV2ZWwgMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXRyYW5zZm9ybXMtMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXRyYW5zZm9ybXMtMi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFRyYW5zZm9ybXMgTW9kdWxlIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaW1vbiBGcmFzZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZWFuIEphY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGVyZXNhIE8mIzAzOTtDb25ub3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBheW1lbnQgbWV0aG9kOiBiYXNpYyBjYXJkIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1dELXBheW1lbnQtbWV0aG9kLWJhc2ljLWNhcmQtMjAyMDAyMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBheW1lbnQgTWV0aG9kOiBCYXNpYyBDYXJkIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGF5bWVudCBNZXRob2Q6IEJhc2ljIENhcmQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQYXltZW50cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDItMTMgLSA8YSB0aXRsZT0iUGF5bWVudCBNZXRob2Q6IEJhc2ljIENhcmQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BheW1lbnQtbWV0aG9kLWJhc2ljLWNhcmQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BheW1lbnQtbWV0aG9kLWJhc2ljLWNhcmQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBheW1lbnQgTWV0aG9kOiBCYXNpYyBDYXJkIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmNvcyBDYWNlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9tZW5pYyBEZW5pY29sYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlphY2ggS29jaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJveSBNY0VsbXVycnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZHJpYW4gQmF0ZW1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlc2l6ZSBvYnNlcnZlciIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC1yZXNpemUtb2JzZXJ2ZXItMS0yMDIwMDIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVzaXplIE9ic2VydmVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVzaXplIE9ic2VydmVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMi0xMSAtIDxhIHRpdGxlPSJSZXNpemUgT2JzZXJ2ZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Jlc2l6ZS1vYnNlcnZlci0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9yZXNpemUtb2JzZXJ2ZXIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlc2l6ZSBPYnNlcnZlciI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGVrcyBUb3RpYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWcgV2hpdHdvcnRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRyYWNlIGNvbnRleHQgLSBsZXZlbCAxIiBkYXRhLXRhZz0icGVyZm9ybWFuY2UiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1JFQy10cmFjZS1jb250ZXh0LTEtMjAyMDAyMDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRyYWNlIENvbnRleHQgLSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VHJhY2UgIENvbnRleHQgIC0gIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGlzdHJpYnV0ZWQgVHJhY2luZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDItMDYgLSA8YSB0aXRsZT0iVHJhY2UgQ29udGV4dCAtIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RyYWNlLWNvbnRleHQtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vdHJhY2UtY29udGV4dC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVHJhY2UgQ29udGV4dCAtIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2VyZ2V5IEthbnpoZWxldgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1vcmdhbiBNY0xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbG9pcyBSZWl0YmF1ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Cb2dkYW4gRHJ1dHUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OaWsgTW9sbmFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXVyaSBTaGt1cm8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGF0YSBjYXRhbG9nIHZvY2FidWxhcnkgKGRjYXQpIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9TUFNELXZvY2FiLWRjYXQtMjAyMDAyMDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+R292ZXJubWVudCBMaW5rZWQgRGF0YSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMjAtMDItMDQgLSA8YSB0aXRsZT0iRGF0YSBDYXRhbG9nIFZvY2FidWxhcnkgKERDQVQpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2NhYi1kY2F0LTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GYWRpIE1hYWxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBFcmlja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRhdGEgY2F0YWxvZyB2b2NhYnVsYXJ5IChkY2F0KSAtIHZlcnNpb24gMiIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDIwL1JFQy12b2NhYi1kY2F0LTItMjAyMDAyMDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKSAtIFZlcnNpb24gMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRhdGEgIENhdGFsb2cgIFZvY2FidWxhcnkgIChEQ0FUKSAgLSAgVmVyc2lvbiZuYnNwOzI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRhdGFzZXQgRXhjaGFuZ2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTAyLTA0IC0gPGEgdGl0bGU9IkRhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKSAtIFZlcnNpb24gMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9jYWItZGNhdC0yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9keHdnL2RjYXQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIERhdGEgQ2F0YWxvZyBWb2NhYnVsYXJ5IChEQ0FUKSAtIFZlcnNpb24gMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNjYXJkbyBBbGJlcnRvbmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCcm93bmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIENveAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZWphbmRyYSBHb256YWxleiBCZWx0cmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVhIFBlcmVnbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFdpbnN0YW5sZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIG9mIHRoaW5ncyAod290KSBiaW5kaW5nIHRlbXBsYXRlcyIgZGF0YS10YWc9IndvdCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMjAvTk9URS13b3QtYmluZGluZy10ZW1wbGF0ZXMtMjAyMDAxMzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBvZiBUaGluZ3MgKFdvVCkgQmluZGluZyBUZW1wbGF0ZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgb2YgVGhpbmdzIChXb1QpIEJpbmRpbmcgVGVtcGxhdGVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgb2YgVGhpbmdzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAyMC0wMS0zMCAtIDxhIHRpdGxlPSJXZWIgb2YgVGhpbmdzIChXb1QpIEJpbmRpbmcgVGVtcGxhdGVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93b3QtYmluZGluZy10ZW1wbGF0ZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dvdC1iaW5kaW5nLXRlbXBsYXRlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBCaW5kaW5nIFRlbXBsYXRlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtvc3RlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVnZSBLb3JrYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2lvbnMgdG8gdGhlIHNlbWFudGljIHNlbnNvciBuZXR3b3JrIG9udG9sb2d5IiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAyMC9XRC12b2NhYi1zc24tZXh0LTIwMjAwMTE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFeHRlbnNpb25zIHRvIHRoZSBTZW1hbnRpYyBTZW5zb3IgTmV0d29yayBPbnRvbG9neSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkV4dGVuc2lvbnMgdG8gdGhlIFNlbWFudGljIFNlbnNvciBOZXR3b3JrIE9udG9sb2d5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TcGF0aWFsIERhdGEgb24gdGhlIFdlYiBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDIwLTAxLTE2IC0gPGEgdGl0bGU9IkV4dGVuc2lvbnMgdG8gdGhlIFNlbWFudGljIFNlbnNvciBOZXR3b3JrIE9udG9sb2d5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2NhYi1zc24tZXh0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZHcvc3NuLWV4dGVuc2lvbnMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEV4dGVuc2lvbnMgdG8gdGhlIFNlbWFudGljIFNlbnNvciBOZXR3b3JrIE9udG9sb2d5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIENveAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndhaS1hcmlhIGF1dGhvcmluZyBwcmFjdGljZXMgMS4yIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELXdhaS1hcmlhLXByYWN0aWNlcy0xLjItMjAxOTEyMTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdBSS1BUklBIEF1dGhvcmluZyBQcmFjdGljZXMgMS4yIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V0FJLUFSSUEgIEF1dGhvcmluZyAgUHJhY3RpY2VzJm5ic3A7MS4yPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMi0xOCAtIDxhIHRpdGxlPSJXQUktQVJJQSBBdXRob3JpbmcgUHJhY3RpY2VzIDEuMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2FpLWFyaWEtcHJhY3RpY2VzLTEuMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYXJpYS1wcmFjdGljZXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdBSS1BUklBIEF1dGhvcmluZyBQcmFjdGljZXMgMS4yIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHRoZXcgS2luZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphRXVuIEplbW1hIEt1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgTnVydGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlpvw6sgQmlqbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZXBoIFNjaGV1aGFtbWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGlzYSBQYXBwYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFNjaHdlcmR0ZmVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvcmUgYWNjZXNzaWJpbGl0eSBhcGkgbWFwcGluZ3MgMS4yIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELWNvcmUtYWFtLTEuMi0yMDE5MTIxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29yZSBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyAxLjIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db3JlICBBY2Nlc3NpYmlsaXR5ICBBUEkgIE1hcHBpbmdzJm5ic3A7MS4yPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMi0xOCAtIDxhIHRpdGxlPSJDb3JlIEFjY2Vzc2liaWxpdHkgQVBJIE1hcHBpbmdzIDEuMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY29yZS1hYW0tMS4yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9jb3JlLWFhbS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ29yZSBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyAxLjIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9hbm1hcmllIERpZ2dzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFNjaHdlcmR0ZmVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3NlcGggU2NoZXVoYW1tZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRpIFNub3ctV2VhdmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWFyb24gTGV2ZW50aGFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWVsYW5pZSBSaWNoYXJkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIENyYWlnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleGFuZGVyIFN1cmtvdgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aGUgcHJvZmlsZXMgdm9jYWJ1bGFyeSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L05PVEUtZHgtcHJvZi0yMDE5MTIxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIFByb2ZpbGVzIFZvY2FidWxhcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgUHJvZmlsZXMgVm9jYWJ1bGFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGF0YXNldCBFeGNoYW5nZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMTItMTggLSA8YSB0aXRsZT0iVGhlIFByb2ZpbGVzIFZvY2FidWxhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2R4LXByb2YiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2R4d2cvcHJvZi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVGhlIFByb2ZpbGVzIFZvY2FidWxhcnkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmljaG9sYXMgQ2FyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB3cml0aW5nIG1vZGVzIGxldmVsIDMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvUkVDLWNzcy13cml0aW5nLW1vZGVzLTMtMjAxOTEyMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBXcml0aW5nIE1vZGVzIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFdyaXRpbmcgIE1vZGVzICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTEyLTEwIC0gPGEgdGl0bGU9IkNTUyBXcml0aW5nIE1vZGVzIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy13cml0aW5nLW1vZGVzLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy13cml0aW5nLW1vZGVzLTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBXcml0aW5nIE1vZGVzIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S29qaSBJc2hpaQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW5hY2Nlc3NpYmlsaXR5IG9mIGNhcHRjaGEiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9OT1RFLXR1cmluZ3Rlc3QtMjAxOTEyMDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEluYWNjZXNzaWJpbGl0eSBvZiBDQVBUQ0hBIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SW5hY2Nlc3NpYmlsaXR5IG9mIENBUFRDSEE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUGxhdGZvcm0gQXJjaGl0ZWN0dXJlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMTItMDkgLSA8YSB0aXRsZT0iSW5hY2Nlc3NpYmlsaXR5IG9mIENBUFRDSEEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3R1cmluZ3Rlc3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FwYS9jYXB0Y2hhLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbmFjY2Vzc2liaWxpdHkgb2YgQ0FQVENIQSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBIb2xsaWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFuaW5hIFNhamthCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFzb24gV2hpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHRoZXcgTWF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYmFzc2VtYmx5IGphdmFzY3JpcHQgaW50ZXJmYWNlIiBkYXRhLXRhZz0icGVyZm9ybWFuY2Ugd2ViYXBpIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9SRUMtd2FzbS1qcy1hcGktMS0yMDE5MTIwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViQXNzZW1ibHkgSmF2YVNjcmlwdCBJbnRlcmZhY2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJBc3NlbWJseSBKYXZhU2NyaXB0IEludGVyZmFjZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViQXNzZW1ibHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTEyLTA1IC0gPGEgdGl0bGU9IldlYkFzc2VtYmx5IEphdmFTY3JpcHQgSW50ZXJmYWNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93YXNtLWpzLWFwaS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd2ViYXNzZW1ibHkuZ2l0aHViLmlvL3NwZWMvanMtYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJBc3NlbWJseSBKYXZhU2NyaXB0IEludGVyZmFjZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgRWhyZW5iZXJnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYmFzc2VtYmx5IHdlYiBhcGkiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvUkVDLXdhc20td2ViLWFwaS0xLTIwMTkxMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJBc3NlbWJseSBXZWIgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViQXNzZW1ibHkgV2ViIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViQXNzZW1ibHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTEyLTA1IC0gPGEgdGl0bGU9IldlYkFzc2VtYmx5IFdlYiBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dhc20td2ViLWFwaS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd2ViYXNzZW1ibHkuZ2l0aHViLmlvL3NwZWMvd2ViLWFwaS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViQXNzZW1ibHkgV2ViIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgRWhyZW5iZXJnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYmNnbSAxLjAgc2Vjb25kIHJlbGVhc2UiIGRhdGEtdGFnPSJncmFwaGljcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9TUFNELVdlYkNHTS0yMDE5MTIwNSIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJDR00gMS4wIFNlY29uZCBSZWxlYXNlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViQ0dNIDEuMCBTZWNvbmQgUmVsZWFzZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMTItMDUgLSA8YSB0aXRsZT0iV2ViQ0dNIDEuMCBTZWNvbmQgUmVsZWFzZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUkVDLVdlYkNHTSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIENydWlrc2hhbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Mb2Z0b24gSGVuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViY2dtIDIuMCIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1NQU0Qtd2ViY2dtMjAtMjAxOTEyMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYkNHTSAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJDR00mbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYkNHTSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMTItMDUgLSA8YSB0aXRsZT0iV2ViQ0dNIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2ViY2dtMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW5vaXQgQmV6YWlyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIENydWlrc2hhbmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Mb2Z0b24gSGVuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViYXNzZW1ibHkgY29yZSBzcGVjaWZpY2F0aW9uIiBkYXRhLXRhZz0icGVyZm9ybWFuY2UiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1JFQy13YXNtLWNvcmUtMS0yMDE5MTIwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViQXNzZW1ibHkgQ29yZSBTcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViQXNzZW1ibHkgQ29yZSBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWJBc3NlbWJseSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMTItMDUgLSA8YSB0aXRsZT0iV2ViQXNzZW1ibHkgQ29yZSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93YXNtLWNvcmUtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3dlYmFzc2VtYmx5LmdpdGh1Yi5pby9zcGVjL2NvcmUvYmlrZXNoZWQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYkFzc2VtYmx5IENvcmUgU3BlY2lmaWNhdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZWFzIFJvc3NiZXJnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY29udGVudCBuZWdvdGlhdGlvbiBieSBwcm9maWxlIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1keC1wcm9mLWNvbm5lZy0yMDE5MTEyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29udGVudCBOZWdvdGlhdGlvbiBieSBQcm9maWxlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29udGVudCBOZWdvdGlhdGlvbiBieSBQcm9maWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EYXRhc2V0IEV4Y2hhbmdlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMS0yNiAtIDxhIHRpdGxlPSJDb250ZW50IE5lZ290aWF0aW9uIGJ5IFByb2ZpbGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2R4LXByb2YtY29ubmVnIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9keHdnL2Nvbm5lZ3AvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENvbnRlbnQgTmVnb3RpYXRpb24gYnkgUHJvZmlsZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYXJzIEcuIFN2ZW5zc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmljaG9sYXMgQ2FyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHNwYXRpYWwgbmF2aWdhdGlvbiBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELWNzcy1uYXYtMS0yMDE5MTEyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFNwYXRpYWwgTmF2aWdhdGlvbiBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBTcGF0aWFsICBOYXZpZ2F0aW9uICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTExLTI2IC0gPGEgdGl0bGU9IkNTUyBTcGF0aWFsIE5hdmlnYXRpb24gTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLW5hdi0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtbmF2LTEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBTcGF0aWFsIE5hdmlnYXRpb24gTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KaWh5ZSBIb25nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmxvcmlhbiBSaXZvYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJoaWdoIHJlc29sdXRpb24gdGltZSIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9TUFNELWhyLXRpbWUtMS0yMDE5MTEyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSGlnaCBSZXNvbHV0aW9uIFRpbWUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IaWdoIFJlc29sdXRpb24gVGltZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMS0yMSAtIDxhIHRpdGxlPSJIaWdoIFJlc29sdXRpb24gVGltZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHItdGltZS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBNY0tlb3VnaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaGlnaCByZXNvbHV0aW9uIHRpbWUgbGV2ZWwgMiIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvUkVDLWhyLXRpbWUtMi0yMDE5MTEyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSGlnaCBSZXNvbHV0aW9uIFRpbWUgTGV2ZWwgMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhpZ2ggIFJlc29sdXRpb24gIFRpbWUgIExldmVsJm5ic3A7MjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMS0yMSAtIDxhIHRpdGxlPSJIaWdoIFJlc29sdXRpb24gVGltZSBMZXZlbCAyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9oci10aW1lLTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2hyLXRpbWUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEhpZ2ggUmVzb2x1dGlvbiBUaW1lIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWx5YSBHcmlnb3JpawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VydmljZSB3b3JrZXJzIDEiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9DUi1zZXJ2aWNlLXdvcmtlcnMtMS0yMDE5MTExOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2VydmljZSBXb3JrZXJzIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TZXJ2aWNlICBXb3JrZXJzJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VydmljZSBXb3JrZXJzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMS0xOSAtIDxhIHRpdGxlPSJTZXJ2aWNlIFdvcmtlcnMgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2VydmljZS13b3JrZXJzLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL1NlcnZpY2VXb3JrZXIvdjEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNlcnZpY2UgV29ya2VycyAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXggUnVzc2VsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1bmdrZWUgU29uZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpha2UgQXJjaGliYWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyaWpuIEtydWlzc2VsYnJpbmsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0cmFjZSBjb250ZXh0IHByb3RvY29scyByZWdpc3RyeSIgZGF0YS10YWc9InBlcmZvcm1hbmNlIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9OT1RFLXRyYWNlLWNvbnRleHQtcHJvdG9jb2xzLXJlZ2lzdHJ5LTIwMTkxMTE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUcmFjZSBDb250ZXh0IFByb3RvY29scyBSZWdpc3RyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRyYWNlIENvbnRleHQgUHJvdG9jb2xzIFJlZ2lzdHJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EaXN0cmlidXRlZCBUcmFjaW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMS0xOSAtIDxhIHRpdGxlPSJUcmFjZSBDb250ZXh0IFByb3RvY29scyBSZWdpc3RyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdHJhY2UtY29udGV4dC1wcm90b2NvbHMtcmVnaXN0cnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3RyYWNlLWNvbnRleHQtcHJvdG9jb2xzLXJlZ2lzdHJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUcmFjZSBDb250ZXh0IFByb3RvY29scyBSZWdpc3RyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZXJnZXkgS2FuemhlbGV2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbGlwcGUgTGUgSMOpZ2FyZXQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InZlcmlmaWFibGUgY3JlZGVudGlhbHMgZGF0YSBtb2RlbCAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1JFQy12Yy1kYXRhLW1vZGVsLTIwMTkxMTE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBWZXJpZmlhYmxlIENyZWRlbnRpYWxzIERhdGEgTW9kZWwgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VmVyaWZpYWJsZSAgQ3JlZGVudGlhbHMgIERhdGEgIE1vZGVsJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5WZXJpZmlhYmxlIENyZWRlbnRpYWxzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMS0xOSAtIDxhIHRpdGxlPSJWZXJpZmlhYmxlIENyZWRlbnRpYWxzIERhdGEgTW9kZWwgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92Yy1kYXRhLW1vZGVsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby92Yy1kYXRhLW1vZGVsLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBWZXJpZmlhYmxlIENyZWRlbnRpYWxzIERhdGEgTW9kZWwgMS4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbnUgU3Bvcm55CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JhbnQgTm9ibGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIExvbmdsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQnVybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyZW50IFp1bmRlbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgdGV4dCBtb2R1bGUgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELWNzcy10ZXh0LTQtMjAxOTExMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBUZXh0IE1vZHVsZSBMZXZlbCA0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBUZXh0ICBNb2R1bGUgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMTEtMTMgLSA8YSB0aXRsZT0iQ1NTIFRleHQgTW9kdWxlIExldmVsIDQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy10ZXh0LTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy10ZXh0LTQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBUZXh0IE1vZHVsZSBMZXZlbCA0Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktvamkgSXNoaWkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGFuIFN0ZWFybnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIG9mIHRoaW5ncyAod290KSBzZWN1cml0eSBhbmQgcHJpdmFjeSBndWlkZWxpbmVzIiBkYXRhLXRhZz0id290IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9OT1RFLXdvdC1zZWN1cml0eS0yMDE5MTEwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIG9mIFRoaW5ncyAoV29UKSBTZWN1cml0eSBhbmQgUHJpdmFjeSBHdWlkZWxpbmVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIG9mIFRoaW5ncyAoV29UKSBTZWN1cml0eSBhbmQgUHJpdmFjeSBHdWlkZWxpbmVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgb2YgVGhpbmdzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMS0wNiAtIDxhIHRpdGxlPSJXZWIgb2YgVGhpbmdzIChXb1QpIFNlY3VyaXR5IGFuZCBQcml2YWN5IEd1aWRlbGluZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dvdC1zZWN1cml0eSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd290LXNlY3VyaXR5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgb2YgVGhpbmdzIChXb1QpIFNlY3VyaXR5IGFuZCBQcml2YWN5IEd1aWRlbGluZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxlbmEgUmVzaGV0b3ZhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBNY0Nvb2wKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFjY2Vzc2liaWxpdHkgY29uZm9ybWFuY2UgdGVzdGluZyAoYWN0KSBydWxlcyBmb3JtYXQgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvUkVDLWFjdC1ydWxlcy1mb3JtYXQtMS4wLTIwMTkxMDMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY2Nlc3NpYmlsaXR5IENvbmZvcm1hbmNlIFRlc3RpbmcgKEFDVCkgUnVsZXMgRm9ybWF0IDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFjY2Vzc2liaWxpdHkgIENvbmZvcm1hbmNlICBUZXN0aW5nICAoQUNUKSAgUnVsZXMgIEZvcm1hdCZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0xMC0zMSAtIDxhIHRpdGxlPSJBY2Nlc3NpYmlsaXR5IENvbmZvcm1hbmNlIFRlc3RpbmcgKEFDVCkgUnVsZXMgRm9ybWF0IDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWN0LXJ1bGVzLWZvcm1hdC0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3djYWctYWN0L2FjdC1ydWxlcy1mb3JtYXQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBY2Nlc3NpYmlsaXR5IENvbmZvcm1hbmNlIFRlc3RpbmcgKEFDVCkgUnVsZXMgRm9ybWF0IDEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XaWxjbyBGaWVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdXJlZW4gS3JhZnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ5IEpvIE11ZWxsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFkaSBBYm91LVphaHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYnhyIGF1Z21lbnRlZCByZWFsaXR5IG1vZHVsZSAtIGxldmVsIDEiIGRhdGEtdGFnPSJncmFwaGljcyB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvV0Qtd2VieHItYXItbW9kdWxlLTEtMjAxOTEwMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYlhSIEF1Z21lbnRlZCBSZWFsaXR5IE1vZHVsZSAtIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJYUiAgQXVnbWVudGVkICBSZWFsaXR5ICBNb2R1bGUgIC0gIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW1tZXJzaXZlIFdlYiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMTAtMTAgLSA8YSB0aXRsZT0iV2ViWFIgQXVnbWVudGVkIFJlYWxpdHkgTW9kdWxlIC0gTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VieHItYXItbW9kdWxlLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9pbW1lcnNpdmUtd2ViLmdpdGh1Yi5pby93ZWJ4ci1hci1tb2R1bGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYlhSIEF1Z21lbnRlZCBSZWFsaXR5IE1vZHVsZSAtIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnJhbmRvbiBKb25lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5lbGwgV2FsaWN6ZWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYW5pc2ggR29yZWdhb2thcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2VieHIgZ2FtZXBhZHMgbW9kdWxlIC0gbGV2ZWwgMSIgZGF0YS10YWc9ImdyYXBoaWNzIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC13ZWJ4ci1nYW1lcGFkcy1tb2R1bGUtMS0yMDE5MTAxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViWFIgR2FtZXBhZHMgTW9kdWxlIC0gTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYlhSICBHYW1lcGFkcyAgTW9kdWxlICAtICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkltbWVyc2l2ZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTEwLTEwIC0gPGEgdGl0bGU9IldlYlhSIEdhbWVwYWRzIE1vZHVsZSAtIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYnhyLWdhbWVwYWRzLW1vZHVsZS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vaW1tZXJzaXZlLXdlYi5naXRodWIuaW8vd2VieHItZ2FtZXBhZHMtbW9kdWxlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJYUiBHYW1lcGFkcyBNb2R1bGUgLSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyYW5kb24gSm9uZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OZWxsIFdhbGljemVrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idmVyaWZpYWJsZSBjcmVkZW50aWFscyBpbXBsZW1lbnRhdGlvbiBndWlkZWxpbmVzIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvTk9URS12Yy1pbXAtZ3VpZGUtMjAxOTA5MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZlcmlmaWFibGUgQ3JlZGVudGlhbHMgSW1wbGVtZW50YXRpb24gR3VpZGVsaW5lcyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5WZXJpZmlhYmxlICBDcmVkZW50aWFscyAgSW1wbGVtZW50YXRpb24gIEd1aWRlbGluZXMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZlcmlmaWFibGUgQ3JlZGVudGlhbHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA5LTI0IC0gPGEgdGl0bGU9IlZlcmlmaWFibGUgQ3JlZGVudGlhbHMgSW1wbGVtZW50YXRpb24gR3VpZGVsaW5lcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZjLWltcC1ndWlkZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vdmMtaW1wLWd1aWRlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBWZXJpZmlhYmxlIENyZWRlbnRpYWxzIEltcGxlbWVudGF0aW9uIEd1aWRlbGluZXMgMS4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHJlaSBTYW1icmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ2ZXJpZmlhYmxlIGNyZWRlbnRpYWxzIHVzZSBjYXNlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvTk9URS12Yy11c2UtY2FzZXMtMjAxOTA5MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZlcmlmaWFibGUgQ3JlZGVudGlhbHMgVXNlIENhc2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VmVyaWZpYWJsZSBDcmVkZW50aWFscyBVc2UgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZlcmlmaWFibGUgQ3JlZGVudGlhbHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA5LTI0IC0gPGEgdGl0bGU9IlZlcmlmaWFibGUgQ3JlZGVudGlhbHMgVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92Yy11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3ZjLXVzZS1jYXNlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVmVyaWZpYWJsZSBDcmVkZW50aWFscyBVc2UgQ2FzZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2UgQW5kcmlldQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgU3RvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UenZpeWEgU2llZ21hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWdnIEtlbGxvZ2cKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UZWQgVGhpYm9kZWF1CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWluaWFwcCBzdGFuZGFyZGl6YXRpb24gd2hpdGUgcGFwZXIiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvV0QtbWluaS1hcHAtd2hpdGUtcGFwZXItMjAxOTA5MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1pbmlBcHAgU3RhbmRhcmRpemF0aW9uIFdoaXRlIFBhcGVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWluaUFwcCBTdGFuZGFyZGl6YXRpb24gV2hpdGUgUGFwZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNoaW5lc2UgV2ViIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDktMTIgLSA8YSB0aXRsZT0iTWluaUFwcCBTdGFuZGFyZGl6YXRpb24gV2hpdGUgUGFwZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21pbmktYXBwLXdoaXRlLXBhcGVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9taW5pLWFwcC13aGl0ZS1wYXBlci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWluaUFwcCBTdGFuZGFyZGl6YXRpb24gV2hpdGUgUGFwZXIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5nZWwgTGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5RaW5nIEFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFwZW5nIExpdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhvbmdydSAoSnVkeSkgWmh1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UWluZ3FpYW4gVGFvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WmhpeGluZyBMZWkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aaG91IFNoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aaGlxaWFuZyBZdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldhbm1pbmcgTGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+eGlhb3dlaSBqaWFuZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZ1cWlhbyBYdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MZWkgWmhhbwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBheW1lbnQgbWV0aG9kIGlkZW50aWZpZXJzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvQ1ItcGF5bWVudC1tZXRob2QtaWQtMjAxOTA5MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBheW1lbnQgTWV0aG9kIElkZW50aWZpZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGF5bWVudCBNZXRob2QgSWRlbnRpZmllcnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQYXltZW50cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDktMDUgLSA8YSB0aXRsZT0iUGF5bWVudCBNZXRob2QgSWRlbnRpZmllcnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BheW1lbnQtbWV0aG9kLWlkIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wYXltZW50LW1ldGhvZC1pZC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUGF5bWVudCBNZXRob2QgSWRlbnRpZmllcnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb21lbmljIERlbmljb2xhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WmFjaCBLb2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um95IE1jRWxtdXJyeQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByb251bmNpYXRpb24gdXNlciBzY2VuYXJpb3MiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELXByb251bmNpYXRpb24tdXNlci1zY2VuYXJpb3MtMjAxOTA5MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByb251bmNpYXRpb24gVXNlciBTY2VuYXJpb3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qcm9udW5jaWF0aW9uIFVzZXIgU2NlbmFyaW9zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFBsYXRmb3JtIEFyY2hpdGVjdHVyZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA5LTA1IC0gPGEgdGl0bGU9IlByb251bmNpYXRpb24gVXNlciBTY2VuYXJpb3MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb251bmNpYXRpb24tdXNlci1zY2VuYXJpb3MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3Byb251bmNpYXRpb24vdXNlci1zY2VuYXJpb3MiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUHJvbnVuY2lhdGlvbiBVc2VyIFNjZW5hcmlvcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JcmZhbiBBbGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW0gS2FudGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpc3RpbmUgTG9ldwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgR3JlbmllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ1b3hpIFJhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwb2ludGVyIGxvY2sgMi4wIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvV0QtcG9pbnRlcmxvY2stMi0yMDE5MDgyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUG9pbnRlciBMb2NrIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvaW50ZXIgIExvY2smbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA4LTI4IC0gPGEgdGl0bGU9IlBvaW50ZXIgTG9jayAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BvaW50ZXJsb2NrLTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BvaW50ZXJsb2NrLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQb2ludGVyIExvY2sgMi4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5hdmlkIFpvbGdoYWRyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3YWktYXJpYSBhdXRob3JpbmcgcHJhY3RpY2VzIDEuMSIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L05PVEUtd2FpLWFyaWEtcHJhY3RpY2VzLTEuMS0yMDE5MDgxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV0FJLUFSSUEgQXV0aG9yaW5nIFByYWN0aWNlcyAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XQUktQVJJQSAgQXV0aG9yaW5nICBQcmFjdGljZXMmbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA4LTE0IC0gPGEgdGl0bGU9IldBSS1BUklBIEF1dGhvcmluZyBQcmFjdGljZXMgMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93YWktYXJpYS1wcmFjdGljZXMtMS4xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hcmlhLXByYWN0aWNlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV0FJLUFSSUEgQXV0aG9yaW5nIFByYWN0aWNlcyAxLjEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dGhldyBLaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFFdW4gSmVtbWEgS3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW1lcyBOdXJ0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Wm/DqyBCaWpsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3NlcGggU2NoZXVoYW1tZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MaXNhIFBhcHBhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgU2Nod2VyZHRmZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgdGV4dCBkZWNvcmF0aW9uIG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvQ1ItY3NzLXRleHQtZGVjb3ItMy0yMDE5MDgxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFRleHQgRGVjb3JhdGlvbiBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgVGV4dCAgRGVjb3JhdGlvbiAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA4LTEzIC0gPGEgdGl0bGU9IkNTUyBUZXh0IERlY29yYXRpb24gTW9kdWxlIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy10ZXh0LWRlY29yLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy10ZXh0LWRlY29yLTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBUZXh0IERlY29yYXRpb24gTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S29qaSBJc2hpaQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBwdWJsaWNhdGlvbnMiIGRhdGEtdGFnPSJkcHViIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L05PVEUtd3B1Yi0yMDE5MDgxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFB1YmxpY2F0aW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBQdWJsaWNhdGlvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1ZGlvYm9va3MgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA4LTEzIC0gPGEgdGl0bGU9IldlYiBQdWJsaWNhdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dwdWIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dwdWIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBQdWJsaWNhdGlvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBHYXJyaXNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXZhbiBIZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHB1YmxpY2F0aW9ucyB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRwdWIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvTk9URS1wd3AtdWNyLTIwMTkwODEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgUHVibGljYXRpb25zIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFB1YmxpY2F0aW9ucyBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXVkaW9ib29rcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDgtMTMgLSA8YSB0aXRsZT0iV2ViIFB1YmxpY2F0aW9ucyBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHdwLXVjciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZHB1Yi1wd3AtdWNyLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgUHVibGljYXRpb25zIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyYW5jbyBBbHZhcmFkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2h1YSBQeWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGdlbmVyYXRlZCBjb250ZW50IG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELWNzcy1jb250ZW50LTMtMjAxOTA4MDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBHZW5lcmF0ZWQgQ29udGVudCBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgR2VuZXJhdGVkICBDb250ZW50ICBNb2R1bGUgIExldmVsJm5ic3A7MzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDgtMDIgLSA8YSB0aXRsZT0iQ1NTIEdlbmVyYXRlZCBDb250ZW50IE1vZHVsZSBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtY29udGVudC0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY29udGVudC0zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgR2VuZXJhdGVkIENvbnRlbnQgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBDcmFtZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHdyaXRpbmcgbW9kZXMgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L0NSLWNzcy13cml0aW5nLW1vZGVzLTQtMjAxOTA3MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBXcml0aW5nIE1vZGVzIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFdyaXRpbmcgIE1vZGVzICBMZXZlbCZuYnNwOzQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA3LTMwIC0gPGEgdGl0bGU9IkNTUyBXcml0aW5nIE1vZGVzIExldmVsIDQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy13cml0aW5nLW1vZGVzLTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy13cml0aW5nLW1vZGVzLTQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBXcml0aW5nIE1vZGVzIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S29qaSBJc2hpaQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB0YWJsZSBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1jc3MtdGFibGVzLTMtMjAxOTA3MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBUYWJsZSBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgVGFibGUgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNy0yNyAtIDxhIHRpdGxlPSJDU1MgVGFibGUgTW9kdWxlIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy10YWJsZXMtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXRhYmxlcy0zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgVGFibGUgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJhbsOnb2lzIFJlbXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnIFdoaXR3b3J0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIEJhcm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aW1pbmcgZW50cnkgbmFtZXMgcmVnaXN0cnkiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC10aW1pbmctZW50cnl0eXBlcy1yZWdpc3RyeS0yMDE5MDcyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGltaW5nIEVudHJ5IE5hbWVzIFJlZ2lzdHJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGltaW5nIEVudHJ5IE5hbWVzIFJlZ2lzdHJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA3LTIzIC0gPGEgdGl0bGU9IlRpbWluZyBFbnRyeSBOYW1lcyBSZWdpc3RyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdGltaW5nLWVudHJ5dHlwZXMtcmVnaXN0cnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3RpbWluZy1lbnRyeXR5cGVzLXJlZ2lzdHJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUaW1pbmcgRW50cnkgTmFtZXMgUmVnaXN0cnkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbGlwcGUgTGUgSMOpZ2FyZXQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBzeW50YXggbW9kdWxlIGxldmVsIDMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9DUi1jc3Mtc3ludGF4LTMtMjAxOTA3MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBTeW50YXggTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFN5bnRheCAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA3LTE2IC0gPGEgdGl0bGU9IkNTUyBTeW50YXggTW9kdWxlIExldmVsIDMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1zeW50YXgtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFN5bnRheCBNb2R1bGUgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFNhcGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBlcnNvbmFsaXphdGlvbiBoZWxwIGFuZCBzdXBwb3J0IDEuMCIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvV0QtcGVyc29uYWxpemF0aW9uLXNlbWFudGljcy1oZWxwLTEuMC0yMDE5MDcxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGVyc29uYWxpemF0aW9uIEhlbHAgYW5kIFN1cHBvcnQgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGVyc29uYWxpemF0aW9uICBIZWxwICBhbmQgIFN1cHBvcnQmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUGxhdGZvcm0gQXJjaGl0ZWN0dXJlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDctMTEgLSA8YSB0aXRsZT0iUGVyc29uYWxpemF0aW9uIEhlbHAgYW5kIFN1cHBvcnQgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wZXJzb25hbGl6YXRpb24tc2VtYW50aWNzLWhlbHAtMS4wIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wZXJzb25hbGl6YXRpb24tc2VtYW50aWNzL2hlbHAvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBlcnNvbmFsaXphdGlvbiBIZWxwIGFuZCBTdXBwb3J0IDEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MaXNhIFNlZW1hbi1Ib3J3aXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBMYVBpZXJyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UnVveGkgUmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBTY2h3ZXJkdGZlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFjY2Vzc2libGUgbmFtZSBhbmQgZGVzY3JpcHRpb24gY29tcHV0YXRpb24gMS4yIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELWFjY25hbWUtMS4yLTIwMTkwNzExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY2Nlc3NpYmxlIE5hbWUgYW5kIERlc2NyaXB0aW9uIENvbXB1dGF0aW9uIDEuMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFjY2Vzc2libGUgIE5hbWUgIGFuZCAgRGVzY3JpcHRpb24gIENvbXB1dGF0aW9uJm5ic3A7MS4yPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNy0xMSAtIDxhIHRpdGxlPSJBY2Nlc3NpYmxlIE5hbWUgYW5kIERlc2NyaXB0aW9uIENvbXB1dGF0aW9uIDEuMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWNjbmFtZS0xLjIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FjY25hbWUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEFjY2Vzc2libGUgTmFtZSBhbmQgRGVzY3JpcHRpb24gQ29tcHV0YXRpb24gMS4yIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyeWFuIEdhcmF2ZW50YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvYW5tYXJpZSBEaWdncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwZXJzb25hbGl6YXRpb24gdG9vbHMgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1wZXJzb25hbGl6YXRpb24tc2VtYW50aWNzLXRvb2xzLTEuMC0yMDE5MDcxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGVyc29uYWxpemF0aW9uIFRvb2xzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBlcnNvbmFsaXphdGlvbiAgVG9vbHMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUGxhdGZvcm0gQXJjaGl0ZWN0dXJlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDctMTEgLSA8YSB0aXRsZT0iUGVyc29uYWxpemF0aW9uIFRvb2xzIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcGVyc29uYWxpemF0aW9uLXNlbWFudGljcy10b29scy0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BlcnNvbmFsaXphdGlvbi1zZW1hbnRpY3MvdG9vbHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBlcnNvbmFsaXphdGlvbiBUb29scyAxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGlzYSBTZWVtYW4tSG9yd2l0egogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNoYXJsZXMgTGFQaWVycmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJ1b3hpIFJhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgU2Nod2VyZHRmZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcmVsb2FkIiBkYXRhLXRhZz0icGVyZm9ybWFuY2UiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9DUi1wcmVsb2FkLTIwMTkwNjI2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcmVsb2FkIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJlbG9hZDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNi0yNiAtIDxhIHRpdGxlPSJQcmVsb2FkIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcmVsb2FkIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wcmVsb2FkLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQcmVsb2FkIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb2F2IFdlaXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGFuaW1hdGlvbiB3b3JrbGV0IGFwaSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1jc3MtYW5pbWF0aW9uLXdvcmtsZXQtMS0yMDE5MDYyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEFuaW1hdGlvbiBXb3JrbGV0IEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBBbmltYXRpb24gV29ya2xldCBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA2LTI1IC0gPGEgdGl0bGU9IkNTUyBBbmltYXRpb24gV29ya2xldCBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1hbmltYXRpb24td29ya2xldC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzcy1ob3VkaW5pLm9yZy9jc3MtYW5pbWF0aW9ud29ya2xldC0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQW5pbWF0aW9uIFdvcmtsZXQgQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hamlkIFZhbGlwb3VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iZXJ0IEZsYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RlcGhlbiBNY0dydWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzdHJpbmdzIG9uIHRoZSB3ZWI6IGxhbmd1YWdlIGFuZCBkaXJlY3Rpb24gbWV0YWRhdGEiIGRhdGEtdGFnPSJkYXRhIGkxOG4gbWVkaWEgd2ViYXBpIHdvdCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1zdHJpbmctbWV0YS0yMDE5MDYxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU3RyaW5ncyBvbiB0aGUgV2ViOiBMYW5ndWFnZSBhbmQgRGlyZWN0aW9uIE1ldGFkYXRhIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U3RyaW5ncyBvbiB0aGUgV2ViOiBMYW5ndWFnZSBhbmQgRGlyZWN0aW9uIE1ldGFkYXRhPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDYtMTEgLSA8YSB0aXRsZT0iU3RyaW5ncyBvbiB0aGUgV2ViOiBMYW5ndWFnZSBhbmQgRGlyZWN0aW9uIE1ldGFkYXRhIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zdHJpbmctbWV0YSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vc3RyaW5nLW1ldGEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFN0cmluZ3Mgb24gdGhlIFdlYjogTGFuZ3VhZ2UgYW5kIERpcmVjdGlvbiBNZXRhZGF0YSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGRpc29uIFBoaWxsaXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3b3QiPldvVAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3Mgb3ZlcnNjcm9sbCBiZWhhdmlvciBtb2R1bGUgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1jc3Mtb3ZlcnNjcm9sbC0xLTIwMTkwNjA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgT3ZlcnNjcm9sbCBCZWhhdmlvciBNb2R1bGUgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgT3ZlcnNjcm9sbCAgQmVoYXZpb3IgIE1vZHVsZSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNi0wNiAtIDxhIHRpdGxlPSJDU1MgT3ZlcnNjcm9sbCBCZWhhdmlvciBNb2R1bGUgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLW92ZXJzY3JvbGwtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLW92ZXJzY3JvbGwtMS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIE92ZXJzY3JvbGwgQmVoYXZpb3IgTW9kdWxlIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFqaWQgVmFsaXBvdXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHZhbHVlcyBhbmQgdW5pdHMgbW9kdWxlIGxldmVsIDMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9DUi1jc3MtdmFsdWVzLTMtMjAxOTA2MDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBWYWx1ZXMgYW5kIFVuaXRzIE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBWYWx1ZXMgIGFuZCAgVW5pdHMgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNi0wNiAtIDxhIHRpdGxlPSJDU1MgVmFsdWVzIGFuZCBVbml0cyBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXZhbHVlcy0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBWYWx1ZXMgYW5kIFVuaXRzIE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImlucHV0IGV2ZW50cyBsZXZlbCAyIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvV0QtaW5wdXQtZXZlbnRzLTItMjAxOTA1MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIElucHV0IEV2ZW50cyBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SW5wdXQgIEV2ZW50cyAgTGV2ZWwmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNS0zMCAtIDxhIHRpdGxlPSJJbnB1dCBFdmVudHMgTGV2ZWwgMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaW5wdXQtZXZlbnRzLTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2lucHV0LWV2ZW50cy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSW5wdXQgRXZlbnRzIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9oYW5uZXMgV2lsbQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idWkgZXZlbnRzIiBkYXRhLXRhZz0iZG9tIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELXVpZXZlbnRzLTIwMTkwNTMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVSSBFdmVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5VSSBFdmVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA1LTMwIC0gPGEgdGl0bGU9IlVJIEV2ZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdWlldmVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3VpZXZlbnRzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBVSSBFdmVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2FyeSBLYWNtYXJjaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UcmF2aXMgTGVpdGhlYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb3VnIFNjaGVwZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW5wdXQgZXZlbnRzIGxldmVsIDEiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1pbnB1dC1ldmVudHMtMS0yMDE5MDUzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW5wdXQgRXZlbnRzIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbnB1dCAgRXZlbnRzICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA1LTMwIC0gPGEgdGl0bGU9IklucHV0IEV2ZW50cyBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9pbnB1dC1ldmVudHMtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2Nkbi5zdGF0aWNhbHkuY29tL2doL3czYy9pbnB1dC1ldmVudHMvdjEvaW5kZXguaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbnB1dCBFdmVudHMgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbm5lcyBXaWxtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVuIFBldGVycwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjaGFyYWN0ZXIgbW9kZWwgZm9yIHRoZSB3b3JsZCB3aWRlIHdlYiAxLjA6IHJlc291cmNlIGlkZW50aWZpZXJzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9OT1RFLWNoYXJtb2QtcmVzaWQtMjAxOTA1MDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViIDEuMDogUmVzb3VyY2UgSWRlbnRpZmllcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DaGFyYWN0ZXIgTW9kZWwgZm9yIHRoZSBXb3JsZCBXaWRlIFdlYiAxLjA6IFJlc291cmNlIElkZW50aWZpZXJzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDUtMDIgLSA8YSB0aXRsZT0iQ2hhcmFjdGVyIE1vZGVsIGZvciB0aGUgV29ybGQgV2lkZSBXZWIgMS4wOiBSZXNvdXJjZSBJZGVudGlmaWVycyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2hhcm1vZC1yZXNpZCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFjY2Vzc2liaWxpdHkgY29uZm9ybWFuY2UgdGVzdGluZyAoYWN0KSBydWxlczogY29tbW9uIGlucHV0IGFzcGVjdHMiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9OT1RFLWFjdC1ydWxlcy1hc3BlY3RzLTIwMTkwNDE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY2Nlc3NpYmlsaXR5IENvbmZvcm1hbmNlIFRlc3RpbmcgKEFDVCkgUnVsZXM6IENvbW1vbiBJbnB1dCBBc3BlY3RzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QWNjZXNzaWJpbGl0eSBDb25mb3JtYW5jZSBUZXN0aW5nIChBQ1QpIFJ1bGVzOiBDb21tb24gSW5wdXQgQXNwZWN0czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNC0xNiAtIDxhIHRpdGxlPSJBY2Nlc3NpYmlsaXR5IENvbmZvcm1hbmNlIFRlc3RpbmcgKEFDVCkgUnVsZXM6IENvbW1vbiBJbnB1dCBBc3BlY3RzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hY3QtcnVsZXMtYXNwZWN0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2NhZy1hY3QvTk9URS1hY3QtcnVsZXMtY29tbW9uLWFzcGVjdHMuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBY2Nlc3NpYmlsaXR5IENvbmZvcm1hbmNlIFRlc3RpbmcgKEFDVCkgUnVsZXM6IENvbW1vbiBJbnB1dCBBc3BlY3RzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldpbGNvIEZpZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF1cmVlbiBLcmFmdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnkgSm8gTXVlbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYWRpIEFib3UtWmFocmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGV2aWNlb3JpZW50YXRpb24gZXZlbnQgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9XRC1vcmllbnRhdGlvbi1ldmVudC0yMDE5MDQxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGV2aWNlT3JpZW50YXRpb24gRXZlbnQgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRldmljZU9yaWVudGF0aW9uIEV2ZW50IFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTA0LTE2IC0gPGEgdGl0bGU9IkRldmljZU9yaWVudGF0aW9uIEV2ZW50IFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L29yaWVudGF0aW9uLWV2ZW50Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kZXZpY2VvcmllbnRhdGlvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRGV2aWNlT3JpZW50YXRpb24gRXZlbnQgU3BlY2lmaWNhdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoIFRpYmJldHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaW0gVm9sb2RpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGVwaGVuIEJsb2NrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVpIFBvcGVzY3UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJ2dHQ6IHRoZSB3ZWIgdmlkZW8gdGV4dCB0cmFja3MgZm9ybWF0IiBkYXRhLXRhZz0iY3NzIGdyYXBoaWNzIGh0bWwiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9DUi13ZWJ2dHQxLTIwMTkwNDA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJWVFQ6IFRoZSBXZWIgVmlkZW8gVGV4dCBUcmFja3MgRm9ybWF0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViVlRUOiBUaGUgV2ViIFZpZGVvIFRleHQgVHJhY2tzIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGltZWQgVGV4dCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDQtMDQgLSA8YSB0aXRsZT0iV2ViVlRUOiBUaGUgV2ViIFZpZGVvIFRleHQgVHJhY2tzIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VidnR0MSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2VidnR0LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJWVFQ6IFRoZSBXZWIgVmlkZW8gVGV4dCBUcmFja3MgRm9ybWF0Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbHZpYSBQZmVpZmZlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBvaW50ZXIgZXZlbnRzIiBkYXRhLXRhZz0iZG9tIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9TUFNELXBvaW50ZXJldmVudHMxLTIwMTkwNDA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQb2ludGVyIEV2ZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvaW50ZXIgRXZlbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Qb2ludGVyIEV2ZW50cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDQtMDQgLSA8YSB0aXRsZT0iUG9pbnRlciBFdmVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BvaW50ZXJldmVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy9wb2ludGVyZXZlbnRzL3Jhdy1maWxlL3RpcC9wb2ludGVyRXZlbnRzLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUG9pbnRlciBFdmVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFjb2IgUm9zc2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0IEJydWJlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBvaW50ZXIgZXZlbnRzIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9SRUMtcG9pbnRlcmV2ZW50czItMjAxOTA0MDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBvaW50ZXIgRXZlbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UG9pbnRlciBFdmVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlBvaW50ZXIgRXZlbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wNC0wNCAtIDxhIHRpdGxlPSJQb2ludGVyIEV2ZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcG9pbnRlcmV2ZW50czIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BvaW50ZXJldmVudHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBvaW50ZXIgRXZlbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgQnJ1YmVjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2sgQnllcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXRyaWNrIExhdWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmF2aWQgWm9sZ2hhZHIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJub24tZWxlbWVudCBzZWxlY3RvcnMgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvTk9URS1zZWxlY3RvcnMtbm9uZWxlbWVudC0xLTIwMTkwNDAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBOb24tZWxlbWVudCBTZWxlY3RvcnMgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Ob24tZWxlbWVudCAgU2VsZWN0b3JzICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDQtMDIgLSA8YSB0aXRsZT0iTm9uLWVsZW1lbnQgU2VsZWN0b3JzIE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zZWxlY3RvcnMtbm9uZWxlbWVudC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtbm9uZWxlbWVudC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTm9uLWVsZW1lbnQgU2VsZWN0b3JzIE1vZHVsZSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppcmthIEtvc2VrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzdmcgZmlsdGVyIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L05PVEUtU1ZHRmlsdGVyUmVxczEyLTIwMTkwMzI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTVkcgRmlsdGVyIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNWRyBGaWx0ZXIgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTAzLTI4IC0gPGEgdGl0bGU9IlNWRyBGaWx0ZXIgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkdGaWx0ZXJSZXFzMTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmlrIERhaGxzdHLDtm0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWVkaWEgYWNjZXNzIGV2ZW50cyIgZGF0YS10YWc9ImRvbSBncmFwaGljcyBtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9OT1RFLU1lZGlhQWNjZXNzRXZlbnRzLTIwMTkwMzI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNZWRpYSBBY2Nlc3MgRXZlbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWEgQWNjZXNzIEV2ZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wMy0yOCAtIDxhIHRpdGxlPSJNZWRpYSBBY2Nlc3MgRXZlbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9NZWRpYUFjY2Vzc0V2ZW50cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9sYSBBbmRlcnNzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZWFuLUNsYXVkZSBEdWZvdXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1pdGlnYXRpbmcgYnJvd3NlciBmaW5nZXJwcmludGluZyBpbiB3ZWIgc3BlY2lmaWNhdGlvbnMiIGRhdGEtdGFnPSJwcml2YWN5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9OT1RFLWZpbmdlcnByaW50aW5nLWd1aWRhbmNlLTIwMTkwMzI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNaXRpZ2F0aW5nIEJyb3dzZXIgRmluZ2VycHJpbnRpbmcgaW4gV2ViIFNwZWNpZmljYXRpb25zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWl0aWdhdGluZyBCcm93c2VyIEZpbmdlcnByaW50aW5nIGluIFdlYiBTcGVjaWZpY2F0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJpdmFjeSBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTAzLTI4IC0gPGEgdGl0bGU9Ik1pdGlnYXRpbmcgQnJvd3NlciBGaW5nZXJwcmludGluZyBpbiBXZWIgU3BlY2lmaWNhdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2ZpbmdlcnByaW50aW5nLWd1aWRhbmNlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9maW5nZXJwcmludGluZy1ndWlkYW5jZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWl0aWdhdGluZyBCcm93c2VyIEZpbmdlcnByaW50aW5nIGluIFdlYiBTcGVjaWZpY2F0aW9ucyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OaWNrIERvdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwcml2YWN5Ij5Qcml2YWN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBhdXRoZW50aWNhdGlvbjphbiBhcGkgZm9yIGFjY2Vzc2luZyBwdWJsaWMga2V5IGNyZWRlbnRpYWxzIGxldmVsIDEiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9SRUMtd2ViYXV0aG4tMS0yMDE5MDMwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIEF1dGhlbnRpY2F0aW9uOkFuIEFQSSBmb3IgYWNjZXNzaW5nIFB1YmxpYyBLZXkgQ3JlZGVudGlhbHMgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiAgQXV0aGVudGljYXRpb246QW4gIEFQSSAgZm9yICBhY2Nlc3NpbmcgIFB1YmxpYyAgS2V5ICBDcmVkZW50aWFscyAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXV0aGVudGljYXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTAzLTA0IC0gPGEgdGl0bGU9IldlYiBBdXRoZW50aWNhdGlvbjpBbiBBUEkgZm9yIGFjY2Vzc2luZyBQdWJsaWMgS2V5IENyZWRlbnRpYWxzIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmF1dGhuLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmF1dGhuLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQXV0aGVudGljYXRpb246QW4gQVBJIGZvciBhY2Nlc3NpbmcgUHVibGljIEtleSBDcmVkZW50aWFscyBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpcmsgQmFsZmFuegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXhlaSBDemVza2lzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVmZiBIb2RnZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KLkMuIEpvbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBKb25lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFrc2hheSBLdW1hcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkh1YWthaSBMaWFvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9sZiBMaW5kZW1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbWlsIEx1bmRiZXJnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2VyIHRpbWluZyBsZXZlbCAyIiBkYXRhLXRhZz0icGVyZm9ybWFuY2Ugd2ViYXBpIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9SRUMtdXNlci10aW1pbmctMi0yMDE5MDIyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNlciBUaW1pbmcgTGV2ZWwgMiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVzZXIgIFRpbWluZyAgTGV2ZWwmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTAyLTI2IC0gPGEgdGl0bGU9IlVzZXIgVGltaW5nIExldmVsIDIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3VzZXItdGltaW5nLTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3VzZXItdGltaW5nLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBVc2VyIFRpbWluZyBMZXZlbCAyIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVzZXIgdGltaW5nIiBkYXRhLXRhZz0icGVyZm9ybWFuY2Ugd2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1NQU0QtdXNlci10aW1pbmctMS0yMDE5MDIyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNlciBUaW1pbmcgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2VyIFRpbWluZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wMi0yNiAtIDxhIHRpdGxlPSJVc2VyIFRpbWluZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdXNlci10aW1pbmctMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aaGloZW5nIFdhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRlcnNvbiBRdWFjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHRyYW5zZm9ybXMgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOS9DUi1jc3MtdHJhbnNmb3Jtcy0xLTIwMTkwMjE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgVHJhbnNmb3JtcyBNb2R1bGUgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgVHJhbnNmb3JtcyAgTW9kdWxlICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE5LTAyLTE0IC0gPGEgdGl0bGU9IkNTUyBUcmFuc2Zvcm1zIE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtdHJhbnNmb3Jtcy0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdHJhbnNmb3Jtcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFRyYW5zZm9ybXMgTW9kdWxlIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2ltb24gRnJhc2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVhbiBKYWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlcmVzYSBPJiMwMzk7Q29ubm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGlyayBTY2h1bHplCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idHJhY2tpbmcgY29tcGxpYW5jZSBhbmQgc2NvcGUiIGRhdGEtdGFnPSJodHRwIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L05PVEUtdHJhY2tpbmctY29tcGxpYW5jZS0yMDE5MDEyMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVHJhY2tpbmcgQ29tcGxpYW5jZSBhbmQgU2NvcGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UcmFja2luZyBDb21wbGlhbmNlIGFuZCBTY29wZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VHJhY2tpbmcgUHJvdGVjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDEtMjIgLSA8YSB0aXRsZT0iVHJhY2tpbmcgQ29tcGxpYW5jZSBhbmQgU2NvcGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RyYWNraW5nLWNvbXBsaWFuY2UiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnLzIwMTEvdHJhY2tpbmctcHJvdGVjdGlvbi9kcmFmdHMvdHJhY2tpbmctY29tcGxpYW5jZS5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRyYWNraW5nIENvbXBsaWFuY2UgYW5kIFNjb3BlIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5pY2sgRG90eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlYXRoZXIgV2VzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1c3RpbiBCcm9va21hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNlYW4gSGFydmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpY2EgTmV3bGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0dHAiPkhUVFAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHNuYXBzaG90IDIwMTgiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvTk9URS1jc3MtMjAxOC0yMDE5MDEyMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFNuYXBzaG90IDIwMTggZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgU25hcHNob3QgMjAxODwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDEtMjIgLSA8YSB0aXRsZT0iQ1NTIFNuYXBzaG90IDIwMTggcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy0yMDE4Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtMjAxOC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFNuYXBzaG90IDIwMTgiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGF0YXNldCBleGNoYW5nZSB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L05PVEUtZGNhdC11Y3ItMjAxOTAxMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERhdGFzZXQgRXhjaGFuZ2UgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EYXRhc2V0IEV4Y2hhbmdlIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EYXRhc2V0IEV4Y2hhbmdlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wMS0xNyAtIDxhIHRpdGxlPSJEYXRhc2V0IEV4Y2hhbmdlIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kY2F0LXVjciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZHh3Zy91Y3IvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIERhdGFzZXQgRXhjaGFuZ2UgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFyb3NsYXYgUHVsbG1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2IgQXRraW5zb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRvaW5lIElzYWFjCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXhjaGVsIEZhbmllbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjcmVkZW50aWFsIG1hbmFnZW1lbnQgbGV2ZWwgMSIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE5L1dELWNyZWRlbnRpYWwtbWFuYWdlbWVudC0xLTIwMTkwMTE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDcmVkZW50aWFsIE1hbmFnZW1lbnQgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNyZWRlbnRpYWwgIE1hbmFnZW1lbnQgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOS0wMS0xNyAtIDxhIHRpdGxlPSJDcmVkZW50aWFsIE1hbmFnZW1lbnQgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3JlZGVudGlhbC1tYW5hZ2VtZW50LTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jcmVkZW50aWFsLW1hbmFnZW1lbnQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENyZWRlbnRpYWwgTWFuYWdlbWVudCBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgV2VzdAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0cmFja2luZyBwcmVmZXJlbmNlIGV4cHJlc3Npb24gKGRudCkiIGRhdGEtdGFnPSJodHRwIHByaXZhY3kiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTkvTk9URS10cmFja2luZy1kbnQtMjAxOTAxMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRyYWNraW5nIFByZWZlcmVuY2UgRXhwcmVzc2lvbiAoRE5UKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRyYWNraW5nIFByZWZlcmVuY2UgRXhwcmVzc2lvbiAoRE5UKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VHJhY2tpbmcgUHJvdGVjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTktMDEtMTcgLSA8YSB0aXRsZT0iVHJhY2tpbmcgUHJlZmVyZW5jZSBFeHByZXNzaW9uIChETlQpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90cmFja2luZy1kbnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RudC9kcmFmdHMvdHJhY2tpbmctZG50Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVHJhY2tpbmcgUHJlZmVyZW5jZSBFeHByZXNzaW9uIChETlQpIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJveSBGaWVsZGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIFNpbmdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0dHAiPkhUVFAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpdmFjeSI+UHJpdmFjeQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibW90aW9uIHBhdGggbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvV0QtbW90aW9uLTEtMjAxODEyMTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vdGlvbiBQYXRoIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TW90aW9uICBQYXRoICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMTItMTggLSA8YSB0aXRsZT0iTW90aW9uIFBhdGggTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21vdGlvbi0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL21vdGlvbi0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBNb3Rpb24gUGF0aCBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaXJrIFNjaHVsemUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFuZSBTdGVwaGVucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppaHllIEhvbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIFdpbGxpZ2VycwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFjY2Vzc2libGUgbmFtZSBhbmQgZGVzY3JpcHRpb24gY29tcHV0YXRpb24gMS4xIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLWFjY25hbWUtMS4xLTIwMTgxMjE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY2Nlc3NpYmxlIE5hbWUgYW5kIERlc2NyaXB0aW9uIENvbXB1dGF0aW9uIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFjY2Vzc2libGUgIE5hbWUgIGFuZCAgRGVzY3JpcHRpb24gIENvbXB1dGF0aW9uJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMi0xOCAtIDxhIHRpdGxlPSJBY2Nlc3NpYmxlIE5hbWUgYW5kIERlc2NyaXB0aW9uIENvbXB1dGF0aW9uIDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWNjbmFtZS0xLjEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FjY25hbWUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEFjY2Vzc2libGUgTmFtZSBhbmQgRGVzY3JpcHRpb24gQ29tcHV0YXRpb24gMS4xIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvYW5tYXJpZSBEaWdncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyeWFuIEdhcmF2ZW50YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZmlsdGVyIGVmZmVjdHMgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvV0QtZmlsdGVyLWVmZmVjdHMtMS0yMDE4MTIxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRmlsdGVyIEVmZmVjdHMgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5GaWx0ZXIgIEVmZmVjdHMgIE1vZHVsZSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMi0xOCAtIDxhIHRpdGxlPSJGaWx0ZXIgRWZmZWN0cyBNb2R1bGUgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZmlsdGVyLWVmZmVjdHMtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5meHRmLm9yZy9maWx0ZXItZWZmZWN0cy0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBGaWx0ZXIgRWZmZWN0cyBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaXJrIFNjaHVsemUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZWFuIEphY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGZyYWdtZW50YXRpb24gbW9kdWxlIGxldmVsIDQiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1jc3MtYnJlYWstNC0yMDE4MTIxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEZyYWdtZW50YXRpb24gTW9kdWxlIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEZyYWdtZW50YXRpb24gIE1vZHVsZSAgTGV2ZWwmbmJzcDs0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMi0xOCAtIDxhIHRpdGxlPSJDU1MgRnJhZ21lbnRhdGlvbiBNb2R1bGUgTGV2ZWwgNCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWJyZWFrLTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1icmVhay00LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgRnJhZ21lbnRhdGlvbiBNb2R1bGUgTGV2ZWwgNCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3NzZW4gQXRhbmFzc292CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvZ25pdGl2ZSBhY2Nlc3NpYmlsaXR5IHJvYWRtYXAgYW5kIGdhcCBhbmFseXNpcyIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvV0QtY29nYS1nYXAtYW5hbHlzaXMtMjAxODEyMTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvZ25pdGl2ZSBBY2Nlc3NpYmlsaXR5IFJvYWRtYXAgYW5kIEdhcCBBbmFseXNpcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvZ25pdGl2ZSBBY2Nlc3NpYmlsaXR5IFJvYWRtYXAgYW5kIEdhcCBBbmFseXNpczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFBsYXRmb3JtIEFyY2hpdGVjdHVyZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEyLTExIC0gPGEgdGl0bGU9IkNvZ25pdGl2ZSBBY2Nlc3NpYmlsaXR5IFJvYWRtYXAgYW5kIEdhcCBBbmFseXNpcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY29nYS1nYXAtYW5hbHlzaXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NvZ2EvZ2FwLWFuYWx5c2lzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDb2duaXRpdmUgQWNjZXNzaWJpbGl0eSBSb2FkbWFwIGFuZCBHYXAgQW5hbHlzaXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGlzYSBTZWVtYW4tSG9yd2l0egogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgZnJhZ21lbnRhdGlvbiBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L0NSLWNzcy1icmVhay0zLTIwMTgxMjA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgRnJhZ21lbnRhdGlvbiBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgRnJhZ21lbnRhdGlvbiAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEyLTA0IC0gPGEgdGl0bGU9IkNTUyBGcmFnbWVudGF0aW9uIE1vZHVsZSBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtYnJlYWstMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWJyZWFrLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgRnJhZ21lbnRhdGlvbiBNb2R1bGUgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3NzZW4gQXRhbmFzc292CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imdlb21ldHJ5IGludGVyZmFjZXMgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9DUi1nZW9tZXRyeS0xLTIwMTgxMjA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHZW9tZXRyeSBJbnRlcmZhY2VzIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+R2VvbWV0cnkgIEludGVyZmFjZXMgIE1vZHVsZSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMi0wNCAtIDxhIHRpdGxlPSJHZW9tZXRyeSBJbnRlcmZhY2VzIE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9nZW9tZXRyeS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2dlb21ldHJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBHZW9tZXRyeSBJbnRlcmZhY2VzIE1vZHVsZSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFBpZXRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBIYXJyZWxzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZWxlY3RvcnMgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1dELXNlbGVjdG9ycy00LTIwMTgxMTIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZWxlY3RvcnMgTGV2ZWwgNCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNlbGVjdG9ycyAgTGV2ZWwmbmJzcDs0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMS0yMSAtIDxhIHRpdGxlPSJTZWxlY3RvcnMgTGV2ZWwgNCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2VsZWN0b3JzLTQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU2VsZWN0b3JzIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBmbGV4aWJsZSBib3ggbGF5b3V0IG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvQ1ItY3NzLWZsZXhib3gtMS0yMDE4MTExOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEZsZXhpYmxlIEJveCBMYXlvdXQgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEZsZXhpYmxlICBCb3ggIExheW91dCAgTW9kdWxlICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTExLTE5IC0gPGEgdGl0bGU9IkNTUyBGbGV4aWJsZSBCb3ggTGF5b3V0IE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtZmxleGJveC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZmxleGJveC0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgRmxleGlibGUgQm94IExheW91dCBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvc3NlbiBBdGFuYXNzb3YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCYXJvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHNoYWRvdyBwYXJ0cyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1jc3Mtc2hhZG93LXBhcnRzLTEtMjAxODExMTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBTaGFkb3cgUGFydHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgU2hhZG93IFBhcnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMS0xNSAtIDxhIHRpdGxlPSJDU1MgU2hhZG93IFBhcnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3Mtc2hhZG93LXBhcnRzLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1zaGFkb3ctcGFydHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBTaGFkb3cgUGFydHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GZXJnYWwgRGFseQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0dG1sIHByb2ZpbGVzIGZvciBpbnRlcm5ldCBtZWRpYSBzdWJ0aXRsZXMgYW5kIGNhcHRpb25zIDEuMSIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1JFQy10dG1sLWltc2MxLjEtMjAxODExMDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRUTUwgUHJvZmlsZXMgZm9yIEludGVybmV0IE1lZGlhIFN1YnRpdGxlcyBhbmQgQ2FwdGlvbnMgMS4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VFRNTCAgUHJvZmlsZXMgIGZvciAgSW50ZXJuZXQgIE1lZGlhICBTdWJ0aXRsZXMgIGFuZCAgQ2FwdGlvbnMmbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRpbWVkIFRleHQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTExLTA4IC0gPGEgdGl0bGU9IlRUTUwgUHJvZmlsZXMgZm9yIEludGVybmV0IE1lZGlhIFN1YnRpdGxlcyBhbmQgQ2FwdGlvbnMgMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90dG1sLWltc2MxLjEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2ltc2MvaW1zYzEvc3BlYy90dG1sLXd3LXByb2ZpbGVzLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVFRNTCBQcm9maWxlcyBmb3IgSW50ZXJuZXQgTWVkaWEgU3VidGl0bGVzIGFuZCBDYXB0aW9ucyAxLjEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGllcnJlLUFudGhvbnkgTGVtaWV1eAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aW1lZCB0ZXh0IG1hcmt1cCBsYW5ndWFnZSAxICh0dG1sMSkgKHRoaXJkIGVkaXRpb24pIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLXR0bWwxLTIwMTgxMTA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaW1lZCBUZXh0IE1hcmt1cCBMYW5ndWFnZSAxIChUVE1MMSkgKFRoaXJkIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGltZWQgVGV4dCBNYXJrdXAgTGFuZ3VhZ2UgMSAoVFRNTDEpIChUaGlyZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGltZWQgVGV4dCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMTEtMDggLSA8YSB0aXRsZT0iVGltZWQgVGV4dCBNYXJrdXAgTGFuZ3VhZ2UgMSAoVFRNTDEpIChUaGlyZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdHRtbDEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3R0bWwxL2luZGV4Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVGltZWQgVGV4dCBNYXJrdXAgTGFuZ3VhZ2UgMSAoVFRNTDEpIChUaGlyZCBFZGl0aW9uKSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HbGVubiBBZGFtcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBpZXJyZS1BbnRob255IExlbWlldXgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aW1lZCB0ZXh0IG1hcmt1cCBsYW5ndWFnZSAyICh0dG1sMikiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGNzcyBodG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9SRUMtdHRtbDItMjAxODExMDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRpbWVkIFRleHQgTWFya3VwIExhbmd1YWdlIDIgKFRUTUwyKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRpbWVkIFRleHQgTWFya3VwIExhbmd1YWdlIDIgKFRUTUwyKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGltZWQgVGV4dCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMTEtMDggLSA8YSB0aXRsZT0iVGltZWQgVGV4dCBNYXJrdXAgTGFuZ3VhZ2UgMiAoVFRNTDIpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90dG1sMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vdHRtbDIvaW5kZXguaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUaW1lZCBUZXh0IE1hcmt1cCBMYW5ndWFnZSAyIChUVE1MMikiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2xlbm4gQWRhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DeXJpbCBDb25jb2xhdG8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZWxlY3RvcnMgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLXNlbGVjdG9ycy0zLTIwMTgxMTA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZWxlY3RvcnMgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNlbGVjdG9ycyAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMS0wNiAtIDxhIHRpdGxlPSJTZWxlY3RvcnMgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2VsZWN0b3JzLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy0zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTZWxlY3RvcnMgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYW50ZWsgw4dlbGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEdsYXptYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSGlja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIExpbnNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBXaWxsaWFtcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBwYWdlZCBtZWRpYSBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1jc3MtcGFnZS0zLTIwMTgxMDE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgUGFnZWQgTWVkaWEgTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFBhZ2VkICBNZWRpYSAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEwLTE4IC0gPGEgdGl0bGU9IkNTUyBQYWdlZCBNZWRpYSBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXBhZ2UtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXBhZ2UtMy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFBhZ2VkIE1lZGlhIE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFNhcGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icGFja2FnZWQgd2ViIGFwcHMgKHdpZGdldHMpIC0gcGFja2FnaW5nIGFuZCB4bWwgY29uZmlndXJhdGlvbiAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L09CU0wtd2lkZ2V0cy0yMDE4MTAxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGFja2FnZWQgV2ViIEFwcHMgKFdpZGdldHMpIC0gUGFja2FnaW5nIGFuZCBYTUwgQ29uZmlndXJhdGlvbiAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGFja2FnZWQgV2ViIEFwcHMgKFdpZGdldHMpIC0gUGFja2FnaW5nIGFuZCBYTUwgQ29uZmlndXJhdGlvbiAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMTAtMTEgLSA8YSB0aXRsZT0iUGFja2FnZWQgV2ViIEFwcHMgKFdpZGdldHMpIC0gUGFja2FnaW5nIGFuZCBYTUwgQ29uZmlndXJhdGlvbiAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93aWRnZXRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlICYjMDM5O3ZpZXctbW9kZSYjMDM5OyBtZWRpYSBmZWF0dXJlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L09CU0wtdmlldy1tb2RlLTIwMTgxMDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgJiMwMzk7dmlldy1tb2RlJiMwMzk7IE1lZGlhIEZlYXR1cmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgJ3ZpZXctbW9kZScgTWVkaWEgRmVhdHVyZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEwLTExIC0gPGEgdGl0bGU9IlRoZSAmIzAzOTt2aWV3LW1vZGUmIzAzOTsgTWVkaWEgRmVhdHVyZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdmlldy1tb2RlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iaW4gQmVyam9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2lkZ2V0IGFjY2VzcyByZXF1ZXN0IHBvbGljeSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9PQlNMLXdpZGdldHMtYWNjZXNzLTIwMTgxMDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXaWRnZXQgQWNjZXNzIFJlcXVlc3QgUG9saWN5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2lkZ2V0IEFjY2VzcyBSZXF1ZXN0IFBvbGljeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEwLTExIC0gPGEgdGl0bGU9IldpZGdldCBBY2Nlc3MgUmVxdWVzdCBQb2xpY3kgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dpZGdldHMtYWNjZXNzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JpbiBCZXJqb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2lkZ2V0IGludGVyZmFjZSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9PQlNMLXdpZGdldHMtYXBpcy0yMDE4MTAxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2lkZ2V0IEludGVyZmFjZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldpZGdldCBJbnRlcmZhY2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPihoaXN0b3JpY2FsKSBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMC0xMSAtIDxhIHRpdGxlPSJXaWRnZXQgSW50ZXJmYWNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93aWRnZXRzLWFwaXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGFuaW1hdGlvbnMgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1jc3MtYW5pbWF0aW9ucy0xLTIwMTgxMDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQW5pbWF0aW9ucyBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBBbmltYXRpb25zICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEwLTExIC0gPGEgdGl0bGU9IkNTUyBBbmltYXRpb25zIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1hbmltYXRpb25zLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1hbmltYXRpb25zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQW5pbWF0aW9ucyBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlYW4gSmFja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIEJhcm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmlhbiBCaXJ0bGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGRpZ2l0YWwgc2lnbmF0dXJlcyBmb3Igd2lkZ2V0cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9PQlNMLXdpZGdldHMtZGlnc2lnLTIwMTgxMDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgRGlnaXRhbCBTaWduYXR1cmVzIGZvciBXaWRnZXRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIERpZ2l0YWwgU2lnbmF0dXJlcyBmb3IgV2lkZ2V0czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEwLTExIC0gPGEgdGl0bGU9IlhNTCBEaWdpdGFsIFNpZ25hdHVyZXMgZm9yIFdpZGdldHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dpZGdldHMtZGlnc2lnIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYWRkeSBCeWVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0dWFydCBLbmlnaHRsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBQcmllc3RsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB0cmFuc2l0aW9ucyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1jc3MtdHJhbnNpdGlvbnMtMS0yMDE4MTAxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFRyYW5zaXRpb25zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTIFRyYW5zaXRpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0xMC0xMSAtIDxhIHRpdGxlPSJDU1MgVHJhbnNpdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy10cmFuc2l0aW9ucy0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdHJhbnNpdGlvbnMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBUcmFuc2l0aW9ucyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCYXJvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlYW4gSmFja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyaWFuIEJpcnRsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBIeWF0dAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzY2FsYWJsZSB2ZWN0b3IgZ3JhcGhpY3MgKHN2ZykgMiIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvQ1ItU1ZHMi0yMDE4MTAwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2NhbGFibGUgVmVjdG9yIEdyYXBoaWNzIChTVkcpIDIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TY2FsYWJsZSAgVmVjdG9yICBHcmFwaGljcyAgKFNWRykmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEwLTA0IC0gPGEgdGl0bGU9IlNjYWxhYmxlIFZlY3RvciBHcmFwaGljcyAoU1ZHKSAyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkcyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vc3Znd2cub3JnL3N2ZzItZHJhZnQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNjYWxhYmxlIFZlY3RvciBHcmFwaGljcyAoU1ZHKSAyIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFtZWxpYSBCZWxsYW15LVJveWRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Qm9nZGFuIEJyaW56YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzIExpbGxleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpcmsgU2NodWx6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIFN0b3JleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWMgV2lsbGlnZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZ3JhcGhpY3MgYWNjZXNzaWJpbGl0eSBhcGkgbWFwcGluZ3MiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9SRUMtZ3JhcGhpY3MtYWFtLTEuMC0yMDE4MTAwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR3JhcGhpY3MgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HcmFwaGljcyBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5nczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMTAtMDIgLSA8YSB0aXRsZT0iR3JhcGhpY3MgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dyYXBoaWNzLWFhbS0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dyYXBoaWNzLWFhbS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR3JhcGhpY3MgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3MiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW1lbGlhIEJlbGxhbXktUm95ZHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2FubWFyaWUgRGlnZ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2FpLWFyaWEgZ3JhcGhpY3MgbW9kdWxlIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSBncmFwaGljcyIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLWdyYXBoaWNzLWFyaWEtMS4wLTIwMTgxMDAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXQUktQVJJQSBHcmFwaGljcyBNb2R1bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XQUktQVJJQSBHcmFwaGljcyBNb2R1bGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTEwLTAyIC0gPGEgdGl0bGU9IldBSS1BUklBIEdyYXBoaWNzIE1vZHVsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZ3JhcGhpY3MtYXJpYS0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dyYXBoaWNzLWFyaWEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdBSS1BUklBIEdyYXBoaWNzIE1vZHVsZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbWVsaWEgQmVsbGFteS1Sb3lkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvYW5tYXJpZSBEaWdncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2luZyBhcmlhIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSBodG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1dELXVzaW5nLWFyaWEtMjAxODA5MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVzaW5nIEFSSUEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2luZyBBUklBPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGxhdGZvcm0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA5LTI3IC0gPGEgdGl0bGU9IlVzaW5nIEFSSUEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3VzaW5nLWFyaWEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3VzaW5nLWFyaWEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFVzaW5nIEFSSUEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgRmF1bGtuZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBNYWNEb25hbGQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpZGVudGl0eSBmb3Igd2VicnRjIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L0NSLXdlYnJ0Yy1pZGVudGl0eS0yMDE4MDkyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSWRlbnRpdHkgZm9yIFdlYlJUQyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JZGVudGl0eSAgZm9yICBXZWJSVEMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBSZWFsLVRpbWUgQ29tbXVuaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA5LTI3IC0gPGEgdGl0bGU9IklkZW50aXR5IGZvciBXZWJSVEMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJydGMtaWRlbnRpdHkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYnJ0Yy1pZGVudGl0eS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSWRlbnRpdHkgZm9yIFdlYlJUQyAxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q3VsbGVuIEplbm5pbmdzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFydGluIFRob21zb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXBvcnRpbmcgYXBpIiBkYXRhLXRhZz0icGVyZm9ybWFuY2Ugd2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1dELXJlcG9ydGluZy0xLTIwMTgwOTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXBvcnRpbmcgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVwb3J0aW5nIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wOS0yNSAtIDxhIHRpdGxlPSJSZXBvcnRpbmcgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZXBvcnRpbmctMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcmVwb3J0aW5nLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSZXBvcnRpbmcgQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvdWdsYXMgQ3JlYWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIE1leWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBXZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imltc2MxLjEgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L05PVEUtaW1zYy0xLjEtcmVxcy0yMDE4MDkyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSU1TQzEuMSBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JTVNDMS4xIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGltZWQgVGV4dCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDktMjUgLSA8YSB0aXRsZT0iSU1TQzEuMSBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2ltc2MtMS4xLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2ltc2Mtdm5leHQtcmVxcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSU1TQzEuMSBSZXF1aXJlbWVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGllcnJlLUFudGhvbnkgTGVtaWV1eAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im5ldHdvcmsgZXJyb3IgbG9nZ2luZyIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1uZXR3b3JrLWVycm9yLWxvZ2dpbmctMS0yMDE4MDkyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTmV0d29yayBFcnJvciBMb2dnaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TmV0d29yayBFcnJvciBMb2dnaW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA5LTI1IC0gPGEgdGl0bGU9Ik5ldHdvcmsgRXJyb3IgTG9nZ2luZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbmV0d29yay1lcnJvci1sb2dnaW5nLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL25ldHdvcmstZXJyb3ItbG9nZ2luZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTmV0d29yayBFcnJvciBMb2dnaW5nIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvdWdsYXMgQ3JlYWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdWxpYSBUdXR0bGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbG9pcyBSZWl0YmF1ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BcnZpbmQgSmFpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGV2aWNlIG1lbW9yeSIgZGF0YS10YWc9InBlcmZvcm1hbmNlIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1dELWRldmljZS1tZW1vcnktMS0yMDE4MDkyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGV2aWNlIE1lbW9yeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRldmljZSBNZW1vcnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDktMjUgLSA8YSB0aXRsZT0iRGV2aWNlIE1lbW9yeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGV2aWNlLW1lbW9yeS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kZXZpY2UtbWVtb3J5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBEZXZpY2UgTWVtb3J5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNodWJoaWUgUGFuaWNrZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGZvbnRzIG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIGkxOG4iIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1JFQy1jc3MtZm9udHMtMy0yMDE4MDkyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEZvbnRzIE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBGb250cyAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA5LTIwIC0gPGEgdGl0bGU9IkNTUyBGb250cyBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWZvbnRzLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1mb250cy0zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgRm9udHMgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBEYWdnZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TXlsZXMgTWF4ZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2FzY2FkaW5nIHN0eWxlIHNoZWV0cywgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9TUFNELUNTUzEtMjAxODA5MTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENhc2NhZGluZyBTdHlsZSBTaGVldHMsIGxldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DYXNjYWRpbmcgIFN0eWxlICBTaGVldHMsICBsZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA5LTEzIC0gPGEgdGl0bGU9IkNhc2NhZGluZyBTdHlsZSBTaGVldHMsIGxldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NTUzEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Iw6Vrb24gV2l1bSBMaWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJ0IEJvcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBwbGF0Zm9ybSBmb3IgcHJpdmFjeSBwcmVmZXJlbmNlcyAxLjAgKHAzcDEuMCkgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9InByaXZhY3kiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvT0JTTC1QM1AtMjAxODA4MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRoZSBQbGF0Zm9ybSBmb3IgUHJpdmFjeSBQcmVmZXJlbmNlcyAxLjAgKFAzUDEuMCkgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBQbGF0Zm9ybSBmb3IgUHJpdmFjeSBQcmVmZXJlbmNlcyAxLjAgKFAzUDEuMCkgU3BlY2lmaWNhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UDNQIFNwZWNpZmljYXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA4LTMwIC0gPGEgdGl0bGU9IlRoZSBQbGF0Zm9ybSBmb3IgUHJpdmFjeSBQcmVmZXJlbmNlcyAxLjAgKFAzUDEuMCkgU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUDNQIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzc2ltbyBNYXJjaGlvcmkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwcml2YWN5Ij5Qcml2YWN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBwbGF0Zm9ybSBmb3IgcHJpdmFjeSBwcmVmZXJlbmNlcyAxLjEgKHAzcDEuMSkgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9InByaXZhY3kiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvTk9URS1QM1AxMS0yMDE4MDgzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIFBsYXRmb3JtIGZvciBQcml2YWN5IFByZWZlcmVuY2VzIDEuMSAoUDNQMS4xKSBTcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIFBsYXRmb3JtIGZvciBQcml2YWN5IFByZWZlcmVuY2VzIDEuMSAoUDNQMS4xKSBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5QM1AgU3BlY2lmaWNhdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDgtMzAgLSA8YSB0aXRsZT0iVGhlIFBsYXRmb3JtIGZvciBQcml2YWN5IFByZWZlcmVuY2VzIDEuMSAoUDNQMS4xKSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9QM1AxMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpZ28gV2VubmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHRoaWFzIFNjaHVudGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpdmFjeSI+UHJpdmFjeQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhbiByZGYgc2NoZW1hIGZvciBwM3AiIGRhdGEtdGFnPSJwcml2YWN5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L05PVEUtcDNwLXJkZnNjaGVtYS0yMDE4MDgzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQW4gUkRGIFNjaGVtYSBmb3IgUDNQIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QW4gUkRGIFNjaGVtYSBmb3IgUDNQPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wOC0zMCAtIDxhIHRpdGxlPSJBbiBSREYgU2NoZW1hIGZvciBQM1AgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3AzcC1yZGZzY2hlbWEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmlhbiBNY0JyaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmlnbyBXZW5uaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TG9ycmllIENyYW5vcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InByaXZhY3kiPlByaXZhY3kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icDNwIGd1aWRpbmcgcHJpbmNpcGxlcyIgZGF0YS10YWc9InByaXZhY3kiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvTk9URS1QM1AxMC1wcmluY2lwbGVzLTIwMTgwODMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQM1AgR3VpZGluZyBQcmluY2lwbGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UDNQIEd1aWRpbmcgUHJpbmNpcGxlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UDNQIFNwZWNpZmljYXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA4LTMwIC0gPGEgdGl0bGU9IlAzUCBHdWlkaW5nIFByaW5jaXBsZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1AzUDEwLXByaW5jaXBsZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpdmFjeSI+UHJpdmFjeQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGxvZ2ljYWwgcHJvcGVydGllcyBhbmQgdmFsdWVzIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvV0QtY3NzLWxvZ2ljYWwtMS0yMDE4MDgyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIExvZ2ljYWwgUHJvcGVydGllcyBhbmQgVmFsdWVzIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIExvZ2ljYWwgIFByb3BlcnRpZXMgIGFuZCAgVmFsdWVzICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA4LTI3IC0gPGEgdGl0bGU9IkNTUyBMb2dpY2FsIFByb3BlcnRpZXMgYW5kIFZhbHVlcyBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtbG9naWNhbC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtbG9naWNhbC0xLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgTG9naWNhbCBQcm9wZXJ0aWVzIGFuZCBWYWx1ZXMgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3NzZW4gQXRhbmFzc292CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHBhaW50aW5nIGFwaSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvQ1ItY3NzLXBhaW50LWFwaS0xLTIwMTgwODA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgUGFpbnRpbmcgQVBJIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFBhaW50aW5nICBBUEkgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDgtMDkgLSA8YSB0aXRsZT0iQ1NTIFBhaW50aW5nIEFQSSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtcGFpbnQtYXBpLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3NzLWhvdWRpbmkub3JnL2Nzcy1wYWludC1hcGktMS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFBhaW50aW5nIEFQSSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBLaWxwYXRyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVhbiBKYWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4aSBmb3IganNvbiAoZXhpNGpzb24pIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9OT1RFLWV4aS1mb3ItanNvbi0yMDE4MDcyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRVhJIGZvciBKU09OIChFWEk0SlNPTikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FWEkgZm9yIEpTT04gKEVYSTRKU09OKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RWZmaWNpZW50IEV4dGVuc2libGUgSW50ZXJjaGFuZ2UgIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wNy0yNiAtIDxhIHRpdGxlPSJFWEkgZm9yIEpTT04gKEVYSTRKU09OKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZXhpLWZvci1qc29uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFBlaW50bmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uIEJydXR6bWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgcGF5bWVudHMgdXNlIGNhc2VzIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9OT1RFLXdlYi1wYXltZW50cy11c2UtY2FzZXMtMjAxODA3MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBQYXltZW50cyBVc2UgQ2FzZXMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViICBQYXltZW50cyAgVXNlICBDYXNlcyZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIENvbW1lcmNlIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDctMTkgLSA8YSB0aXRsZT0iV2ViIFBheW1lbnRzIFVzZSBDYXNlcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYi1wYXltZW50cy11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYW51IFNwb3JueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBKYWNvYnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icGFja2FnaW5nIG9uIHRoZSB3ZWIiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvTk9URS13ZWItcGFja2FnaW5nLTIwMTgwNjI2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQYWNrYWdpbmcgb24gdGhlIFdlYiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBhY2thZ2luZyBvbiB0aGUgV2ViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UZWNobmljYWwgQXJjaGl0ZWN0dXJlIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDYtMjYgLSA8YSB0aXRsZT0iUGFja2FnaW5nIG9uIHRoZSBXZWIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYi1wYWNrYWdpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2N0YWcuZ2l0aHViLmlvL3BhY2thZ2luZy1vbi10aGUtd2ViLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQYWNrYWdpbmcgb24gdGhlIFdlYiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZW5pIFRlbm5pc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InZlaGljbGUgaW5mb3JtYXRpb24gYXBpIHNwZWNpZmljYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvTk9URS12ZWhpY2xlLWluZm9ybWF0aW9uLWFwaS0yMDE4MDYyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVmVoaWNsZSBJbmZvcm1hdGlvbiBBUEkgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlZlaGljbGUgSW5mb3JtYXRpb24gQVBJIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1dG9tb3RpdmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA2LTI2IC0gPGEgdGl0bGU9IlZlaGljbGUgSW5mb3JtYXRpb24gQVBJIFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZlaGljbGUtaW5mb3JtYXRpb24tYXBpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hdXRvbW90aXZlL3ZlaGljbGVfaW5mb3JtYXRpb25fYXBpL3ZlaGljbGVfaW5mb3JtYXRpb25fYXBpX3NwZWNpZmljYXRpb24uaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBWZWhpY2xlIEluZm9ybWF0aW9uIEFQSSBTcGVjaWZpY2F0aW9uIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBvd2VsbCBLaW5uZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGluamlybyBVcmF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgQXJvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InR0bWwgcHJvZmlsZXMgZm9yIGludGVybmV0IG1lZGlhIHN1YnRpdGxlcyBhbmQgY2FwdGlvbnMgMS4wIChpbXNjMSkiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9TUFNELXR0bWwtaW1zYzEtMjAxODA2MjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRUTUwgUHJvZmlsZXMgZm9yIEludGVybmV0IE1lZGlhIFN1YnRpdGxlcyBhbmQgQ2FwdGlvbnMgMS4wIChJTVNDMSkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UVE1MIFByb2ZpbGVzIGZvciBJbnRlcm5ldCBNZWRpYSBTdWJ0aXRsZXMgYW5kIENhcHRpb25zIDEuMCAoSU1TQzEpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UaW1lZCBUZXh0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wNi0yNiAtIDxhIHRpdGxlPSJUVE1MIFByb2ZpbGVzIGZvciBJbnRlcm5ldCBNZWRpYSBTdWJ0aXRsZXMgYW5kIENhcHRpb25zIDEuMCAoSU1TQzEpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90dG1sLWltc2MxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGllcnJlLUFudGhvbnkgTGVtaWV1eAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGJhc2ljIHVzZXIgaW50ZXJmYWNlIG1vZHVsZSBsZXZlbCAzIChjc3MzIHVpKSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLWNzcy11aS0zLTIwMTgwNjIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgQmFzaWMgVXNlciBJbnRlcmZhY2UgTW9kdWxlIExldmVsIDMgKENTUzMgVUkpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTIEJhc2ljIFVzZXIgSW50ZXJmYWNlIE1vZHVsZSBMZXZlbCAzIChDU1MzIFVJKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDYtMjEgLSA8YSB0aXRsZT0iQ1NTIEJhc2ljIFVzZXIgSW50ZXJmYWNlIE1vZHVsZSBMZXZlbCAzIChDU1MzIFVJKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXVpLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy11aS0zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgQmFzaWMgVXNlciBJbnRlcmZhY2UgTW9kdWxlIExldmVsIDMgKENTUzMgVUkpIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhbnRlayDDh2VsaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjYW5vbmljYWwgZXhpIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9SRUMtZXhpLWMxNG4tMjAxODA2MDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENhbm9uaWNhbCBFWEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DYW5vbmljYWwgRVhJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5FZmZpY2llbnQgRXh0ZW5zaWJsZSBJbnRlcmNoYW5nZSAgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA2LTA3IC0gPGEgdGl0bGU9IkNhbm9uaWNhbCBFWEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2V4aS1jMTRuIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2ViYXN0aWFuIEvDpGJpc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFBlaW50bmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYmRyaXZlciIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLXdlYmRyaXZlcjEtMjAxODA2MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYkRyaXZlciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYkRyaXZlcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QnJvd3NlciBUZXN0aW5nIGFuZCBUb29scyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDYtMDUgLSA8YSB0aXRsZT0iV2ViRHJpdmVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJkcml2ZXIxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYkRyaXZlciI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaW1vbiBTdGV3YXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQnVybnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgY29udGVudCBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMgKHdjYWcpIDIuMSIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1JFQy1XQ0FHMjEtMjAxODA2MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykgMi4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViICBDb250ZW50ICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzICAoV0NBRykmbmJzcDsyLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDYtMDUgLSA8YSB0aXRsZT0iV2ViIENvbnRlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChXQ0FHKSAyLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dDQUcyMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2NhZy8yMS9ndWlkZWxpbmVzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQ29udGVudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgKFdDQUcpIDIuMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXcgS2lya3BhdHJpY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3NodWUgTyYjMDM5O0Nvbm5vcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsYXN0YWlyIENhbXBiZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3ZnIGFjY2Vzc2liaWxpdHkgYXBpIG1hcHBpbmdzIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSBncmFwaGljcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1zdmctYWFtLTEuMC0yMDE4MDUxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1ZHIEFjY2Vzc2liaWxpdHkgQVBJIE1hcHBpbmdzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1ZHIEFjY2Vzc2liaWxpdHkgQVBJIE1hcHBpbmdzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA1LTEwIC0gPGEgdGl0bGU9IlNWRyBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3ZnLWFhbS0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3N2Zy1hYW0vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNWRyBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbWVsaWEgQmVsbGFteS1Sb3lkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBQb3VuY2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3VzdG9tIGVsZW1lbnRzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L05PVEUtY3VzdG9tLWVsZW1lbnRzLTIwMTgwNTAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDdXN0b20gRWxlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DdXN0b20gRWxlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDUtMDMgLSA8YSB0aXRsZT0iQ3VzdG9tIEVsZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jdXN0b20tZWxlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9jdXN0b20vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEN1c3RvbSBFbGVtZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InR0bWwgcHJvZmlsZXMgZm9yIGludGVybmV0IG1lZGlhIHN1YnRpdGxlcyBhbmQgY2FwdGlvbnMgMS4wLjEgKGltc2MxKSIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1JFQy10dG1sLWltc2MxLjAuMS0yMDE4MDQyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVFRNTCBQcm9maWxlcyBmb3IgSW50ZXJuZXQgTWVkaWEgU3VidGl0bGVzIGFuZCBDYXB0aW9ucyAxLjAuMSAoSU1TQzEpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VFRNTCBQcm9maWxlcyBmb3IgSW50ZXJuZXQgTWVkaWEgU3VidGl0bGVzIGFuZCBDYXB0aW9ucyAxLjAuMSAoSU1TQzEpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UaW1lZCBUZXh0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wNC0yNCAtIDxhIHRpdGxlPSJUVE1MIFByb2ZpbGVzIGZvciBJbnRlcm5ldCBNZWRpYSBTdWJ0aXRsZXMgYW5kIENhcHRpb25zIDEuMC4xIChJTVNDMSkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3R0bWwtaW1zYzEuMC4xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9pbXNjL2ltc2MxL3NwZWMvdHRtbC13dy1wcm9maWxlcy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRUTUwgUHJvZmlsZXMgZm9yIEludGVybmV0IE1lZGlhIFN1YnRpdGxlcyBhbmQgQ2FwdGlvbnMgMS4wLjEgKElNU0MxKSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaWVycmUtQW50aG9ueSBMZW1pZXV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgbGF5b3V0IGFwaSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1dELWNzcy1sYXlvdXQtYXBpLTEtMjAxODA0MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBMYXlvdXQgQVBJIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIExheW91dCAgQVBJICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTA0LTEyIC0gPGEgdGl0bGU9IkNTUyBMYXlvdXQgQVBJIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1sYXlvdXQtYXBpLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3NzLWhvdWRpbmkub3JnL2Nzcy1sYXlvdXQtYXBpLTEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBMYXlvdXQgQVBJIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZyBXaGl0d29ydGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gS2lscGF0cmljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgU3RlcGhlbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JlcnQgTyYjMDM5O0NhbGxhaGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9zc2VuIEF0YW5hc3NvdgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRvbW1hdHJpeCBpbnRlcmZhY2UiIGRhdGEtdGFnPSJjc3MgZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvTk9URS1tYXRyaXgtMjAxODA0MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERPTU1hdHJpeCBpbnRlcmZhY2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5ET01NYXRyaXggaW50ZXJmYWNlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wNC0xMiAtIDxhIHRpdGxlPSJET01NYXRyaXggaW50ZXJmYWNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tYXRyaXgiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvbWF0cml4LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBET01NYXRyaXggaW50ZXJmYWNlIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpcmsgU2NodWx6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpayBDYWJhbmllcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgdHlwZWQgb20gbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9XRC1jc3MtdHlwZWQtb20tMS0yMDE4MDQxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFR5cGVkIE9NIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFR5cGVkICBPTSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UZWNobmljYWwgQXJjaGl0ZWN0dXJlIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDQtMTAgLSA8YSB0aXRsZT0iQ1NTIFR5cGVkIE9NIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy10eXBlZC1vbS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzcy1ob3VkaW5pLm9yZy9jc3MtdHlwZWQtb20tMS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFR5cGVkIE9NIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgU3RlcGhlbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5haW5hIFJhaXNpbmdoYW5pCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHRtbCA0LjAgcmVjb21tZW5kYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvU1BTRC1odG1sNDAtMjAxODAzMjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgNC4wIFJlY29tbWVuZGF0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTCA0LjAgUmVjb21tZW5kYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhIVE1MMiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDMtMjcgLSA8YSB0aXRsZT0iSFRNTCA0LjAgUmVjb21tZW5kYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWw0MCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmFnZ2V0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFybmF1ZCBMZSBIb3JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEphY29icwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4aHRtbOKEoiBtb2R1bGFyaXphdGlvbiAxLjEgLSBzZWNvbmQgZWRpdGlvbiIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9TUFNELXhodG1sLW1vZHVsYXJpemF0aW9uLTIwMTgwMzI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTOKEoiBNb2R1bGFyaXphdGlvbiAxLjEgLSBTZWNvbmQgRWRpdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhIVE1M4oSiIE1vZHVsYXJpemF0aW9uIDEuMSAtIFNlY29uZCBFZGl0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAzLTI3IC0gPGEgdGl0bGU9IlhIVE1M4oSiIE1vZHVsYXJpemF0aW9uIDEuMSAtIFNlY29uZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbC1tb2R1bGFyaXphdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIE1jQ2Fycm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhodG1s4oSiIDEuMCB0aGUgZXh0ZW5zaWJsZSBoeXBlcnRleHQgbWFya3VwIGxhbmd1YWdlIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1NQU0QteGh0bWwxLTIwMTgwMzI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTOKEoiAxLjAgVGhlIEV4dGVuc2libGUgSHlwZXJUZXh0IE1hcmt1cCBMYW5ndWFnZSAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WEhUTUzihKIgMS4wIFRoZSBFeHRlbnNpYmxlIEh5cGVyVGV4dCBNYXJrdXAgTGFuZ3VhZ2UgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WEhUTUwyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wMy0yNyAtIDxhIHRpdGxlPSJYSFRNTOKEoiAxLjAgVGhlIEV4dGVuc2libGUgSHlwZXJUZXh0IE1hcmt1cCBMYW5ndWFnZSAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbDEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZW4gUGVtYmVydG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4aHRtbC1wcmludCAtIHNlY29uZCBlZGl0aW9uIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9TUFNELXhodG1sLXByaW50LTIwMTgwMzI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTC1QcmludCAtIFNlY29uZCBFZGl0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WEhUTUwtUHJpbnQgLSBTZWNvbmQgRWRpdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WEhUTUwyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wMy0yNyAtIDxhIHRpdGxlPSJYSFRNTC1QcmludCAtIFNlY29uZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbC1wcmludCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIE1jQ2Fycm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIDQuMDEgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvU1BTRC1odG1sNDAxLTIwMTgwMzI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MIDQuMDEgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgNC4wMSBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAzLTI3IC0gPGEgdGl0bGU9IkhUTUwgNC4wMSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sNDAxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBSYWdnZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXJuYXVkIExlIEhvcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSmFjb2JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4aHRtbOKEoiAxLjEgLSBtb2R1bGUtYmFzZWQgeGh0bWwgLSBzZWNvbmQgZWRpdGlvbiIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvU1BTRC14aHRtbDExLTIwMTgwMzI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTOKEoiAxLjEgLSBNb2R1bGUtYmFzZWQgWEhUTUwgLSBTZWNvbmQgRWRpdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhIVE1M4oSiIDEuMSAtIE1vZHVsZS1iYXNlZCBYSFRNTCAtIFNlY29uZCBFZGl0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAzLTI3IC0gPGEgdGl0bGU9IlhIVE1M4oSiIDEuMSAtIE1vZHVsZS1iYXNlZCBYSFRNTCAtIFNlY29uZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbDExIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzYXlhc3UgSXNoaWthd2EKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFuZSBNY0NhcnJvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieGh0bWzihKIgYmFzaWMgMS4xIC0gc2Vjb25kIGVkaXRpb24iIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1NQU0QteGh0bWwtYmFzaWMtMjAxODAzMjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhIVE1M4oSiIEJhc2ljIDEuMSAtIFNlY29uZCBFZGl0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WEhUTUzihKIgQmFzaWMgMS4xIC0gU2Vjb25kIEVkaXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhIVE1MMiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDMtMjcgLSA8YSB0aXRsZT0iWEhUTUzihKIgQmFzaWMgMS4xIC0gU2Vjb25kIEVkaXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hodG1sLWJhc2ljIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWw1IiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9TUFNELWh0bWw1LTIwMTgwMzI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MNSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUw1PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAzLTI3IC0gPGEgdGl0bGU9IkhUTUw1IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sNSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBIaWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iaW4gQmVyam9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgRmF1bGtuZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UcmF2aXMgTGVpdGhlYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmlrYSBEb3lsZSBOYXZhcmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGVyZXNhIE8mIzAzOTtDb25ub3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaWx2aWEgUGZlaWZmZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwgMy4yIHJlZmVyZW5jZSBzcGVjaWZpY2F0aW9uIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9TUFNELWh0bWwzMi0yMDE4MDMxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSFRNTCAzLjIgUmVmZXJlbmNlIFNwZWNpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MIDMuMiBSZWZlcmVuY2UgU3BlY2lmaWNhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WEhUTUwyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wMy0xNSAtIDxhIHRpdGxlPSJIVE1MIDMuMiBSZWZlcmVuY2UgU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUkVDLWh0bWwzMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmFnZ2V0dAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2hhZG93IGRvbSIgZGF0YS10YWc9ImRvbSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9OT1RFLXNoYWRvdy1kb20tMjAxODAzMDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNoYWRvdyBET00gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TaGFkb3cgRE9NPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGxhdGZvcm0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAzLTAxIC0gPGEgdGl0bGU9IlNoYWRvdyBET00gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NoYWRvdy1kb20iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvc3BlYy9zaGFkb3cvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNoYWRvdyBET00iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGF5YXRvIEl0bwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRvbSI+RE9NCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib2RybCBpbmZvcm1hdGlvbiBtb2RlbCAyLjIiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9SRUMtb2RybC1tb2RlbC0yMDE4MDIxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT0RSTCBJbmZvcm1hdGlvbiBNb2RlbCAyLjIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PRFJMICBJbmZvcm1hdGlvbiAgTW9kZWwmbmJzcDsyLjI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlBlcm1pc3Npb25zIGFuZCBPYmxpZ2F0aW9ucyBFeHByZXNzaW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wMi0xNSAtIDxhIHRpdGxlPSJPRFJMIEluZm9ybWF0aW9uIE1vZGVsIDIuMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb2RybC1tb2RlbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcG9lL21vZGVsLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBPRFJMIEluZm9ybWF0aW9uIE1vZGVsIDIuMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SZW5hdG8gSWFubmVsbGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZXJlbmEgVmlsbGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im9kcmwgdm9jYWJ1bGFyeSAmYW1wOyBleHByZXNzaW9uIDIuMiIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1JFQy1vZHJsLXZvY2FiLTIwMTgwMjE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPRFJMIFZvY2FidWxhcnkgJmFtcDsgRXhwcmVzc2lvbiAyLjIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PRFJMICBWb2NhYnVsYXJ5ICAmICBFeHByZXNzaW9uJm5ic3A7Mi4yPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5QZXJtaXNzaW9ucyBhbmQgT2JsaWdhdGlvbnMgRXhwcmVzc2lvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDItMTUgLSA8YSB0aXRsZT0iT0RSTCBWb2NhYnVsYXJ5ICZhbXA7IEV4cHJlc3Npb24gMi4yIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vZHJsLXZvY2FiIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wb2Uvdm9jYWIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE9EUkwgVm9jYWJ1bGFyeSAmYW1wOyBFeHByZXNzaW9uIDIuMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SZW5hdG8gSWFubmVsbGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFN0ZWlkbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0dWFydCBNeWxlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlbDrWN0b3IgUm9kcsOtZ3Vlei1Eb25jZWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idmVoaWNsZSBpbmZvcm1hdGlvbiBzZXJ2aWNlIHNwZWNpZmljYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9DUi12ZWhpY2xlLWluZm9ybWF0aW9uLXNlcnZpY2UtMjAxODAyMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZlaGljbGUgSW5mb3JtYXRpb24gU2VydmljZSBTcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VmVoaWNsZSBJbmZvcm1hdGlvbiBTZXJ2aWNlIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1dG9tb3RpdmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAyLTEzIC0gPGEgdGl0bGU9IlZlaGljbGUgSW5mb3JtYXRpb24gU2VydmljZSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92ZWhpY2xlLWluZm9ybWF0aW9uLXNlcnZpY2UiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2F1dG9tb3RpdmUvdmVoaWNsZV9kYXRhL3ZlaGljbGVfaW5mb3JtYXRpb25fc2VydmljZS5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFZlaGljbGUgSW5mb3JtYXRpb24gU2VydmljZSBTcGVjaWZpY2F0aW9uIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktldmluIEdhdmlnYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGFtIENyb2Z0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldvbnN1ayBMZWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Qb3dlbGwgS2lubmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHRtbCBtZWRpYSBjYXB0dXJlIiBkYXRhLXRhZz0iaHRtbCBtZWRpYSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L1JFQy1odG1sLW1lZGlhLWNhcHR1cmUtMjAxODAyMDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgTWVkaWEgQ2FwdHVyZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgTWVkaWEgQ2FwdHVyZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTgtMDItMDEgLSA8YSB0aXRsZT0iSFRNTCBNZWRpYSBDYXB0dXJlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLW1lZGlhLWNhcHR1cmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2h0bWwtbWVkaWEtY2FwdHVyZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSFRNTCBNZWRpYSBDYXB0dXJlIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuc3NpIEtvc3RpYWluZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbGtrYSBPa3NhbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9taW5pcXVlIEhhemHDq2wtTWFzc2lldXgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImluZGV4ZWQgZGF0YWJhc2UgYXBpIDIuMCIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLUluZGV4ZWREQi0yLTIwMTgwMTMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbmRleGVkIERhdGFiYXNlIEFQSSAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbmRleGVkICBEYXRhYmFzZSAgQVBJJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGxhdGZvcm0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAxLTMwIC0gPGEgdGl0bGU9IkluZGV4ZWQgRGF0YWJhc2UgQVBJIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvSW5kZXhlZERCLTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0luZGV4ZWREQi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSW5kZXhlZCBEYXRhYmFzZSBBUEkgMi4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsaSBBbGFiYmFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zaHVhIEJlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhY3Rpdml0eXB1YiIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTgvUkVDLWFjdGl2aXR5cHViLTIwMTgwMTIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY3Rpdml0eVB1YiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFjdGl2aXR5UHViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Tb2NpYWwgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wMS0yMyAtIDxhIHRpdGxlPSJBY3Rpdml0eVB1YiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWN0aXZpdHlwdWIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FjdGl2aXR5cHViLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBY3Rpdml0eVB1YiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpc3RvcGhlciBXZWJiZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZXNzaWNhIFRhbGxvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2Vic3ViIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxOC9SRUMtd2Vic3ViLTIwMTgwMTIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJTdWIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJTdWI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNvY2lhbCBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAxLTIzIC0gPGEgdGl0bGU9IldlYlN1YiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2Vic3ViIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd2Vic3ViLm5ldC9kcmFmdCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJTdWIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVsaWVuIEdlbmVzdG91eAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFhcm9uIFBhcmVja2kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbmRpZWF1dGgiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L05PVEUtaW5kaWVhdXRoLTIwMTgwMTIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbmRpZUF1dGggZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbmRpZUF1dGg8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNvY2lhbCBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAxLTIzIC0gPGEgdGl0bGU9IkluZGllQXV0aCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaW5kaWVhdXRoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vaW5kaWVhdXRoLnNwZWMuaW5kaWV3ZWIub3JnLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbmRpZUF1dGgiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWFyb24gUGFyZWNraQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBvc3QgdHlwZSBkaXNjb3ZlcnkiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L05PVEUtcG9zdC10eXBlLWRpc2NvdmVyeS0yMDE4MDExOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUG9zdCBUeXBlIERpc2NvdmVyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvc3QgVHlwZSBEaXNjb3Zlcnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNvY2lhbCBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE4LTAxLTE4IC0gPGEgdGl0bGU9IlBvc3QgVHlwZSBEaXNjb3ZlcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Bvc3QtdHlwZS1kaXNjb3ZlcnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9wdGQuc3BlYy5pbmRpZXdlYi5vcmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBvc3QgVHlwZSBEaXNjb3ZlcnkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFudGVrIMOHZWxpawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iamYyIHBvc3Qgc2VyaWFsaXphdGlvbiBmb3JtYXQiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE4L05PVEUtamYyLTIwMTgwMTEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBKRjIgUG9zdCBTZXJpYWxpemF0aW9uIEZvcm1hdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkpGMiBQb3N0IFNlcmlhbGl6YXRpb24gRm9ybWF0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Tb2NpYWwgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxOC0wMS0xMCAtIDxhIHRpdGxlPSJKRjIgUG9zdCBTZXJpYWxpemF0aW9uIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvamYyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vamYyLnNwZWMuaW5kaWV3ZWIub3JnLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBKRjIgUG9zdCBTZXJpYWxpemF0aW9uIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW5qYW1pbiBSb2JlcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic29jaWFsIHdlYiBwcm90b2NvbHMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtc29jaWFsLXdlYi1wcm90b2NvbHMtMjAxNzEyMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNvY2lhbCBXZWIgUHJvdG9jb2xzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U29jaWFsIFdlYiBQcm90b2NvbHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNvY2lhbCBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTEyLTI1IC0gPGEgdGl0bGU9IlNvY2lhbCBXZWIgUHJvdG9jb2xzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zb2NpYWwtd2ViLXByb3RvY29scyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy1zb2NpYWwuZ2l0aHViLmlvL3NvY2lhbC13ZWItcHJvdG9jb2xzIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNvY2lhbCBXZWIgUHJvdG9jb2xzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFteSBHdXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkaWdpdGFsIHB1Ymxpc2hpbmcgYWNjZXNzaWJpbGl0eSBhcGkgbWFwcGluZ3MiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9SRUMtZHB1Yi1hYW0tMS4wLTIwMTcxMjE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEaWdpdGFsIFB1Ymxpc2hpbmcgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EaWdpdGFsIFB1Ymxpc2hpbmcgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3M8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTEyLTE0IC0gPGEgdGl0bGU9IkRpZ2l0YWwgUHVibGlzaGluZyBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZHB1Yi1hYW0tMS4wIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kcHViLWFhbS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRGlnaXRhbCBQdWJsaXNoaW5nIEFjY2Vzc2liaWxpdHkgQVBJIE1hcHBpbmdzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgU2Nod2VyZHRmZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvYW5tYXJpZSBEaWdncwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFjY2Vzc2libGUgcmljaCBpbnRlcm5ldCBhcHBsaWNhdGlvbnMgKHdhaS1hcmlhKSAxLjEiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy13YWktYXJpYS0xLjEtMjAxNzEyMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgKFdBSS1BUklBKSAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BY2Nlc3NpYmxlICBSaWNoICBJbnRlcm5ldCAgQXBwbGljYXRpb25zICAoV0FJLUFSSUEpJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0xMi0xNCAtIDxhIHRpdGxlPSJBY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIChXQUktQVJJQSkgMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93YWktYXJpYS0xLjEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FyaWEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgKFdBSS1BUklBKSAxLjEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9hbm1hcmllIERpZ2dzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgU2Nod2VyZHRmZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIENyYWlnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb3JlIGFjY2Vzc2liaWxpdHkgYXBpIG1hcHBpbmdzIDEuMSIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy1jb3JlLWFhbS0xLjEtMjAxNzEyMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvcmUgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3MgMS4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29yZSAgQWNjZXNzaWJpbGl0eSAgQVBJICBNYXBwaW5ncyZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMTItMTQgLSA8YSB0aXRsZT0iQ29yZSBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NvcmUtYWFtLTEuMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vY29yZS1hYW0vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENvcmUgQWNjZXNzaWJpbGl0eSBBUEkgTWFwcGluZ3MgMS4xIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvYW5tYXJpZSBEaWdncwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBTY2hldWhhbW1lcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgU2Nod2VyZHRmZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kaSBTbm93LVdlYXZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFhcm9uIExldmVudGhhbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRpZ2l0YWwgcHVibGlzaGluZyB3YWktYXJpYSBtb2R1bGUgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLWRwdWItYXJpYS0xLjAtMjAxNzEyMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERpZ2l0YWwgUHVibGlzaGluZyBXQUktQVJJQSBNb2R1bGUgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGlnaXRhbCAgUHVibGlzaGluZyAgV0FJLUFSSUEgIE1vZHVsZSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMTItMTQgLSA8YSB0aXRsZT0iRGlnaXRhbCBQdWJsaXNoaW5nIFdBSS1BUklBIE1vZHVsZSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RwdWItYXJpYS0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RwdWItYXJpYS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRGlnaXRhbCBQdWJsaXNoaW5nIFdBSS1BUklBIE1vZHVsZSAxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBHYXJyaXNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VHp2aXlhIFNpZWdtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrdXMgR3lsbGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIE1jQ2Fycm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBwYXltZW50cyBodHRwIGFwaSAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS13ZWJwYXltZW50cy1odHRwLWFwaS0yMDE3MTIxMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFBheW1lbnRzIEhUVFAgQVBJIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiAgUGF5bWVudHMgIEhUVFAgIEFQSSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBheW1lbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0xMi0xMiAtIDxhIHRpdGxlPSJXZWIgUGF5bWVudHMgSFRUUCBBUEkgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJwYXltZW50cy1odHRwLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2VicGF5bWVudHMtaHR0cC1hcGkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBQYXltZW50cyBIVFRQIEFQSSAxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFudSBTcG9ybnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIExvbmdsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwYXltZW50IG1ldGhvZCBtYW5pZmVzdCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9XRC1wYXltZW50LW1ldGhvZC1tYW5pZmVzdC0yMDE3MTIxMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGF5bWVudCBNZXRob2QgTWFuaWZlc3QgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QYXltZW50IE1ldGhvZCBNYW5pZmVzdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBheW1lbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0xMi0xMiAtIDxhIHRpdGxlPSJQYXltZW50IE1ldGhvZCBNYW5pZmVzdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcGF5bWVudC1tZXRob2QtbWFuaWZlc3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BheW1lbnQtbWV0aG9kLW1hbmlmZXN0LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQYXltZW50IE1ldGhvZCBNYW5pZmVzdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXBlbmcgTGl1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9tZW5pYyBEZW5pY29sYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlphY2ggS29jaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNsZWFyIHNpdGUgZGF0YSIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1dELWNsZWFyLXNpdGUtZGF0YS0yMDE3MTEzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ2xlYXIgU2l0ZSBEYXRhIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2xlYXIgU2l0ZSBEYXRhPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTExLTMwIC0gPGEgdGl0bGU9IkNsZWFyIFNpdGUgRGF0YSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2xlYXItc2l0ZS1kYXRhIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtY2xlYXItc2l0ZS1kYXRhLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDbGVhciBTaXRlIERhdGEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBXZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VtYW50aWMgc2Vuc29yIG5ldHdvcmsgb250b2xvZ3kiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9SRUMtdm9jYWItc3NuLTIwMTcxMDE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZW1hbnRpYyBTZW5zb3IgTmV0d29yayBPbnRvbG9neSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNlbWFudGljIFNlbnNvciBOZXR3b3JrIE9udG9sb2d5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TcGF0aWFsIERhdGEgb24gdGhlIFdlYiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMTAtMTkgLSA8YSB0aXRsZT0iU2VtYW50aWMgU2Vuc29yIE5ldHdvcmsgT250b2xvZ3kgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvY2FiLXNzbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vc2R3L3Nzbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU2VtYW50aWMgU2Vuc29yIE5ldHdvcmsgT250b2xvZ3kiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXJtaW4gSGFsbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S3J6eXN6dG9mIEphbm93aWN6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2ltb24gQ294CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaCBMZSBQaHVvYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlcnJ5IFRheWxvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1heGltZSBMZWZyYW7Dp29pcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZW1vdGUgcGxheWJhY2sgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvQ1ItcmVtb3RlLXBsYXliYWNrLTIwMTcxMDE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZW1vdGUgUGxheWJhY2sgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVtb3RlIFBsYXliYWNrIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2Vjb25kIFNjcmVlbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMTAtMTkgLSA8YSB0aXRsZT0iUmVtb3RlIFBsYXliYWNrIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmVtb3RlLXBsYXliYWNrIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9yZW1vdGUtcGxheWJhY2svIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlbW90ZSBQbGF5YmFjayBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TW91bmlyIExhbW91cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRvbiBWYXl2b2QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idmVoaWNsZSBkYXRhIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtdmVoaWNsZS1kYXRhLTIwMTcxMDEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBWZWhpY2xlIERhdGEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5WZWhpY2xlIERhdGE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1dG9tb3RpdmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTEwLTEyIC0gPGEgdGl0bGU9IlZlaGljbGUgRGF0YSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdmVoaWNsZS1kYXRhIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hdXRvbW90aXZlL3ZlaGljbGVfZGF0YS9kYXRhX3NwZWMuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBWZWhpY2xlIERhdGEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V29uc3VrIExlZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlFpbmcgQW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGFtIENyb2Z0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktldmluIEdhdmlnYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdXN0aW4oSm9uZ1Nlb24pIFBhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZXZyb24gUmVlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvb3BlcmF0aXZlIHNjaGVkdWxpbmcgb2YgYmFja2dyb3VuZCB0YXNrcyIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9InByIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlBSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUHJvcG9zZWRSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUFItcmVxdWVzdGlkbGVjYWxsYmFjay0yMDE3MTAxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29vcGVyYXRpdmUgU2NoZWR1bGluZyBvZiBCYWNrZ3JvdW5kIFRhc2tzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29vcGVyYXRpdmUgU2NoZWR1bGluZyBvZiBCYWNrZ3JvdW5kIFRhc2tzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTEwLTEwIC0gPGEgdGl0bGU9IkNvb3BlcmF0aXZlIFNjaGVkdWxpbmcgb2YgQmFja2dyb3VuZCBUYXNrcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmVxdWVzdGlkbGVjYWxsYmFjayI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcmVxdWVzdGlkbGVjYWxsYmFjay8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ29vcGVyYXRpdmUgU2NoZWR1bGluZyBvZiBCYWNrZ3JvdW5kIFRhc2tzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvc3MgTWNJbHJveQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklseWEgR3JpZ29yaWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhdGlhbCBkYXRhIG9uIHRoZSB3ZWIgYmVzdCBwcmFjdGljZXMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLXNkdy1icC0yMDE3MDkyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU3BhdGlhbCBEYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TcGF0aWFsIERhdGEgb24gdGhlIFdlYiBCZXN0IFByYWN0aWNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U3BhdGlhbCBEYXRhIG9uIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA5LTI4IC0gPGEgdGl0bGU9IlNwYXRpYWwgRGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zZHctYnAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3Nkdy9icC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU3BhdGlhbCBEYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVyZW15IFRhbmR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGluZGEgdmFuIGRlbiBCcmluawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBheWFtIEJhcm5hZ2hpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InB1Ymxpc2hpbmcgYW5kIHVzaW5nIGVhcnRoIG9ic2VydmF0aW9uIGRhdGEgd2l0aCB0aGUgcmRmIGRhdGEgY3ViZSBhbmQgdGhlIGRpc2NyZXRlIGdsb2JhbCBncmlkIHN5c3RlbSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtZW8tcWItMjAxNzA5MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFB1Ymxpc2hpbmcgYW5kIFVzaW5nIEVhcnRoIE9ic2VydmF0aW9uIERhdGEgd2l0aCB0aGUgUkRGIERhdGEgQ3ViZSBhbmQgdGhlIERpc2NyZXRlIEdsb2JhbCBHcmlkIFN5c3RlbSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlB1Ymxpc2hpbmcgYW5kIFVzaW5nIEVhcnRoIE9ic2VydmF0aW9uIERhdGEgd2l0aCB0aGUgUkRGIERhdGEgQ3ViZSBhbmQgdGhlIERpc2NyZXRlIEdsb2JhbCBHcmlkIFN5c3RlbTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U3BhdGlhbCBEYXRhIG9uIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA5LTI4IC0gPGEgdGl0bGU9IlB1Ymxpc2hpbmcgYW5kIFVzaW5nIEVhcnRoIE9ic2VydmF0aW9uIERhdGEgd2l0aCB0aGUgUkRGIERhdGEgQ3ViZSBhbmQgdGhlIERpc2NyZXRlIEdsb2JhbCBHcmlkIFN5c3RlbSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZW8tcWIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3Nkdy9lby1xYi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUHVibGlzaGluZyBhbmQgVXNpbmcgRWFydGggT2JzZXJ2YXRpb24gRGF0YSB3aXRoIHRoZSBSREYgRGF0YSBDdWJlIGFuZCB0aGUgRGlzY3JldGUgR2xvYmFsIEdyaWQgU3lzdGVtIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRtaXRyeSBCcml6aGluZXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW0gVG95ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZXJyeSBUYXlsb3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icWI0c3Q6IHJkZiBkYXRhIGN1YmUgZXh0ZW5zaW9ucyBmb3Igc3BhdGlvLXRlbXBvcmFsIGNvbXBvbmVudHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLXFiNHN0LTIwMTcwOTI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBRQjRTVDogUkRGIERhdGEgQ3ViZSBleHRlbnNpb25zIGZvciBzcGF0aW8tdGVtcG9yYWwgY29tcG9uZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlFCNFNUOiBSREYgRGF0YSBDdWJlIGV4dGVuc2lvbnMgZm9yIHNwYXRpby10ZW1wb3JhbCBjb21wb25lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TcGF0aWFsIERhdGEgb24gdGhlIFdlYiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDktMjggLSA8YSB0aXRsZT0iUUI0U1Q6IFJERiBEYXRhIEN1YmUgZXh0ZW5zaW9ucyBmb3Igc3BhdGlvLXRlbXBvcmFsIGNvbXBvbmVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3FiNHN0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZHcvcWI0c3QvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFFCNFNUOiBSREYgRGF0YSBDdWJlIGV4dGVuc2lvbnMgZm9yIHNwYXRpby10ZW1wb3JhbCBjb21wb25lbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvYiBBdGtpbnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlbmNyeXB0ZWQgbWVkaWEgZXh0ZW5zaW9ucyIgZGF0YS10YWc9Imh0bWwgd2ViYXBpIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9SRUMtZW5jcnlwdGVkLW1lZGlhLTIwMTcwOTE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFbmNyeXB0ZWQgTWVkaWEgRXh0ZW5zaW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVuY3J5cHRlZCBNZWRpYSBFeHRlbnNpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA5LTE4IC0gPGEgdGl0bGU9IkVuY3J5cHRlZCBNZWRpYSBFeHRlbnNpb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbmNyeXB0ZWQtbWVkaWEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2VuY3J5cHRlZC1tZWRpYS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRW5jcnlwdGVkIE1lZGlhIEV4dGVuc2lvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgRG9yd2luCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVycnkgU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIFdhdHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkcmlhbiBCYXRlbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2luZyB0aGUgaXR1IGJ0LjIxMDAgcHEgZW90ZiB3aXRoIHRoZSBwbmcgZm9ybWF0IiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtcG5nLWhkci1wcS0yMDE3MDkxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNpbmcgdGhlIElUVSBCVC4yMTAwIFBRIEVPVEYgd2l0aCB0aGUgUE5HIEZvcm1hdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVzaW5nIHRoZSBJVFUgQlQuMjEwMCBQUSBFT1RGIHdpdGggdGhlIFBORyBGb3JtYXQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRpbWVkIFRleHQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA5LTExIC0gPGEgdGl0bGU9IlVzaW5nIHRoZSBJVFUgQlQuMjEwMCBQUSBFT1RGIHdpdGggdGhlIFBORyBGb3JtYXQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BuZy1oZHItcHEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BuZy1oZHItcHEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFVzaW5nIHRoZSBJVFUgQlQuMjEwMCBQUSBFT1RGIHdpdGggdGhlIFBORyBGb3JtYXQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGllcnJlLUFudGhvbnkgTGVtaWV1eAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibG9uZyB0YXNrcyBhcGkgMSIgZGF0YS10YWc9InBlcmZvcm1hbmNlIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1dELWxvbmd0YXNrcy0xLTIwMTcwOTA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBMb25nIFRhc2tzIEFQSSAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TG9uZyAgVGFza3MgIEFQSSZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDktMDcgLSA8YSB0aXRsZT0iTG9uZyBUYXNrcyBBUEkgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbG9uZ3Rhc2tzLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2xvbmd0YXNrcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTG9uZyBUYXNrcyBBUEkgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaHViaGllIFBhbmlja2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWx5YSBHcmlnb3JpawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbWVuaWMgRGVuaWNvbGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwYWludCB0aW1pbmcgMSIgZGF0YS10YWc9InBlcmZvcm1hbmNlIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1dELXBhaW50LXRpbWluZy0yMDE3MDkwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGFpbnQgVGltaW5nIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QYWludCAgVGltaW5nJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wOS0wNyAtIDxhIHRpdGxlPSJQYWludCBUaW1pbmcgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcGFpbnQtdGltaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wYWludC10aW1pbmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBhaW50IFRpbWluZyAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNodWJoaWUgUGFuaWNrZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtb3Rpb24gc2Vuc29ycyBleHBsYWluZXIiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtbW90aW9uLXNlbnNvcnMtMjAxNzA4MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vdGlvbiBTZW5zb3JzIEV4cGxhaW5lciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1vdGlvbiBTZW5zb3JzIEV4cGxhaW5lcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDgtMzAgLSA8YSB0aXRsZT0iTW90aW9uIFNlbnNvcnMgRXhwbGFpbmVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tb3Rpb24tc2Vuc29ycyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbW90aW9uLXNlbnNvcnMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1vdGlvbiBTZW5zb3JzIEV4cGxhaW5lciI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZW5uZXRoIENocmlzdGlhbnNlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXhhbmRlciBTaGFsYW1vdgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNoYXBlcyBjb25zdHJhaW50IGxhbmd1YWdlIChzaGFjbCkiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9SRUMtc2hhY2wtMjAxNzA3MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNoYXBlcyBDb25zdHJhaW50IExhbmd1YWdlIChTSEFDTCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TaGFwZXMgQ29uc3RyYWludCBMYW5ndWFnZSAoU0hBQ0wpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgRGF0YSBTaGFwZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA3LTIwIC0gPGEgdGl0bGU9IlNoYXBlcyBDb25zdHJhaW50IExhbmd1YWdlIChTSEFDTCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NoYWNsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kYXRhLXNoYXBlcy9zaGFjbC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU2hhcGVzIENvbnN0cmFpbnQgTGFuZ3VhZ2UgKFNIQUNMKSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ib2xnZXIgS251YmxhdWNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGltaXRyaXMgS29udG9rb3N0YXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNoYWNsIGFic3RyYWN0IHN5bnRheCAtLSBub3RlIG9uIHN0YXR1cyBvZiBvYnNvbGV0ZSBwcm9wb3NhbCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS1zaGFjbC1hYnN0cmFjdC1zeW50YXgtMjAxNzA3MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNIQUNMIEFic3RyYWN0IFN5bnRheCAtLSBOb3RlIG9uIFN0YXR1cyBvZiBPYnNvbGV0ZSBQcm9wb3NhbCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNIQUNMIEFic3RyYWN0IFN5bnRheCAtLSBOb3RlIG9uIFN0YXR1cyBvZiBPYnNvbGV0ZSBQcm9wb3NhbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIERhdGEgU2hhcGVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNy0yMCAtIDxhIHRpdGxlPSJTSEFDTCBBYnN0cmFjdCBTeW50YXggLS0gTm90ZSBvbiBTdGF0dXMgb2YgT2Jzb2xldGUgUHJvcG9zYWwgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NoYWNsLWFic3RyYWN0LXN5bnRheCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWMgUHJ1ZCYjMDM5O2hvbW1lYXV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2FyZW4gQ295bGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzaGFjbCB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtc2hhY2wtdWNyLTIwMTcwNzIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTSEFDTCBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNIQUNMIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgRGF0YSBTaGFwZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA3LTIwIC0gPGEgdGl0bGU9IlNIQUNMIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zaGFjbC11Y3IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaW1vbiBTdGV5c2thbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkthcmVuIENveWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1bmljb2RlIGluIHhtbCBhbmQgb3RoZXIgbWFya3VwIGxhbmd1YWdlcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS11bmljb2RlLXhtbC0yMDE3MDcxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVW5pY29kZSBpbiBYTUwgYW5kIG90aGVyIE1hcmt1cCBMYW5ndWFnZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vbmljb2RlIGluIFhNTCBhbmQgb3RoZXIgTWFya3VwIExhbmd1YWdlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA3LTEzIC0gPGEgdGl0bGU9IlVuaWNvZGUgaW4gWE1MIGFuZCBvdGhlciBNYXJrdXAgTGFuZ3VhZ2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS91bmljb2RlLXhtbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vdW5pY29kZS14bWwvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFVuaWNvZGUgaW4gWE1MIGFuZCBvdGhlciBNYXJrdXAgTGFuZ3VhZ2VzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkZGlzb24gUGhpbGxpcHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3ZlcnZpZXcgb2YgdGhlIGNvdmVyYWdlanNvbiBmb3JtYXQiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtY292anNvbi1vdmVydmlldy0yMDE3MDcxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT3ZlcnZpZXcgb2YgdGhlIENvdmVyYWdlSlNPTiBmb3JtYXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PdmVydmlldyBvZiB0aGUgQ292ZXJhZ2VKU09OIGZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U3BhdGlhbCBEYXRhIG9uIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA3LTExIC0gPGEgdGl0bGU9Ik92ZXJ2aWV3IG9mIHRoZSBDb3ZlcmFnZUpTT04gZm9ybWF0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jb3Zqc29uLW92ZXJ2aWV3Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZHcvY292ZXJhZ2UtanNvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgT3ZlcnZpZXcgb2YgdGhlIENvdmVyYWdlSlNPTiBmb3JtYXQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uIEJsb3dlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1haWsgUmllY2hlcnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CaWxsIFJvYmVydHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnZW9sb2NhdGlvbiBhcGkgc3BlY2lmaWNhdGlvbiBsZXZlbCAyIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtZ2VvbG9jYXRpb24tQVBJLXYyLTIwMTcwNzA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHZW9sb2NhdGlvbiBBUEkgU3BlY2lmaWNhdGlvbiBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+R2VvbG9jYXRpb24gIEFQSSAgU3BlY2lmaWNhdGlvbiAgTGV2ZWwmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5HZW9sb2NhdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDctMDYgLSA8YSB0aXRsZT0iR2VvbG9jYXRpb24gQVBJIFNwZWNpZmljYXRpb24gTGV2ZWwgMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZ2VvbG9jYXRpb24tQVBJLXYyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZGV2LnczLm9yZy9nZW8vYXBpL3NwZWMtc291cmNlLXYyLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR2VvbG9jYXRpb24gQVBJIFNwZWNpZmljYXRpb24gTGV2ZWwgMiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZWkgUG9wZXNjdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXBoZW4gQmxvY2sKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZmluZHRleHQgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtZmluZHRleHQtMjAxNzA2MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEZpbmRUZXh0IEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkZpbmRUZXh0IEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFubm90YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDYtMjAgLSA8YSB0aXRsZT0iRmluZFRleHQgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9maW5kdGV4dCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZmluZHRleHQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEZpbmRUZXh0IEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb3VnIFNjaGVwZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgc2NyaXB0aW5nIGV4dGVuc2lvbiAxLjAgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLXhxdWVyeS1zeC0xMC1yZXF1aXJlbWVudHMtMjAxNzA2MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSBTY3JpcHRpbmcgRXh0ZW5zaW9uIDEuMCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgU2NyaXB0aW5nIEV4dGVuc2lvbiAxLjAgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA2LTIwIC0gPGEgdGl0bGU9IlhRdWVyeSBTY3JpcHRpbmcgRXh0ZW5zaW9uIDEuMCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS1zeC0xMC1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgRW5nb3ZhdG92CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsYSBGbG9yZXNjdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdpb3JnaW8gR2hlbGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhxdWVyeSBzY3JpcHRpbmcgZXh0ZW5zaW9uIDEuMCB1c2UgY2FzZXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUteHF1ZXJ5LXN4LTEwLXVzZS1jYXNlcy0yMDE3MDYyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFF1ZXJ5IFNjcmlwdGluZyBFeHRlbnNpb24gMS4wIFVzZSBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSBTY3JpcHRpbmcgRXh0ZW5zaW9uIDEuMCBVc2UgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDYtMjAgLSA8YSB0aXRsZT0iWFF1ZXJ5IFNjcmlwdGluZyBFeHRlbnNpb24gMS4wIFVzZSBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHF1ZXJ5LXN4LTEwLXVzZS1jYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gU25lbHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBvdmVyZmxvdyBtb2R1bGUgbGV2ZWwgNCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249InVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1dELWNzcy1vdmVyZmxvdy00LTIwMTcwNjEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgT3ZlcmZsb3cgTW9kdWxlIExldmVsIDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIE92ZXJmbG93ICBNb2R1bGUgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDYtMTMgLSA8YSB0aXRsZT0iQ1NTIE92ZXJmbG93IE1vZHVsZSBMZXZlbCA0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3Mtb3ZlcmZsb3ctNCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLW92ZXJmbG93LTQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBPdmVyZmxvdyBNb2R1bGUgTGV2ZWwgNCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCYXJvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZsb3JpYW4gUml2b2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHNsIHRyYW5zZm9ybWF0aW9ucyAoeHNsdCkgdmVyc2lvbiAzLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy14c2x0LTMwLTIwMTcwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYU0wgVHJhbnNmb3JtYXRpb25zIChYU0xUKSBWZXJzaW9uIDMuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhTTCAgVHJhbnNmb3JtYXRpb25zICAoWFNMVCkgIFZlcnNpb24mbmJzcDszLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA2LTA4IC0gPGEgdGl0bGU9IlhTTCBUcmFuc2Zvcm1hdGlvbnMgKFhTTFQpIFZlcnNpb24gMy4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94c2x0LTMwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBLYXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNoYWNsIGFkdmFuY2VkIGZlYXR1cmVzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS1zaGFjbC1hZi0yMDE3MDYwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU0hBQ0wgQWR2YW5jZWQgRmVhdHVyZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TSEFDTCBBZHZhbmNlZCBGZWF0dXJlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIERhdGEgU2hhcGVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNi0wOCAtIDxhIHRpdGxlPSJTSEFDTCBBZHZhbmNlZCBGZWF0dXJlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2hhY2wtYWYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RhdGEtc2hhcGVzL3NoYWNsLWFmLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTSEFDTCBBZHZhbmNlZCBGZWF0dXJlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ib2xnZXIgS251YmxhdWNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVhbiBBbGxlbWFuZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFN0ZXlza2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNoYWNsIGphdmFzY3JpcHQgZXh0ZW5zaW9ucyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtc2hhY2wtanMtMjAxNzA2MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNIQUNMIEphdmFTY3JpcHQgRXh0ZW5zaW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNIQUNMIEphdmFTY3JpcHQgRXh0ZW5zaW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIERhdGEgU2hhcGVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNi0wOCAtIDxhIHRpdGxlPSJTSEFDTCBKYXZhU2NyaXB0IEV4dGVuc2lvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NoYWNsLWpzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kYXRhLXNoYXBlcy9zaGFjbC1qcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU0hBQ0wgSmF2YVNjcmlwdCBFeHRlbnNpb25zIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhvbGdlciBLbnVibGF1Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYW5vIE1hcmlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNsb3VkIGJyb3dzZXIgYXJjaGl0ZWN0dXJlIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtY2xvdWQtYnJvd3Nlci1hcmNoLTIwMTcwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDbG91ZCBCcm93c2VyIEFyY2hpdGVjdHVyZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNsb3VkIEJyb3dzZXIgQXJjaGl0ZWN0dXJlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NZWRpYSBhbmQgRW50ZXJ0YWlubWVudCBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA2LTA4IC0gPGEgdGl0bGU9IkNsb3VkIEJyb3dzZXIgQXJjaGl0ZWN0dXJlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jbG91ZC1icm93c2VyLWFyY2giPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL1dlYi1hbmQtVFYtSUcvY2xvdWQtYnJvd3Nlci10Zi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ2xvdWQgQnJvd3NlciBBcmNoaXRlY3R1cmUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q29saW4gTWVlcnZlbGQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4YW5kcmEgTWlraXR5dWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVpIGV2ZW50cyBrZXlib2FyZGV2ZW50IGNvZGUgdmFsdWVzIiBkYXRhLXRhZz0iZG9tIHdlYmFwaSIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L0NSLXVpZXZlbnRzLWNvZGUtMjAxNzA2MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVJIEV2ZW50cyBLZXlib2FyZEV2ZW50IGNvZGUgVmFsdWVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VUkgRXZlbnRzIEtleWJvYXJkRXZlbnQgY29kZSBWYWx1ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDYtMDEgLSA8YSB0aXRsZT0iVUkgRXZlbnRzIEtleWJvYXJkRXZlbnQgY29kZSBWYWx1ZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3VpZXZlbnRzLWNvZGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3VpZXZlbnRzLWNvZGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFVJIEV2ZW50cyBLZXlib2FyZEV2ZW50IGNvZGUgVmFsdWVzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdhcnkgS2FjbWFyY2lrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VHJhdmlzIExlaXRoZWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1aSBldmVudHMga2V5Ym9hcmRldmVudCBrZXkgdmFsdWVzIiBkYXRhLXRhZz0iZG9tIHdlYmFwaSIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L0NSLXVpZXZlbnRzLWtleS0yMDE3MDYwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVUkgRXZlbnRzIEtleWJvYXJkRXZlbnQga2V5IFZhbHVlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVJIEV2ZW50cyBLZXlib2FyZEV2ZW50IGtleSBWYWx1ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDYtMDEgLSA8YSB0aXRsZT0iVUkgRXZlbnRzIEtleWJvYXJkRXZlbnQga2V5IFZhbHVlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdWlldmVudHMta2V5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby91aWV2ZW50cy1rZXkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFVJIEV2ZW50cyBLZXlib2FyZEV2ZW50IGtleSBWYWx1ZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2FyeSBLYWNtYXJjaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UcmF2aXMgTGVpdGhlYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZ2VvZmVuY2luZyBhcGkiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS1nZW9mZW5jaW5nLTIwMTcwNTMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHZW9mZW5jaW5nIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkdlb2ZlbmNpbmcgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5HZW9sb2NhdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDUtMzAgLSA8YSB0aXRsZT0iR2VvZmVuY2luZyBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dlb2ZlbmNpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dlb2ZlbmNpbmctYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBHZW9mZW5jaW5nIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJpam4gS3J1aXNzZWxicmluawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhY3Rpdml0eSBzdHJlYW1zIDIuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLWFjdGl2aXR5c3RyZWFtcy1jb3JlLTIwMTcwNTIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY3Rpdml0eSBTdHJlYW1zIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFjdGl2aXR5ICBTdHJlYW1zJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Tb2NpYWwgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNS0yMyAtIDxhIHRpdGxlPSJBY3Rpdml0eSBTdHJlYW1zIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWN0aXZpdHlzdHJlYW1zLWNvcmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FjdGl2aXR5c3RyZWFtcy9jb3JlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBY3Rpdml0eSBTdHJlYW1zIDIuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW1lcyBTbmVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV2YW4gUHJvZHJvbW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYWN0aXZpdHkgdm9jYWJ1bGFyeSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLWFjdGl2aXR5c3RyZWFtcy12b2NhYnVsYXJ5LTIwMTcwNTIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY3Rpdml0eSBWb2NhYnVsYXJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QWN0aXZpdHkgVm9jYWJ1bGFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U29jaWFsIFdlYiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDUtMjMgLSA8YSB0aXRsZT0iQWN0aXZpdHkgVm9jYWJ1bGFyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYWN0aXZpdHlzdHJlYW1zLXZvY2FidWxhcnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FjdGl2aXR5c3RyZWFtcy92b2NhYnVsYXJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBY3Rpdml0eSBWb2NhYnVsYXJ5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIFNuZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXZhbiBQcm9kcm9tb3UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtaWNyb3B1YiIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLW1pY3JvcHViLTIwMTcwNTIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNaWNyb3B1YiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1pY3JvcHViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Tb2NpYWwgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNS0yMyAtIDxhIHRpdGxlPSJNaWNyb3B1YiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWljcm9wdWIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9taWNyb3B1Yi5uZXQvZHJhZnQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1pY3JvcHViIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFhcm9uIFBhcmVja2kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idHYgY29udHJvbCBhcGkgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtdHZjb250cm9sLWFwaS0yMDE3MDUxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVFYgQ29udHJvbCBBUEkgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRWIENvbnRyb2wgQVBJIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRWIENvbnRyb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA1LTE4IC0gPGEgdGl0bGU9IlRWIENvbnRyb2wgQVBJIFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3R2Y29udHJvbC1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3R2Y29udHJvbC1hcGkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRWIENvbnRyb2wgQVBJIFNwZWNpZmljYXRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgTW9ycmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3VuZyBIZWkgS2ltCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleGFuZGVyIEZ1dMOhc3oKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgcHVibGljYXRpb25zIGZvciB0aGUgb3BlbiB3ZWIgcGxhdGZvcm06IHZpc2lvbiBhbmQgdGVjaG5pY2FsIGNoYWxsZW5nZXMiIGRhdGEtdGFnPSJkcHViIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLXB3cC0yMDE3MDUwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFB1YmxpY2F0aW9ucyBmb3IgdGhlIE9wZW4gV2ViIFBsYXRmb3JtOiBWaXNpb24gQW5kIFRlY2huaWNhbCBDaGFsbGVuZ2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFB1YmxpY2F0aW9ucyBmb3IgdGhlIE9wZW4gV2ViIFBsYXRmb3JtOiBWaXNpb24gQW5kIFRlY2huaWNhbCBDaGFsbGVuZ2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EaWdpdGFsIFB1Ymxpc2hpbmcgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNS0wMiAtIDxhIHRpdGxlPSJXZWIgUHVibGljYXRpb25zIGZvciB0aGUgT3BlbiBXZWIgUGxhdGZvcm06IFZpc2lvbiBBbmQgVGVjaG5pY2FsIENoYWxsZW5nZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3B3cCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZHB1Yi1wd3AvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBQdWJsaWNhdGlvbnMgZm9yIHRoZSBPcGVuIFdlYiBQbGF0Zm9ybTogVmlzaW9uIEFuZCBUZWNobmljYWwgQ2hhbGxlbmdlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrdXMgR3lsbGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlbiBEZSBNZWVzdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXZhbiBIZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UenZpeWEgU2llZ21hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgQ3JhbWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGVvbmFyZCBSb3NlbnRob2wKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsaW5rZWQgZGF0YSBub3RpZmljYXRpb25zIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLWxkbi0yMDE3MDUwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTGlua2VkIERhdGEgTm90aWZpY2F0aW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkxpbmtlZCBEYXRhIE5vdGlmaWNhdGlvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNvY2lhbCBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTA1LTAyIC0gPGEgdGl0bGU9IkxpbmtlZCBEYXRhIE5vdGlmaWNhdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2xkbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2xpbmtlZHJlc2VhcmNoLm9yZy9sZG4vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIExpbmtlZCBEYXRhIE5vdGlmaWNhdGlvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2FydmVuIENhcGFkaXNsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFteSBHdXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWVkaWEgY2FwdHVyZSBkZXB0aCBzdHJlYW0gZXh0ZW5zaW9ucyIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9XRC1tZWRpYWNhcHR1cmUtZGVwdGgtMjAxNzA0MTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lZGlhIENhcHR1cmUgRGVwdGggU3RyZWFtIEV4dGVuc2lvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZWRpYSBDYXB0dXJlIERlcHRoIFN0cmVhbSBFeHRlbnNpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUmVhbC1UaW1lIENvbW11bmljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNC0xOCAtIDxhIHRpdGxlPSJNZWRpYSBDYXB0dXJlIERlcHRoIFN0cmVhbSBFeHRlbnNpb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYWNhcHR1cmUtZGVwdGgiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21lZGlhY2FwdHVyZS1kZXB0aC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWVkaWEgQ2FwdHVyZSBEZXB0aCBTdHJlYW0gRXh0ZW5zaW9ucyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnNzaSBLb3N0aWFpbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmluZ3hpbiBIdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZWtzYW5kYXIgU3RvamlsamtvdmljCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iIE1hbnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgaW1hZ2UgdmFsdWVzIGFuZCByZXBsYWNlZCBjb250ZW50IG1vZHVsZSBsZXZlbCA0IiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvV0QtY3NzLWltYWdlcy00LTIwMTcwNDEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgSW1hZ2UgVmFsdWVzIGFuZCBSZXBsYWNlZCBDb250ZW50IE1vZHVsZSBMZXZlbCA0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBJbWFnZSAgVmFsdWVzICBhbmQgIFJlcGxhY2VkICBDb250ZW50ICBNb2R1bGUgIExldmVsJm5ic3A7NDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDQtMTMgLSA8YSB0aXRsZT0iQ1NTIEltYWdlIFZhbHVlcyBhbmQgUmVwbGFjZWQgQ29udGVudCBNb2R1bGUgTGV2ZWwgNCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWltYWdlcy00Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtaW1hZ2VzLTQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBJbWFnZSBWYWx1ZXMgYW5kIFJlcGxhY2VkIENvbnRlbnQgTW9kdWxlIExldmVsIDQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MZWEgVmVyb3UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGZpbGwgYW5kIHN0cm9rZSBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9XRC1maWxsLXN0cm9rZS0zLTIwMTcwNDEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgRmlsbCBhbmQgU3Ryb2tlIE1vZHVsZSBMZXZlbCAzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBGaWxsICBhbmQgIFN0cm9rZSAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDQtMTMgLSA8YSB0aXRsZT0iQ1NTIEZpbGwgYW5kIFN0cm9rZSBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZmlsbC1zdHJva2UtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5meHRmLm9yZy9maWxsLXN0cm9rZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEZpbGwgYW5kIFN0cm9rZSBNb2R1bGUgTGV2ZWwgMyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYmVhY29uIiBkYXRhLXRhZz0icGVyZm9ybWFuY2UiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9DUi1iZWFjb24tMjAxNzA0MTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEJlYWNvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkJlYWNvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBlcmZvcm1hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wNC0xMyAtIDxhIHRpdGxlPSJCZWFjb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2JlYWNvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vYmVhY29uLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBCZWFjb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWx5YSBHcmlnb3JpawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsb2lzIFJlaXRiYXVlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFydmluZCBKYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmF0aW5kZXIgTWFubgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVzb3VyY2UgdGltaW5nIGxldmVsIDEiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9DUi1yZXNvdXJjZS10aW1pbmctMS0yMDE3MDMzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVzb3VyY2UgVGltaW5nIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXNvdXJjZSAgVGltaW5nICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDMtMzAgLSA8YSB0aXRsZT0iUmVzb3VyY2UgVGltaW5nIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Jlc291cmNlLXRpbWluZy0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9yZXNvdXJjZS10aW1pbmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlc291cmNlIFRpbWluZyBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFydmluZCBKYWluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9kZCBSZWlmc3RlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYXRpbmRlciBNYW5uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WmhpaGVuZyBXYW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kZXJzb24gUXVhY2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHF1ZXJ5IGFuZCB4cGF0aCBkYXRhIG1vZGVsIDMuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLXhwYXRoLWRhdGFtb2RlbC0zMS0yMDE3MDMyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFF1ZXJ5IGFuZCBYUGF0aCBEYXRhIE1vZGVsIDMuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAgYW5kICBYUGF0aCAgRGF0YSAgTW9kZWwmbmJzcDszLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDMtMjEgLSA8YSB0aXRsZT0iWFF1ZXJ5IGFuZCBYUGF0aCBEYXRhIE1vZGVsIDMuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHBhdGgtZGF0YW1vZGVsLTMxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBTbmVsc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IENvbGVtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnl4IDMuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLXhxdWVyeXgtMzEtMjAxNzAzMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeVggMy4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFF1ZXJ5WCZuYnNwOzMuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMy0yMSAtIDxhIHRpdGxlPSJYUXVlcnlYIDMuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHF1ZXJ5eC0zMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppbSBNZWx0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3NoIFNwaWVnZWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHBhdGggYW5kIHhxdWVyeSBmdW5jdGlvbnMgYW5kIG9wZXJhdG9ycyAzLjEiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy14cGF0aC1mdW5jdGlvbnMtMzEtMjAxNzAzMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhQYXRoIGFuZCBYUXVlcnkgRnVuY3Rpb25zIGFuZCBPcGVyYXRvcnMgMy4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFBhdGggIGFuZCAgWFF1ZXJ5ICBGdW5jdGlvbnMgIGFuZCAgT3BlcmF0b3JzJm5ic3A7My4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAzLTIxIC0gPGEgdGl0bGU9IlhQYXRoIGFuZCBYUXVlcnkgRnVuY3Rpb25zIGFuZCBPcGVyYXRvcnMgMy4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aC1mdW5jdGlvbnMtMzEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtheQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgMy4xOiBhbiB4bWwgcXVlcnkgbGFuZ3VhZ2UiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy14cXVlcnktMzEtMjAxNzAzMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSAzLjE6IEFuIFhNTCBRdWVyeSBMYW5ndWFnZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAzLjE6IEFuIFhNTCBRdWVyeSBMYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMy0yMSAtIDxhIHRpdGxlPSJYUXVlcnkgMy4xOiBBbiBYTUwgUXVlcnkgTGFuZ3VhZ2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS0zMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBEeWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zaCBTcGllZ2VsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHBhdGggbGFuZ3VhZ2UgKHhwYXRoKSAzLjEiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy14cGF0aC0zMS0yMDE3MDMyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFBhdGggTGFuZ3VhZ2UgKFhQYXRoKSAzLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgIFBhdGggIExhbmd1YWdlICAoWFBhdGgpJm5ic3A7My4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAzLTIxIC0gPGEgdGl0bGU9IlhNTCBQYXRoIExhbmd1YWdlIChYUGF0aCkgMy4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aC0zMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBEeWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zaCBTcGllZ2VsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHNsdCBhbmQgeHF1ZXJ5IHNlcmlhbGl6YXRpb24gMy4xIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9SRUMteHNsdC14cXVlcnktc2VyaWFsaXphdGlvbi0zMS0yMDE3MDMyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFNMVCBhbmQgWFF1ZXJ5IFNlcmlhbGl6YXRpb24gMy4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFNMVCAgYW5kICBYUXVlcnkgIFNlcmlhbGl6YXRpb24mbmJzcDszLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDMtMjEgLSA8YSB0aXRsZT0iWFNMVCBhbmQgWFF1ZXJ5IFNlcmlhbGl6YXRpb24gMy4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94c2x0LXhxdWVyeS1zZXJpYWxpemF0aW9uLTMxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IENvbGVtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFNwZXJiZXJnLU1jUXVlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIGludGVybmF0aW9uYWxpemF0aW9uIHRhZyBzZXQgKGl0cykgMi4wIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLWl0czJyZXEtMjAxNzAzMDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgSW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgIGZvciAgSW50ZXJuYXRpb25hbGl6YXRpb24gIFRhZyAgU2V0ICAoSVRTKSZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAzLTAyIC0gPGEgdGl0bGU9IlJlcXVpcmVtZW50cyBmb3IgSW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2l0czJyZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2l0czJyZXEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgSW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSAyLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgTGV3aXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BcmxlIExvbW1lbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZlbGl4IFNhc2FraQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWV0YWRhdGEgZm9yIHRoZSBtdWx0aWxpbmd1YWwgd2ViIC0gdXNhZ2Ugc2NlbmFyaW9zIGFuZCBpbXBsZW1lbnRhdGlvbnMiIGRhdGEtdGFnPSJkYXRhIGh0bWwgaTE4biIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLW1sdy1tZXRhZGF0YS11cy1pbXBsLTIwMTcwMzAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNZXRhZGF0YSBmb3IgdGhlIE11bHRpbGluZ3VhbCBXZWIgLSBVc2FnZSBTY2VuYXJpb3MgYW5kIEltcGxlbWVudGF0aW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1ldGFkYXRhIGZvciB0aGUgTXVsdGlsaW5ndWFsIFdlYiAtIFVzYWdlIFNjZW5hcmlvcyBhbmQgSW1wbGVtZW50YXRpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDMtMDIgLSA8YSB0aXRsZT0iTWV0YWRhdGEgZm9yIHRoZSBNdWx0aWxpbmd1YWwgV2ViIC0gVXNhZ2UgU2NlbmFyaW9zIGFuZCBJbXBsZW1lbnRhdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21sdy1tZXRhZGF0YS11cy1pbXBsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tbHctbWV0YWRhdGEtdXMtaW1wbC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWV0YWRhdGEgZm9yIHRoZSBNdWx0aWxpbmd1YWwgV2ViIC0gVXNhZ2UgU2NlbmFyaW9zIGFuZCBJbXBsZW1lbnRhdGlvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXN0aWFuIExpZXNrZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3Mgcmh5dGhtaWMgc2l6aW5nIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1dELWNzcy1yaHl0aG0tMS0yMDE3MDMwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFJoeXRobWljIFNpemluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBSaHl0aG1pYyBTaXppbmc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAzLTAyIC0gPGEgdGl0bGU9IkNTUyBSaHl0aG1pYyBTaXppbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1yaHl0aG0tMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXJoeXRobS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFJoeXRobWljIFNpemluZyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Lb2ppIElzaGlpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlbWJlZGRpbmcgd2ViIGFubm90YXRpb25zIGluIGh0bWwiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLWFubm90YXRpb24taHRtbC0yMDE3MDIyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRW1iZWRkaW5nIFdlYiBBbm5vdGF0aW9ucyBpbiBIVE1MIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RW1iZWRkaW5nIFdlYiBBbm5vdGF0aW9ucyBpbiBIVE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQW5ub3RhdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMjMgLSA8YSB0aXRsZT0iRW1iZWRkaW5nIFdlYiBBbm5vdGF0aW9ucyBpbiBIVE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hbm5vdGF0aW9uLWh0bWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYi1hbm5vdGF0aW9uL3NlcmlhbGl6YXRpb24taHRtbC1ub3RlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFbWJlZGRpbmcgV2ViIEFubm90YXRpb25zIGluIEhUTUwiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGltb3RoeSBDb2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2FydmVuIENhcGFkaXNsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlbmphbWluIFlvdW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXZhbiBIZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGFubm90YXRpb24gZGF0YSBtb2RlbCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy1hbm5vdGF0aW9uLW1vZGVsLTIwMTcwMjIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQW5ub3RhdGlvbiBEYXRhIE1vZGVsIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIEFubm90YXRpb24gRGF0YSBNb2RlbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFubm90YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAyLTIzIC0gPGEgdGl0bGU9IldlYiBBbm5vdGF0aW9uIERhdGEgTW9kZWwgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Fubm90YXRpb24tbW9kZWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYi1hbm5vdGF0aW9uLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQW5ub3RhdGlvbiBEYXRhIE1vZGVsIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvYmVydCBTYW5kZXJzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYW9sbyBDaWNjYXJlc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW5qYW1pbiBZb3VuZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgYW5ub3RhdGlvbiBwcm90b2NvbCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy1hbm5vdGF0aW9uLXByb3RvY29sLTIwMTcwMjIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQW5ub3RhdGlvbiBQcm90b2NvbCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBBbm5vdGF0aW9uIFByb3RvY29sPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQW5ub3RhdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMjMgLSA8YSB0aXRsZT0iV2ViIEFubm90YXRpb24gUHJvdG9jb2wgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Fubm90YXRpb24tcHJvdG9jb2wiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYi1hbm5vdGF0aW9uL3Byb3RvY29sL3dkLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQW5ub3RhdGlvbiBQcm90b2NvbCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JlcnQgU2FuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNlbGVjdG9ycyBhbmQgc3RhdGVzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS1zZWxlY3RvcnMtc3RhdGVzLTIwMTcwMjIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZWxlY3RvcnMgYW5kIFN0YXRlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNlbGVjdG9ycyBhbmQgU3RhdGVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQW5ub3RhdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMjMgLSA8YSB0aXRsZT0iU2VsZWN0b3JzIGFuZCBTdGF0ZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NlbGVjdG9ycy1zdGF0ZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYi1hbm5vdGF0aW9uL3NlbGVjdG9yLW5vdGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNlbGVjdG9ycyBhbmQgU3RhdGVzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkl2YW4gSGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iZXJ0IFNhbmRlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhb2xvIENpY2NhcmVzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlbmphbWluIFlvdW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBhbm5vdGF0aW9uIHZvY2FidWxhcnkiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9SRUMtYW5ub3RhdGlvbi12b2NhYi0yMDE3MDIyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIEFubm90YXRpb24gVm9jYWJ1bGFyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBBbm5vdGF0aW9uIFZvY2FidWxhcnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBbm5vdGF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMi0yMyAtIDxhIHRpdGxlPSJXZWIgQW5ub3RhdGlvbiBWb2NhYnVsYXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hbm5vdGF0aW9uLXZvY2FiIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWItYW5ub3RhdGlvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIEFubm90YXRpb24gVm9jYWJ1bGFyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JlcnQgU2FuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGFvbG8gQ2ljY2FyZXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVuamFtaW4gWW91bmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icG9lIHVzZSBjYXNlcyBhbmQgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9XRC1wb2UtdWNyLTIwMTcwMjIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQT0UgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QT0UgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlBlcm1pc3Npb25zIGFuZCBPYmxpZ2F0aW9ucyBFeHByZXNzaW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMi0yMyAtIDxhIHRpdGxlPSJQT0UgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BvZS11Y3IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3BvZS91Y3IvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBPRSBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFN0ZWlkbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFN0ZXlza2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVuZWRpY3QgV2hpdHRhbSBTbWl0aAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwb2ludGVyIG1ldGhvZHMgaW4gcmRmIDEuMCIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtUG9pbnRlcnMtaW4tUkRGMTAtMjAxNzAyMDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBvaW50ZXIgTWV0aG9kcyBpbiBSREYgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UG9pbnRlciAgTWV0aG9kcyAgaW4gIFJERiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RXZhbHVhdGlvbiBhbmQgUmVwYWlyIFRvb2xzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMi0wMiAtIDxhIHRpdGxlPSJQb2ludGVyIE1ldGhvZHMgaW4gUkRGIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUG9pbnRlcnMtaW4tUkRGMTAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYXJsb3MgSWdsZXNpYXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVwcmVzZW50aW5nIGNvbnRlbnQgaW4gcmRmIDEuMCIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkgaHR0cCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS1Db250ZW50LWluLVJERjEwLTIwMTcwMjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXByZXNlbnRpbmcgQ29udGVudCBpbiBSREYgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVwcmVzZW50aW5nICBDb250ZW50ICBpbiAgUkRGJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5FdmFsdWF0aW9uIGFuZCBSZXBhaXIgVG9vbHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAyLTAyIC0gPGEgdGl0bGU9IlJlcHJlc2VudGluZyBDb250ZW50IGluIFJERiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NvbnRlbnQtaW4tUkRGMTAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbm5lcyBLb2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2FybG9zIEEuIFZlbGFzY28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsaXAgQWNrZXJtYW5uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodHRwIj5IVFRQCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRpc2NvdmVyeSAmYW1wOyByZWdpc3RyYXRpb24gb2YgbXVsdGltb2RhbCBtb2RhbGl0eSBjb21wb25lbnRzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtbW1pLW1jLWRpc2NvdmVyeS0yMDE3MDIwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGlzY292ZXJ5ICZhbXA7IFJlZ2lzdHJhdGlvbiBvZiBNdWx0aW1vZGFsIE1vZGFsaXR5IENvbXBvbmVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EaXNjb3ZlcnkgJiBSZWdpc3RyYXRpb24gb2YgTXVsdGltb2RhbCBNb2RhbGl0eSBDb21wb25lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMi0wMiAtIDxhIHRpdGxlPSJEaXNjb3ZlcnkgJmFtcDsgUmVnaXN0cmF0aW9uIG9mIE11bHRpbW9kYWwgTW9kYWxpdHkgQ29tcG9uZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbW1pLW1jLWRpc2NvdmVyeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkIgSGVsZW5hIFJPRFJJR1VFWgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIEJhcm5ldHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZWJvcmFoIERhaGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SYWogVHVtdWx1cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYWdlc2ggS2hhcmlkaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkthenV5dWtpIEFzaGltdXJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGV2ZWxvcGVyIGd1aWRlIGZvciBldmFsdWF0aW9uIGFuZCByZXBvcnQgbGFuZ3VhZ2UgKGVhcmwpIDEuMCIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtRUFSTDEwLUd1aWRlLTIwMTcwMjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEZXZlbG9wZXIgR3VpZGUgZm9yIEV2YWx1YXRpb24gYW5kIFJlcG9ydCBMYW5ndWFnZSAoRUFSTCkgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGV2ZWxvcGVyICBHdWlkZSAgZm9yICBFdmFsdWF0aW9uICBhbmQgIFJlcG9ydCAgTGFuZ3VhZ2UgIChFQVJMKSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RXZhbHVhdGlvbiBhbmQgUmVwYWlyIFRvb2xzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMi0wMiAtIDxhIHRpdGxlPSJEZXZlbG9wZXIgR3VpZGUgZm9yIEV2YWx1YXRpb24gYW5kIFJlcG9ydCBMYW5ndWFnZSAoRUFSTCkgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9FQVJMMTAtR3VpZGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYXJsb3MgQS4gVmVsYXNjbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYWRpIEFib3UtWmFocmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGZvciB0aGUgZXZhbHVhdGlvbiBhbmQgcmVwb3J0IGxhbmd1YWdlIChlYXJsKSAxLjAiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLUVBUkwxMC1SZXF1aXJlbWVudHMtMjAxNzAyMDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgdGhlIEV2YWx1YXRpb24gYW5kIFJlcG9ydCBMYW5ndWFnZSAoRUFSTCkgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVxdWlyZW1lbnRzICBmb3IgIHRoZSAgRXZhbHVhdGlvbiAgYW5kICBSZXBvcnQgIExhbmd1YWdlICAoRUFSTCkmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkV2YWx1YXRpb24gYW5kIFJlcGFpciBUb29scyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMDIgLSA8YSB0aXRsZT0iUmVxdWlyZW1lbnRzIGZvciB0aGUgRXZhbHVhdGlvbiBhbmQgUmVwb3J0IExhbmd1YWdlIChFQVJMKSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0VBUkwxMC1SZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFNxdWlsbGFjZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYWRpIEFib3UtWmFocmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZW1tYTogZXh0ZW5zaWJsZSBtdWx0aW1vZGFsIGFubm90YXRpb24gbWFya3VwIGxhbmd1YWdlIHZlcnNpb24gMi4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L05PVEUtZW1tYTIwLTIwMTcwMjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFTU1BOiBFeHRlbnNpYmxlIE11bHRpTW9kYWwgQW5ub3RhdGlvbiBtYXJrdXAgbGFuZ3VhZ2UgVmVyc2lvbiAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FTU1BOiAgRXh0ZW5zaWJsZSAgTXVsdGlNb2RhbCAgQW5ub3RhdGlvbiAgbWFya3VwICBsYW5ndWFnZSAgVmVyc2lvbiZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMDIgLSA8YSB0aXRsZT0iRU1NQTogRXh0ZW5zaWJsZSBNdWx0aU1vZGFsIEFubm90YXRpb24gbWFya3VwIGxhbmd1YWdlIFZlcnNpb24gMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbW1hMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2VtbWEvZW1tYTJfMC9lbW1hXzJfMF9lZGl0b3JfZHJhZnQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFTU1BOiBFeHRlbnNpYmxlIE11bHRpTW9kYWwgQW5ub3RhdGlvbiBtYXJrdXAgbGFuZ3VhZ2UgVmVyc2lvbiAyLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBKb2huc3RvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZXZhbHVhdGlvbiBhbmQgcmVwb3J0IGxhbmd1YWdlIChlYXJsKSAxLjAgc2NoZW1hIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS1FQVJMMTAtU2NoZW1hLTIwMTcwMjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFdmFsdWF0aW9uIGFuZCBSZXBvcnQgTGFuZ3VhZ2UgKEVBUkwpIDEuMCBTY2hlbWEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FdmFsdWF0aW9uIGFuZCBSZXBvcnQgTGFuZ3VhZ2UgKEVBUkwpIDEuMCBTY2hlbWE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkV2YWx1YXRpb24gYW5kIFJlcGFpciBUb29scyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMDIgLSA8YSB0aXRsZT0iRXZhbHVhdGlvbiBhbmQgUmVwb3J0IExhbmd1YWdlIChFQVJMKSAxLjAgU2NoZW1hIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9FQVJMMTAtU2NoZW1hIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhZGkgQWJvdS1aYWhyYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodHRwIHZvY2FidWxhcnkgaW4gcmRmIDEuMCIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkgaHR0cCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS1IVFRQLWluLVJERjEwLTIwMTcwMjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVFRQIFZvY2FidWxhcnkgaW4gUkRGIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUVFAgIFZvY2FidWxhcnkgIGluICBSREYmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkV2YWx1YXRpb24gYW5kIFJlcGFpciBUb29scyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMDIgLSA8YSB0aXRsZT0iSFRUUCBWb2NhYnVsYXJ5IGluIFJERiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0hUVFAtaW4tUkRGMTAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbm5lcyBLb2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2FybG9zIEEuIFZlbGFzY28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsaXAgQWNrZXJtYW5uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodHRwIj5IVFRQCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZlbG9wZXJzJiMwMzk7IGd1aWRlIHRvIGZlYXR1cmVzIG9mIHdlYiBhY2Nlc3NpYmlsaXR5IGV2YWx1YXRpb24gdG9vbHMiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLVdBRVQtMjAxNzAyMDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERldmVsb3BlcnMmIzAzOTsgR3VpZGUgdG8gRmVhdHVyZXMgb2YgV2ViIEFjY2Vzc2liaWxpdHkgRXZhbHVhdGlvbiBUb29scyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRldmVsb3BlcnMnIEd1aWRlIHRvIEZlYXR1cmVzIG9mIFdlYiBBY2Nlc3NpYmlsaXR5IEV2YWx1YXRpb24gVG9vbHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkV2YWx1YXRpb24gYW5kIFJlcGFpciBUb29scyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDItMDIgLSA8YSB0aXRsZT0iRGV2ZWxvcGVycyYjMDM5OyBHdWlkZSB0byBGZWF0dXJlcyBvZiBXZWIgQWNjZXNzaWJpbGl0eSBFdmFsdWF0aW9uIFRvb2xzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XQUVUIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2FybG9zIEEuIFZlbGFzY28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFkaSBBYm91LVphaHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRhdGEgb24gdGhlIHdlYiBiZXN0IHByYWN0aWNlcyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L1JFQy1kd2JwLTIwMTcwMTMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRhdGEgb24gdGhlIFdlYiBCZXN0IFByYWN0aWNlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDEtMzEgLSA8YSB0aXRsZT0iRGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kd2JwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kd2JwL2JwLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcm5hZGV0dGUgRmFyaWFzIExvc2NpbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNhcm9saW5lIEJ1cmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmV3dG9uIENhbGVnYXJpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3Mgc25hcHNob3QgMjAxNyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLWNzcy0yMDE3LTIwMTcwMTMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgU25hcHNob3QgMjAxNyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBTbmFwc2hvdCAyMDE3PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMS0zMSAtIDxhIHRpdGxlPSJDU1MgU25hcHNob3QgMjAxNyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLTIwMTciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy0yMDE3LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgU25hcHNob3QgMjAxNyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZsb3JpYW4gUml2b2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgY3J5cHRvZ3JhcGh5IGFwaSIgZGF0YS10YWc9InNlY3VyaXR5IHdlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvUkVDLVdlYkNyeXB0b0FQSS0yMDE3MDEyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIENyeXB0b2dyYXBoeSBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgQ3J5cHRvZ3JhcGh5IEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIENyeXB0b2dyYXBoeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDEtMjYgLSA8YSB0aXRsZT0iV2ViIENyeXB0b2dyYXBoeSBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dlYkNyeXB0b0FQSSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViY3J5cHRvLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWIgQ3J5cHRvZ3JhcGh5IEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIFdhdHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZWZlcnJlciBwb2xpY3kiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE3L0NSLXJlZmVycmVyLXBvbGljeS0yMDE3MDEyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVmZXJyZXIgUG9saWN5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVmZXJyZXIgUG9saWN5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAxLTI2IC0gPGEgdGl0bGU9IlJlZmVycmVyIFBvbGljeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmVmZXJyZXItcG9saWN5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtcmVmZXJyZXItcG9saWN5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSZWZlcnJlciBQb2xpY3kiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9jaGVuIEVpc2luZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RW1pbHkgU3RhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhxdWVyeSB1cGRhdGUgZmFjaWxpdHkgMy4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLXhxdWVyeS11cGRhdGUtMzAtMjAxNzAxMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSBVcGRhdGUgRmFjaWxpdHkgMy4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFF1ZXJ5ICBVcGRhdGUgIEZhY2lsaXR5Jm5ic3A7My4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAxLTI0IC0gPGEgdGl0bGU9IlhRdWVyeSBVcGRhdGUgRmFjaWxpdHkgMy4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnktdXBkYXRlLTMwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBTbmVsc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIE1lbHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgdXBkYXRlIGZhY2lsaXR5IDMuMCByZXF1aXJlbWVudHMgYW5kIHVzZSBjYXNlcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTcvTk9URS14cXVlcnktdXBkYXRlLTMwLXJlcXVpcmVtZW50cy11c2UtY2FzZXMtMjAxNzAxMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSBVcGRhdGUgRmFjaWxpdHkgMy4wIFJlcXVpcmVtZW50cyBhbmQgVXNlIENhc2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFF1ZXJ5IFVwZGF0ZSBGYWNpbGl0eSAzLjAgUmVxdWlyZW1lbnRzIGFuZCBVc2UgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTctMDEtMjQgLSA8YSB0aXRsZT0iWFF1ZXJ5IFVwZGF0ZSBGYWNpbGl0eSAzLjAgUmVxdWlyZW1lbnRzIGFuZCBVc2UgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS11cGRhdGUtMzAtcmVxdWlyZW1lbnRzLXVzZS1jYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHJldyBDb2xlbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibmV0d29yayBzZXJ2aWNlIGRpc2NvdmVyeSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9OT1RFLWRpc2NvdmVyeS1hcGktMjAxNzAxMTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE5ldHdvcmsgU2VydmljZSBEaXNjb3ZlcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5OZXR3b3JrIFNlcnZpY2UgRGlzY292ZXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNy0wMS0xMiAtIDxhIHRpdGxlPSJOZXR3b3JrIFNlcnZpY2UgRGlzY292ZXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kaXNjb3ZlcnktYXBpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHZjcy53My5vcmcvaGcvZGFwL3Jhdy1maWxlL3RpcC9kaXNjb3ZlcnktYXBpL092ZXJ2aWV3Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTmV0d29yayBTZXJ2aWNlIERpc2NvdmVyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoIFRpYmJldHQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJtZW50aW9uIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNy9SRUMtd2VibWVudGlvbi0yMDE3MDExMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2VibWVudGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYm1lbnRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNvY2lhbCBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE3LTAxLTEyIC0gPGEgdGl0bGU9IldlYm1lbnRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYm1lbnRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93ZWJtZW50aW9uLm5ldC9kcmFmdC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2VibWVudGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BYXJvbiBQYXJlY2tpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyByb3VuZCBkaXNwbGF5IGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvV0QtY3NzLXJvdW5kLWRpc3BsYXktMS0yMDE2MTIyMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFJvdW5kIERpc3BsYXkgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgUm91bmQgIERpc3BsYXkgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTItMjIgLSA8YSB0aXRsZT0iQ1NTIFJvdW5kIERpc3BsYXkgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXJvdW5kLWRpc3BsYXktMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXJvdW5kLWRpc3BsYXkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBSb3VuZCBEaXNwbGF5IExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmloeWUgSG9uZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGF0YSBvbiB0aGUgd2ViIGJlc3QgcHJhY3RpY2VzOiBkYXRhc2V0IHVzYWdlIHZvY2FidWxhcnkiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLXZvY2FiLWR1di0yMDE2MTIxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzOiBEYXRhc2V0IFVzYWdlIFZvY2FidWxhcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXM6IERhdGFzZXQgVXNhZ2UgVm9jYWJ1bGFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0xMi0xNSAtIDxhIHRpdGxlPSJEYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXM6IERhdGFzZXQgVXNhZ2UgVm9jYWJ1bGFyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9jYWItZHV2Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kd2JwL3ZvY2FiLWR1Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzOiBEYXRhc2V0IFVzYWdlIFZvY2FidWxhcnkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVybmFkZXR0ZSBGYXJpYXMgTG9zY2lvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBTdGVwaGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3VtaXQgUHVyb2hpdAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJpZGwgbGV2ZWwgMSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvUkVDLVdlYklETC0xLTIwMTYxMjE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWJJREwgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYklETCAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGxhdGZvcm0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTEyLTE1IC0gPGEgdGl0bGU9IldlYklETCBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XZWJJREwtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2hleWNhbS5naXRodWIuaW8vd2ViaWRsLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJJREwgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYW1lcm9uIE1jQ29ybWFjawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb250ZW50IHNlY3VyaXR5IHBvbGljeSBsZXZlbCAyIiBkYXRhLXRhZz0ic2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L1JFQy1DU1AyLTIwMTYxMjE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29udGVudCAgU2VjdXJpdHkgIFBvbGljeSAgTGV2ZWwmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTEyLTE1IC0gPGEgdGl0bGU9IkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5IExldmVsIDIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NTUDIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3AvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBXZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRhbSBCYXJ0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBWZWRpdHoKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkYXRhIG9uIHRoZSB3ZWIgYmVzdCBwcmFjdGljZXM6IGRhdGEgcXVhbGl0eSB2b2NhYnVsYXJ5IiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS12b2NhYi1kcXYtMjAxNjEyMTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERhdGEgb24gdGhlIFdlYiBCZXN0IFByYWN0aWNlczogRGF0YSBRdWFsaXR5IFZvY2FidWxhcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXM6IERhdGEgUXVhbGl0eSBWb2NhYnVsYXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTEyLTE1IC0gPGEgdGl0bGU9IkRhdGEgb24gdGhlIFdlYiBCZXN0IFByYWN0aWNlczogRGF0YSBRdWFsaXR5IFZvY2FidWxhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvY2FiLWRxdiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZHdicC92b2NhYi1kcWcuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBEYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXM6IERhdGEgUXVhbGl0eSBWb2NhYnVsYXJ5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2NhcmRvIEFsYmVydG9uaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFudG9pbmUgSXNhYWMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgMy4xIHJlcXVpcmVtZW50cyBhbmQgdXNlIGNhc2VzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLXhxdWVyeS0zMS1yZXF1aXJlbWVudHMtMjAxNjEyMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSAzLjEgUmVxdWlyZW1lbnRzIGFuZCBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgMy4xIFJlcXVpcmVtZW50cyBhbmQgVXNlIENhc2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTEyLTEzIC0gPGEgdGl0bGU9IlhRdWVyeSAzLjEgUmVxdWlyZW1lbnRzIGFuZCBVc2UgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS0zMS1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBSb2JpZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVybCIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLXVybC0xLTIwMTYxMjA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVUkwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5VUkw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTItMDYgLSA8YSB0aXRsZT0iVVJMIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS91cmwtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFVSTCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bbm5lIHZhbiBLZXN0ZXJlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbSBSdWJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN0cmVhbXMgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtc3RyZWFtcy1hcGktMjAxNjExMjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFN0cmVhbXMgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U3RyZWFtcyBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTEtMjkgLSA8YSB0aXRsZT0iU3RyZWFtcyBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3N0cmVhbXMtYXBpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vc3RyZWFtcy5zcGVjLndoYXR3Zy5vcmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFN0cmVhbXMgQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZlcmFzIE1vdXNzYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRha2VzaGkgWW9zaGlubwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1lZGlhIHNvdXJjZSBleHRlbnNpb25z4oSiIiBkYXRhLXRhZz0iaHRtbCB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L1JFQy1tZWRpYS1zb3VyY2UtMjAxNjExMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lZGlhIFNvdXJjZSBFeHRlbnNpb25z4oSiIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWEgU291cmNlIEV4dGVuc2lvbnPihKI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTEtMTcgLSA8YSB0aXRsZT0iTWVkaWEgU291cmNlIEV4dGVuc2lvbnPihKIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21lZGlhLXNvdXJjZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWVkaWEtc291cmNlLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBNZWRpYSBTb3VyY2UgRXh0ZW5zaW9uc+KEoiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0aGV3IFdvbGVuZXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVycnkgU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIFdhdHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFhcm9uIENvbHdlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZHJpYW4gQmF0ZW1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnZW9sb2NhdGlvbiBhcGkgc3BlY2lmaWNhdGlvbiAybmQgZWRpdGlvbiIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvUkVDLWdlb2xvY2F0aW9uLUFQSS0yMDE2MTEwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR2VvbG9jYXRpb24gQVBJIFNwZWNpZmljYXRpb24gMm5kIEVkaXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HZW9sb2NhdGlvbiBBUEkgU3BlY2lmaWNhdGlvbiAybmQgRWRpdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+R2VvbG9jYXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTExLTA4IC0gPGEgdGl0bGU9Ikdlb2xvY2F0aW9uIEFQSSBTcGVjaWZpY2F0aW9uIDJuZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9nZW9sb2NhdGlvbi1BUEkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dlb2xvY2F0aW9uLWFwaS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR2VvbG9jYXRpb24gQVBJIFNwZWNpZmljYXRpb24gMm5kIEVkaXRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVpIFBvcGVzY3UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBvaW50ZXIgbG9jayIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvUkVDLXBvaW50ZXJsb2NrLTIwMTYxMDI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQb2ludGVyIExvY2sgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qb2ludGVyIExvY2s8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTAtMjcgLSA8YSB0aXRsZT0iUG9pbnRlciBMb2NrIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wb2ludGVybG9jayI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcG9pbnRlcmxvY2svIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBvaW50ZXIgTG9jayI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WaW5jZW50IFNjaGVpYgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNwYXRpYWwgZGF0YSBvbiB0aGUgd2ViIHVzZSBjYXNlcyAmYW1wOyByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLXNkdy11Y3ItMjAxNjEwMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNwYXRpYWwgRGF0YSBvbiB0aGUgV2ViIFVzZSBDYXNlcyAmYW1wOyBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TcGF0aWFsIERhdGEgb24gdGhlIFdlYiBVc2UgQ2FzZXMgJiBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNwYXRpYWwgRGF0YSBvbiB0aGUgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0xMC0yNSAtIDxhIHRpdGxlPSJTcGF0aWFsIERhdGEgb24gdGhlIFdlYiBVc2UgQ2FzZXMgJmFtcDsgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zZHctdWNyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9zZHcvVXNlQ2FzZXMvU0RXVXNlQ2FzZXNBbmRSZXF1aXJlbWVudHMuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTcGF0aWFsIERhdGEgb24gdGhlIFdlYiBVc2UgQ2FzZXMgJmFtcDsgUmVxdWlyZW1lbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyYW5zIEtuaWJiZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZWphbmRybyBMbGF2ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idmlicmF0aW9uIGFwaSAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9SRUMtdmlicmF0aW9uLTIwMTYxMDE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBWaWJyYXRpb24gQVBJIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5WaWJyYXRpb24gQVBJIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTEwLTE4IC0gPGEgdGl0bGU9IlZpYnJhdGlvbiBBUEkgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdmlicmF0aW9uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby92aWJyYXRpb24vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFZpYnJhdGlvbiBBUEkgKFNlY29uZCBFZGl0aW9uKSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnNzaSBLb3N0aWFpbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHBheW1lbnRzIG92ZXJ2aWV3IDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS13ZWJwYXltZW50cy1vdmVydmlldy0yMDE2MTAxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFBheW1lbnRzIE92ZXJ2aWV3IDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiAgUGF5bWVudHMgIE92ZXJ2aWV3Jm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGF5bWVudHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTEwLTEzIC0gPGEgdGl0bGU9IldlYiBQYXltZW50cyBPdmVydmlldyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYnBheW1lbnRzLW92ZXJ2aWV3Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJwYXltZW50cy1vdmVydmlldy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIFBheW1lbnRzIE92ZXJ2aWV3IDEuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYW51IFNwb3JueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkcmlhbiBIb3BlLUJhaWxpZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5pY2sgVGVsZm9yZC1SZWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um95IE1jRWxtdXJyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhcGVuZyBMaXUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGVjaG5pcXVlcyBmb3Igd2NhZyAyLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLVdDQUcyMC1URUNIUy0yMDE2MTAwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGVjaG5pcXVlcyBmb3IgV0NBRyAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UZWNobmlxdWVzICBmb3IgIFdDQUcmbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTAtMDcgLSA8YSB0aXRsZT0iVGVjaG5pcXVlcyBmb3IgV0NBRyAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dDQUcyMC1URUNIUyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IEtpcmtwYXRyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zaHVlIE8mIzAzOTtDb25ub3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1bmRlcnN0YW5kaW5nIHdjYWcgMi4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1VTkRFUlNUQU5ESU5HLVdDQUcyMC0yMDE2MTAwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVW5kZXJzdGFuZGluZyBXQ0FHIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVuZGVyc3RhbmRpbmcgIFdDQUcmbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTAtMDcgLSA8YSB0aXRsZT0iVW5kZXJzdGFuZGluZyBXQ0FHIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvVU5ERVJTVEFORElORy1XQ0FHMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHJldyBLaXJrcGF0cmljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2h1ZSBPJiMwMzk7Q29ubm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1saHR0cHJlcXVlc3QgbGV2ZWwgMSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLVhNTEh0dHBSZXF1ZXN0LTIwMTYxMDA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUxIdHRwUmVxdWVzdCBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MSHR0cFJlcXVlc3QgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBsYXRmb3JtIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0xMC0wNiAtIDxhIHRpdGxlPSJYTUxIdHRwUmVxdWVzdCBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9YTUxIdHRwUmVxdWVzdCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3hoci5zcGVjLndoYXR3Zy5vcmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFhNTEh0dHBSZXF1ZXN0IExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5uZSB2YW4gS2VzdGVyZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdWxpYW4gQXVib3VyZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1bmdrZWUgU29uZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhhbGx2b3JkIFN0ZWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaXNvIGJtZmYgYnl0ZSBzdHJlYW0gZm9ybWF0IiBkYXRhLXRhZz0iaHRtbCB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtbXNlLWJ5dGUtc3RyZWFtLWZvcm1hdC1pc29ibWZmLTIwMTYxMDA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJU08gQk1GRiBCeXRlIFN0cmVhbSBGb3JtYXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JU08gQk1GRiBCeXRlIFN0cmVhbSBGb3JtYXQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTAtMDQgLSA8YSB0aXRsZT0iSVNPIEJNRkYgQnl0ZSBTdHJlYW0gRm9ybWF0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tc2UtYnl0ZS1zdHJlYW0tZm9ybWF0LWlzb2JtZmYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21lZGlhLXNvdXJjZS9pc29ibWZmLWJ5dGUtc3RyZWFtLWZvcm1hdC5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIElTTyBCTUZGIEJ5dGUgU3RyZWFtIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0aGV3IFdvbGVuZXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVycnkgU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIFdhdHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFhcm9uIENvbHdlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZHJpYW4gQmF0ZW1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibXBlZy0yIHRzIGJ5dGUgc3RyZWFtIGZvcm1hdCIgZGF0YS10YWc9Imh0bWwgd2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLW1zZS1ieXRlLXN0cmVhbS1mb3JtYXQtbXAydC0yMDE2MTAwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTVBFRy0yIFRTIEJ5dGUgU3RyZWFtIEZvcm1hdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1QRUctMiBUUyBCeXRlIFN0cmVhbSBGb3JtYXQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMTAtMDQgLSA8YSB0aXRsZT0iTVBFRy0yIFRTIEJ5dGUgU3RyZWFtIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbXNlLWJ5dGUtc3RyZWFtLWZvcm1hdC1tcDJ0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tZWRpYS1zb3VyY2UvbXAydC1ieXRlLXN0cmVhbS1mb3JtYXQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBNUEVHLTIgVFMgQnl0ZSBTdHJlYW0gRm9ybWF0Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHRoZXcgV29sZW5ldHoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZXJyeSBTbWl0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgV2F0c29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWFyb24gQ29sd2VsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkcmlhbiBCYXRlbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtcGVnIGF1ZGlvIGJ5dGUgc3RyZWFtIGZvcm1hdCIgZGF0YS10YWc9Imh0bWwgd2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLW1zZS1ieXRlLXN0cmVhbS1mb3JtYXQtbXBlZy1hdWRpby0yMDE2MTAwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTVBFRyBBdWRpbyBCeXRlIFN0cmVhbSBGb3JtYXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NUEVHIEF1ZGlvIEJ5dGUgU3RyZWFtIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0xMC0wNCAtIDxhIHRpdGxlPSJNUEVHIEF1ZGlvIEJ5dGUgU3RyZWFtIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbXNlLWJ5dGUtc3RyZWFtLWZvcm1hdC1tcGVnLWF1ZGlvIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tZWRpYS1zb3VyY2UvbXBlZy1hdWRpby1ieXRlLXN0cmVhbS1mb3JtYXQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBNUEVHIEF1ZGlvIEJ5dGUgU3RyZWFtIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0aGV3IFdvbGVuZXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWFyb24gQ29sd2VsbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWVkaWEgc291cmNlIGV4dGVuc2lvbnMgYnl0ZSBzdHJlYW0gZm9ybWF0IHJlZ2lzdHJ5IiBkYXRhLXRhZz0iaHRtbCB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtbXNlLWJ5dGUtc3RyZWFtLWZvcm1hdC1yZWdpc3RyeS0yMDE2MTAwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWEgU291cmNlIEV4dGVuc2lvbnMgQnl0ZSBTdHJlYW0gRm9ybWF0IFJlZ2lzdHJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWEgU291cmNlIEV4dGVuc2lvbnMgQnl0ZSBTdHJlYW0gRm9ybWF0IFJlZ2lzdHJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTEwLTA0IC0gPGEgdGl0bGU9Ik1lZGlhIFNvdXJjZSBFeHRlbnNpb25zIEJ5dGUgU3RyZWFtIEZvcm1hdCBSZWdpc3RyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbXNlLWJ5dGUtc3RyZWFtLWZvcm1hdC1yZWdpc3RyeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vbWVkaWEtc291cmNlL2J5dGUtc3RyZWFtLWZvcm1hdC1yZWdpc3RyeS5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1lZGlhIFNvdXJjZSBFeHRlbnNpb25zIEJ5dGUgU3RyZWFtIEZvcm1hdCBSZWdpc3RyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0aGV3IFdvbGVuZXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVycnkgU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BYXJvbiBDb2x3ZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJtIGJ5dGUgc3RyZWFtIGZvcm1hdCIgZGF0YS10YWc9Imh0bWwgd2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLW1zZS1ieXRlLXN0cmVhbS1mb3JtYXQtd2VibS0yMDE2MTAwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViTSBCeXRlIFN0cmVhbSBGb3JtYXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJNIEJ5dGUgU3RyZWFtIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0xMC0wNCAtIDxhIHRpdGxlPSJXZWJNIEJ5dGUgU3RyZWFtIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbXNlLWJ5dGUtc3RyZWFtLWZvcm1hdC13ZWJtIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9tZWRpYS1zb3VyY2Uvd2VibS1ieXRlLXN0cmVhbS1mb3JtYXQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJNIEJ5dGUgU3RyZWFtIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXR0aGV3IFdvbGVuZXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVycnkgU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BYXJvbiBDb2x3ZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJtIHN0cmVhbSBmb3JtYXQiIGRhdGEtdGFnPSJodG1sIHdlYmFwaSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1lbWUtc3RyZWFtLXdlYm0tMjAxNjA5MTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYk0gU3RyZWFtIEZvcm1hdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYk0gU3RyZWFtIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wOS0xNSAtIDxhIHRpdGxlPSJXZWJNIFN0cmVhbSBGb3JtYXQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2VtZS1zdHJlYW0td2VibSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZW5jcnlwdGVkLW1lZGlhL2Zvcm1hdC1yZWdpc3RyeS9zdHJlYW0vd2VibS5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYk0gU3RyZWFtIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSImcXVvdDtjZW5jJnF1b3Q7IGluaXRpYWxpemF0aW9uIGRhdGEgZm9ybWF0IiBkYXRhLXRhZz0iaHRtbCB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtZW1lLWluaXRkYXRhLWNlbmMtMjAxNjA5MTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mICZxdW90O2NlbmMmcXVvdDsgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj4iY2VuYyIgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDktMTUgLSA8YSB0aXRsZT0iJnF1b3Q7Y2VuYyZxdW90OyBJbml0aWFsaXphdGlvbiBEYXRhIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZW1lLWluaXRkYXRhLWNlbmMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2VuY3J5cHRlZC1tZWRpYS9mb3JtYXQtcmVnaXN0cnkvaW5pdGRhdGEvY2VuYy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mICZxdW90O2NlbmMmcXVvdDsgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iJnF1b3Q7a2V5aWRzJnF1b3Q7IGluaXRpYWxpemF0aW9uIGRhdGEgZm9ybWF0IiBkYXRhLXRhZz0iaHRtbCB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtZW1lLWluaXRkYXRhLWtleWlkcy0yMDE2MDkxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgJnF1b3Q7a2V5aWRzJnF1b3Q7IEluaXRpYWxpemF0aW9uIERhdGEgRm9ybWF0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+ImtleWlkcyIgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDktMTUgLSA8YSB0aXRsZT0iJnF1b3Q7a2V5aWRzJnF1b3Q7IEluaXRpYWxpemF0aW9uIERhdGEgRm9ybWF0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbWUtaW5pdGRhdGEta2V5aWRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9lbmNyeXB0ZWQtbWVkaWEvZm9ybWF0LXJlZ2lzdHJ5L2luaXRkYXRhL2tleWlkcy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mICZxdW90O2tleWlkcyZxdW90OyBJbml0aWFsaXphdGlvbiBEYXRhIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImlzbyBjb21tb24gZW5jcnlwdGlvbiAoJiMwMzk7Y2VuYyYjMDM5OykgcHJvdGVjdGlvbiBzY2hlbWUgZm9yIGlzbyBiYXNlIG1lZGlhIGZpbGUgZm9ybWF0IHN0cmVhbSBmb3JtYXQiIGRhdGEtdGFnPSJodG1sIHdlYmFwaSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1lbWUtc3RyZWFtLW1wNC0yMDE2MDkxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSVNPIENvbW1vbiBFbmNyeXB0aW9uICgmIzAzOTtjZW5jJiMwMzk7KSBQcm90ZWN0aW9uIFNjaGVtZSBmb3IgSVNPIEJhc2UgTWVkaWEgRmlsZSBGb3JtYXQgU3RyZWFtIEZvcm1hdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPklTTyBDb21tb24gRW5jcnlwdGlvbiAoJ2NlbmMnKSBQcm90ZWN0aW9uIFNjaGVtZSBmb3IgSVNPIEJhc2UgTWVkaWEgRmlsZSBGb3JtYXQgU3RyZWFtIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wOS0xNSAtIDxhIHRpdGxlPSJJU08gQ29tbW9uIEVuY3J5cHRpb24gKCYjMDM5O2NlbmMmIzAzOTspIFByb3RlY3Rpb24gU2NoZW1lIGZvciBJU08gQmFzZSBNZWRpYSBGaWxlIEZvcm1hdCBTdHJlYW0gRm9ybWF0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbWUtc3RyZWFtLW1wNCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZW5jcnlwdGVkLW1lZGlhL2Zvcm1hdC1yZWdpc3RyeS9zdHJlYW0vbXA0Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSVNPIENvbW1vbiBFbmNyeXB0aW9uICgmIzAzOTtjZW5jJiMwMzk7KSBQcm90ZWN0aW9uIFNjaGVtZSBmb3IgSVNPIEJhc2UgTWVkaWEgRmlsZSBGb3JtYXQgU3RyZWFtIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlbmNyeXB0ZWQgbWVkaWEgZXh0ZW5zaW9ucyBpbml0aWFsaXphdGlvbiBkYXRhIGZvcm1hdCByZWdpc3RyeSIgZGF0YS10YWc9Imh0bWwgd2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLWVtZS1pbml0ZGF0YS1yZWdpc3RyeS0yMDE2MDkxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRW5jcnlwdGVkIE1lZGlhIEV4dGVuc2lvbnMgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQgUmVnaXN0cnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FbmNyeXB0ZWQgTWVkaWEgRXh0ZW5zaW9ucyBJbml0aWFsaXphdGlvbiBEYXRhIEZvcm1hdCBSZWdpc3RyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wOS0xNSAtIDxhIHRpdGxlPSJFbmNyeXB0ZWQgTWVkaWEgRXh0ZW5zaW9ucyBJbml0aWFsaXphdGlvbiBEYXRhIEZvcm1hdCBSZWdpc3RyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZW1lLWluaXRkYXRhLXJlZ2lzdHJ5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9lbmNyeXB0ZWQtbWVkaWEvZm9ybWF0LXJlZ2lzdHJ5L2luaXRkYXRhLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFbmNyeXB0ZWQgTWVkaWEgRXh0ZW5zaW9ucyBJbml0aWFsaXphdGlvbiBEYXRhIEZvcm1hdCBSZWdpc3RyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSImcXVvdDt3ZWJtJnF1b3Q7IGluaXRpYWxpemF0aW9uIGRhdGEgZm9ybWF0IiBkYXRhLXRhZz0iaHRtbCB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtZW1lLWluaXRkYXRhLXdlYm0tMjAxNjA5MTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mICZxdW90O3dlYm0mcXVvdDsgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj4id2VibSIgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDktMTUgLSA8YSB0aXRsZT0iJnF1b3Q7d2VibSZxdW90OyBJbml0aWFsaXphdGlvbiBEYXRhIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZW1lLWluaXRkYXRhLXdlYm0iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2VuY3J5cHRlZC1tZWRpYS9mb3JtYXQtcmVnaXN0cnkvaW5pdGRhdGEvd2VibS5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mICZxdW90O3dlYm0mcXVvdDsgSW5pdGlhbGl6YXRpb24gRGF0YSBGb3JtYXQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZWN1cmUgY29udGV4dHMiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L0NSLXNlY3VyZS1jb250ZXh0cy0yMDE2MDkxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2VjdXJlIENvbnRleHRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VjdXJlIENvbnRleHRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA5LTE1IC0gPGEgdGl0bGU9IlNlY3VyZSBDb250ZXh0cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2VjdXJlLWNvbnRleHRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtc2VjdXJlLWNvbnRleHRzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTZWN1cmUgQ29udGV4dHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBXZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZW5jcnlwdGVkIG1lZGlhIGV4dGVuc2lvbnMgc3RyZWFtIGZvcm1hdCByZWdpc3RyeSIgZGF0YS10YWc9Imh0bWwgd2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLWVtZS1zdHJlYW0tcmVnaXN0cnktMjAxNjA5MTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEVuY3J5cHRlZCBNZWRpYSBFeHRlbnNpb25zIFN0cmVhbSBGb3JtYXQgUmVnaXN0cnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FbmNyeXB0ZWQgTWVkaWEgRXh0ZW5zaW9ucyBTdHJlYW0gRm9ybWF0IFJlZ2lzdHJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA5LTE1IC0gPGEgdGl0bGU9IkVuY3J5cHRlZCBNZWRpYSBFeHRlbnNpb25zIFN0cmVhbSBGb3JtYXQgUmVnaXN0cnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2VtZS1zdHJlYW0tcmVnaXN0cnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2VuY3J5cHRlZC1tZWRpYS9mb3JtYXQtcmVnaXN0cnkvc3RyZWFtLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBFbmNyeXB0ZWQgTWVkaWEgRXh0ZW5zaW9ucyBTdHJlYW0gRm9ybWF0IFJlZ2lzdHJ5Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb250ZW50IHNlY3VyaXR5IHBvbGljeTogY29va2llIGNvbnRyb2xzIiBkYXRhLXRhZz0ic2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1jc3AtY29va2llcy0yMDE2MDkxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29udGVudCBTZWN1cml0eSBQb2xpY3k6IENvb2tpZSBDb250cm9scyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5OiBDb29raWUgQ29udHJvbHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbiBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDktMTMgLSA8YSB0aXRsZT0iQ29udGVudCBTZWN1cml0eSBQb2xpY3k6IENvb2tpZSBDb250cm9scyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NwLWNvb2tpZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jc3AvY29va2llcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ29udGVudCBTZWN1cml0eSBQb2xpY3k6IENvb2tpZSBDb250cm9scyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWtlIFdlc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZW50cnkgcG9pbnQgcmVndWxhdGlvbiIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtZXByLTIwMTYwOTEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFbnRyeSBQb2ludCBSZWd1bGF0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RW50cnkgUG9pbnQgUmVndWxhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wOS0xMyAtIDxhIHRpdGxlPSJFbnRyeSBQb2ludCBSZWd1bGF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lcHIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1lcHIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEVudHJ5IFBvaW50IFJlZ3VsYXRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBXZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbnRlbnQgc2VjdXJpdHkgcG9saWN5IHBpbm5pbmciIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLWNzcC1waW5uaW5nLTIwMTYwOTEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBQaW5uaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29udGVudCBTZWN1cml0eSBQb2xpY3kgUGlubmluZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wOS0xMyAtIDxhIHRpdGxlPSJDb250ZW50IFNlY3VyaXR5IFBvbGljeSBQaW5uaW5nIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3AtcGlubmluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLWNzcC9waW5uaW5nLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBQaW5uaW5nIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgV2VzdAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbnRlbnQgc2VjdXJpdHkgcG9saWN5OiBlbWJlZGRlZCBlbmZvcmNlbWVudCIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L1dELWNzcC1lbWJlZGRlZC1lbmZvcmNlbWVudC0yMDE2MDkwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29udGVudCBTZWN1cml0eSBQb2xpY3k6IEVtYmVkZGVkIEVuZm9yY2VtZW50IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29udGVudCBTZWN1cml0eSBQb2xpY3k6IEVtYmVkZGVkIEVuZm9yY2VtZW50PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA5LTA5IC0gPGEgdGl0bGU9IkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5OiBFbWJlZGRlZCBFbmZvcmNlbWVudCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NwLWVtYmVkZGVkLWVuZm9yY2VtZW50Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtY3NwZWUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5OiBFbWJlZGRlZCBFbmZvcmNlbWVudCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWl4ZWQgY29udGVudCIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvQ1ItbWl4ZWQtY29udGVudC0yMDE2MDgwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWl4ZWQgQ29udGVudCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1peGVkIENvbnRlbnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbiBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDgtMDIgLSA8YSB0aXRsZT0iTWl4ZWQgQ29udGVudCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWl4ZWQtY29udGVudCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLW1peGVkLWNvbnRlbnQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1peGVkIENvbnRlbnQiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBXZXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cHJvYyAyLjA6IHN0YW5kYXJkIHN0ZXAgbGlicmFyeSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS14cHJvYzIwLXN0ZXBzLTIwMTYwNzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUHJvYyAyLjA6IFN0YW5kYXJkIFN0ZXAgTGlicmFyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhQcm9jIDIuMDogU3RhbmRhcmQgU3RlcCBMaWJyYXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvY2Vzc2luZyBNb2RlbCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDctMjEgLSA8YSB0aXRsZT0iWFByb2MgMi4wOiBTdGFuZGFyZCBTdGVwIExpYnJhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwcm9jMjAtc3RlcHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4IE1pxYJvd3NraQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJ5IFRob21wc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgaW5jbHVzaW9ucyAoeGluY2x1ZGUpIHZlcnNpb24gMS4xIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUteGluY2x1ZGUtMTEtMjAxNjA3MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBJbmNsdXNpb25zIChYSW5jbHVkZSkgVmVyc2lvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgIEluY2x1c2lvbnMgIChYSW5jbHVkZSkgIFZlcnNpb24mbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wNy0yMSAtIDxhIHRpdGxlPSJYTUwgSW5jbHVzaW9ucyAoWEluY2x1ZGUpIFZlcnNpb24gMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aW5jbHVkZS0xMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIE1hcnNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgT3JjaGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBWZWlsbGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vcm1hbiBXYWxzaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhwcm9jIDIuMDogYW4geG1sIHBpcGVsaW5lIGxhbmd1YWdlIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUteHByb2MyMC0yMDE2MDcyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFByb2MgMi4wOiBBbiBYTUwgUGlwZWxpbmUgTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUHJvYyAyLjA6IEFuIFhNTCBQaXBlbGluZSBMYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb2Nlc3NpbmcgTW9kZWwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA3LTIxIC0gPGEgdGl0bGU9IlhQcm9jIDIuMDogQW4gWE1MIFBpcGVsaW5lIExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cHJvYzIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleCBNacWCb3dza2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yeSBUaG9tcHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImZyYW1lIHRpbWluZyIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLWZyYW1lLXRpbWluZy0yMDE2MDcyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRnJhbWUgVGltaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RnJhbWUgVGltaW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA3LTIwIC0gPGEgdGl0bGU9IkZyYW1lIFRpbWluZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZnJhbWUtdGltaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd2ljZy5naXRodWIuaW8vZnJhbWUtdGltaW5nLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBGcmFtZSBUaW1pbmciPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2FpLWFyaWEgMS4wIHByaW1lciIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvV0Qtd2FpLWFyaWEtcHJpbWVyLTIwMTYwNzE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXQUktQVJJQSAxLjAgUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V0FJLUFSSUEgMS4wIFByaW1lcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDctMTQgLSA8YSB0aXRsZT0iV0FJLUFSSUEgMS4wIFByaW1lciBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2FpLWFyaWEtcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGlzYSBQYXBwYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFNjaHdlcmR0ZmVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2FpLWFyaWEgMS4wIGF1dGhvcmluZyBwcmFjdGljZXMiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L1dELXdhaS1hcmlhLXByYWN0aWNlcy0yMDE2MDcxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV0FJLUFSSUEgMS4wIEF1dGhvcmluZyBQcmFjdGljZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XQUktQVJJQSAxLjAgQXV0aG9yaW5nIFByYWN0aWNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDctMTQgLSA8YSB0aXRsZT0iV0FJLUFSSUEgMS4wIEF1dGhvcmluZyBQcmFjdGljZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dhaS1hcmlhLXByYWN0aWNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBTY2hldWhhbW1lcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN1YnJlc291cmNlIGludGVncml0eSIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9SRUMtU1JJLTIwMTYwNjIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTdWJyZXNvdXJjZSBJbnRlZ3JpdHkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TdWJyZXNvdXJjZSBJbnRlZ3JpdHk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbiBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDYtMjMgLSA8YSB0aXRsZT0iU3VicmVzb3VyY2UgSW50ZWdyaXR5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TUkkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1zdWJyZXNvdXJjZS1pbnRlZ3JpdHkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFN1YnJlc291cmNlIEludGVncml0eSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZXZkYXR0YSBBa2hhd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpayBCcmF1bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyYW5jb2lzIE1hcmllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvZWwgV2VpbmJlcmdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idXNlciBpbnRlcmZhY2Ugc2VjdXJpdHkgYW5kIHRoZSB2aXNpYmlsaXR5IGFwaSIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L1dELVVJU2VjdXJpdHktMjAxNjA2MDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVzZXIgSW50ZXJmYWNlIFNlY3VyaXR5IGFuZCB0aGUgVmlzaWJpbGl0eSBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2VyIEludGVyZmFjZSBTZWN1cml0eSBhbmQgdGhlIFZpc2liaWxpdHkgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA2LTA3IC0gPGEgdGl0bGU9IlVzZXIgSW50ZXJmYWNlIFNlY3VyaXR5IGFuZCB0aGUgVmlzaWJpbGl0eSBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1VJU2VjdXJpdHkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy11aXNlY3VyaXR5L2luZGV4Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVXNlciBJbnRlcmZhY2UgU2VjdXJpdHkgYW5kIHRoZSBWaXNpYmlsaXR5IEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmFkIEhpbGwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW5wdXQgbWV0aG9kIGVkaXRvciBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1pbWUtYXBpLTIwMTYwNTI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbnB1dCBNZXRob2QgRWRpdG9yIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPklucHV0IE1ldGhvZCBFZGl0b3IgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGxhdGZvcm0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA1LTI0IC0gPGEgdGl0bGU9IklucHV0IE1ldGhvZCBFZGl0b3IgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9pbWUtYXBpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9pbWUtYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbnB1dCBNZXRob2QgRWRpdG9yIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UcmF2aXMgTGVpdGhlYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icXVvdGEgbWFuYWdlbWVudCBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1xdW90YS1hcGktMjAxNjA1MjMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFF1b3RhIE1hbmFnZW1lbnQgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UXVvdGEgTWFuYWdlbWVudCBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDUtMjMgLSA8YSB0aXRsZT0iUXVvdGEgTWFuYWdlbWVudCBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3F1b3RhLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vcXVvdGEtYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBRdW90YSBNYW5hZ2VtZW50IEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LaW51a28gWWFzdWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZG9tIHBhcnNpbmcgYW5kIHNlcmlhbGl6YXRpb24iIGRhdGEtdGFnPSJkb20iIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvV0QtRE9NLVBhcnNpbmctMjAxNjA1MTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERPTSBQYXJzaW5nIGFuZCBTZXJpYWxpemF0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RE9NIFBhcnNpbmcgYW5kIFNlcmlhbGl6YXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQbGF0Zm9ybSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDUtMTcgLSA8YSB0aXRsZT0iRE9NIFBhcnNpbmcgYW5kIFNlcmlhbGl6YXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0RPTS1QYXJzaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9ET00tUGFyc2luZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRE9NIFBhcnNpbmcgYW5kIFNlcmlhbGl6YXRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VHJhdmlzIExlaXRoZWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkaWdpdGFsIHB1Ymxpc2hpbmcgYW5kIGFjY2Vzc2liaWxpdHkgaW4gdzNjIGRvY3VtZW50cyIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkgZHB1YiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1kcHViLWFjY2Vzc2liaWxpdHktMjAxNjA1MDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERpZ2l0YWwgUHVibGlzaGluZyBhbmQgQWNjZXNzaWJpbGl0eSBpbiBXM0MgRG9jdW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGlnaXRhbCBQdWJsaXNoaW5nIGFuZCBBY2Nlc3NpYmlsaXR5IGluIFczQyBEb2N1bWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRpZ2l0YWwgUHVibGlzaGluZyBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTA1LTAzIC0gPGEgdGl0bGU9IkRpZ2l0YWwgUHVibGlzaGluZyBhbmQgQWNjZXNzaWJpbGl0eSBpbiBXM0MgRG9jdW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kcHViLWFjY2Vzc2liaWxpdHkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RwdWItYWNjZXNzaWJpbGl0eS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRGlnaXRhbCBQdWJsaXNoaW5nIGFuZCBBY2Nlc3NpYmlsaXR5IGluIFczQyBEb2N1bWVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVib3JhaCBLYXBsYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGFybGVzIExhUGllcnJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkcHViIj5EaWdpdGFsIFB1Ymxpc2hpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2FzY2FkaW5nIHN0eWxlIHNoZWV0cyBsZXZlbCAyIHJldmlzaW9uIDIgKGNzcyAyLjIpIHNwZWNpZmljYXRpb24iIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9XRC1DU1MyMi0yMDE2MDQxMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyBMZXZlbCAyIFJldmlzaW9uIDIgKENTUyAyLjIpIFNwZWNpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIExldmVsIDIgUmV2aXNpb24gMiAoQ1NTIDIuMikgU3BlY2lmaWNhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDQtMTIgLSA8YSB0aXRsZT0iQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyBMZXZlbCAyIFJldmlzaW9uIDIgKENTUyAyLjIpIFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NTUzIyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MyLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIExldmVsIDIgUmV2aXNpb24gMiAoQ1NTIDIuMikgU3BlY2lmaWNhdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJ0IEJvcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYmNyeXB0byBrZXkgZGlzY292ZXJ5IiBkYXRhLXRhZz0ic2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS13ZWJjcnlwdG8ta2V5LWRpc2NvdmVyeS0yMDE2MDMyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViQ3J5cHRvIEtleSBEaXNjb3ZlcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJDcnlwdG8gS2V5IERpc2NvdmVyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIENyeXB0b2dyYXBoeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDMtMjkgLSA8YSB0aXRsZT0iV2ViQ3J5cHRvIEtleSBEaXNjb3ZlcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmNyeXB0by1rZXktZGlzY292ZXJ5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHZjcy53My5vcmcvaGcvd2ViY3J5cHRvLWtleWRpc2NvdmVyeS9yYXctZmlsZS90aXAvT3ZlcnZpZXcuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXZWJDcnlwdG8gS2V5IERpc2NvdmVyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIFdhdHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBkZXZpY2UgYWRhcHRhdGlvbiBtb2R1bGUgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9XRC1jc3MtZGV2aWNlLWFkYXB0LTEtMjAxNjAzMjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBEZXZpY2UgQWRhcHRhdGlvbiBNb2R1bGUgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgRGV2aWNlICBBZGFwdGF0aW9uICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDMtMjkgLSA8YSB0aXRsZT0iQ1NTIERldmljZSBBZGFwdGF0aW9uIE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtZGV2aWNlLWFkYXB0LTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1kZXZpY2UtYWRhcHQvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBEZXZpY2UgQWRhcHRhdGlvbiBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SdW5lIExpbGxlc3ZlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFJpdm9hbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgUmFrb3cKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIG9iamVjdCBtb2RlbCAoY3Nzb20pIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L1dELWNzc29tLTEtMjAxNjAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBPYmplY3QgTW9kZWwgKENTU09NKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBPYmplY3QgTW9kZWwgKENTU09NKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDMtMTcgLSA8YSB0aXRsZT0iQ1NTIE9iamVjdCBNb2RlbCAoQ1NTT00pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3NvbS0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIE9iamVjdCBNb2RlbCAoQ1NTT00pIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFBpZXRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HbGVubiBBZGFtcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3NvbSB2aWV3IG1vZHVsZSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9XRC1jc3NvbS12aWV3LTEtMjAxNjAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTU09NIFZpZXcgTW9kdWxlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTT00gVmlldyBNb2R1bGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTAzLTE3IC0gPGEgdGl0bGU9IkNTU09NIFZpZXcgTW9kdWxlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3NvbS12aWV3LTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLXZpZXcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTU09NIFZpZXcgTW9kdWxlIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFBpZXRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFjY2Vzc2liaWxpdHkgcmVxdWlyZW1lbnRzIGZvciBwZW9wbGUgd2l0aCBsb3cgdmlzaW9uIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9XRC1sb3ctdmlzaW9uLW5lZWRzLTIwMTYwMzE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY2Nlc3NpYmlsaXR5IFJlcXVpcmVtZW50cyBmb3IgUGVvcGxlIHdpdGggTG93IFZpc2lvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFjY2Vzc2liaWxpdHkgUmVxdWlyZW1lbnRzIGZvciBQZW9wbGUgd2l0aCBMb3cgVmlzaW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE2LTAzLTE3IC0gPGEgdGl0bGU9IkFjY2Vzc2liaWxpdHkgUmVxdWlyZW1lbnRzIGZvciBQZW9wbGUgd2l0aCBMb3cgVmlzaW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sb3ctdmlzaW9uLW5lZWRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9sb3ctdmlzaW9uLWExMXktdGYvcmVxdWlyZW1lbnRzLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQWNjZXNzaWJpbGl0eSBSZXF1aXJlbWVudHMgZm9yIFBlb3BsZSB3aXRoIExvdyBWaXNpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIEFsbGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IEtpcmtwYXRyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhd24gTGF3dG9uIEhlbnJ5IChUQWRFUikKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id29mZiAyLjAgZXZhbHVhdGlvbiByZXBvcnQiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L05PVEUtV09GRjIwRVItMjAxNjAzMTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdPRkYgMi4wIEV2YWx1YXRpb24gUmVwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V09GRiAyLjAgRXZhbHVhdGlvbiBSZXBvcnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBGb250cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDMtMTUgLSA8YSB0aXRsZT0iV09GRiAyLjAgRXZhbHVhdGlvbiBSZXBvcnQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dPRkYyMEVSIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9Gb250cy9XRy9XT0ZGMkVSLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXT0ZGIDIuMCBFdmFsdWF0aW9uIFJlcG9ydCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlbWJlZGRpbmcgdGFidWxhciBtZXRhZGF0YSBpbiBodG1sIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS1jc3Z3LWh0bWwtMjAxNjAyMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEVtYmVkZGluZyBUYWJ1bGFyIE1ldGFkYXRhIGluIEhUTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FbWJlZGRpbmcgVGFidWxhciBNZXRhZGF0YSBpbiBIVE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DU1Ygb24gdGhlIFdlYiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTYtMDItMjUgLSA8YSB0aXRsZT0iRW1iZWRkaW5nIFRhYnVsYXIgTWV0YWRhdGEgaW4gSFRNTCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3N2dy1odG1sIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9jc3Z3L2h0bWwtbm90ZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRW1iZWRkaW5nIFRhYnVsYXIgTWV0YWRhdGEgaW4gSFRNTCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBLZWxsb2dnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwgaW1wb3J0cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9XRC1odG1sLWltcG9ydHMtMjAxNjAyMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgSW1wb3J0cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgSW1wb3J0czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFBsYXRmb3JtIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wMi0yNSAtIDxhIHRpdGxlPSJIVE1MIEltcG9ydHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtaW1wb3J0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL2ltcG9ydHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEhUTUwgSW1wb3J0cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaW1pdHJpIEdsYXprb3YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IYWppbWUgTW9yaXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3N2IG9uIHRoZSB3ZWI6IGEgcHJpbWVyIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTYvTk9URS10YWJ1bGFyLWRhdGEtcHJpbWVyLTIwMTYwMjI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1Ygb24gdGhlIFdlYjogQSBQcmltZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1Ygb24gdGhlIFdlYjogQSBQcmltZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNTViBvbiB0aGUgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wMi0yNSAtIDxhIHRpdGxlPSJDU1Ygb24gdGhlIFdlYjogQSBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RhYnVsYXItZGF0YS1wcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NzdncvcHJpbWVyLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1Ygb24gdGhlIFdlYjogQSBQcmltZXIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVuaSBUZW5uaXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3Ygb24gdGhlIHdlYjogdXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNi9OT1RFLWNzdnctdWNyLTIwMTYwMjI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1Ygb24gdGhlIFdlYjogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1Ygb24gdGhlIFdlYjogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNTViBvbiB0aGUgV2ViIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wMi0yNSAtIDxhIHRpdGxlPSJDU1Ygb24gdGhlIFdlYjogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NzdnctdWNyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9jc3Z3L3VzZS1jYXNlcy1hbmQtcmVxdWlyZW1lbnRzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1Ygb24gdGhlIFdlYjogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVyZW15IFRhbmR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWRlIENlb2xpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWMgU3RlcGhhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIHdjYWcgMi4wIGV4dGVuc2lvbnMiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE2L1dELXdjYWcyLWV4dC1yZXEtMjAxNjAxMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgV0NBRyAyLjAgRXh0ZW5zaW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyBmb3IgV0NBRyAyLjAgRXh0ZW5zaW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNi0wMS0wNSAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIFdDQUcgMi4wIEV4dGVuc2lvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3djYWcyLWV4dC1yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3djYWcvd2NhZzIwL2V4dGVuc2lvbnMvcmVxdWlyZW1lbnRzLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUmVxdWlyZW1lbnRzIGZvciBXQ0FHIDIuMCBFeHRlbnNpb25zIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IEtpcmtwYXRyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zaHVlIE8mIzAzOTtDb25ub3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibW9kZWwgZm9yIHRhYnVsYXIgZGF0YSBhbmQgbWV0YWRhdGEgb24gdGhlIHdlYiIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy10YWJ1bGFyLWRhdGEtbW9kZWwtMjAxNTEyMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vZGVsIGZvciBUYWJ1bGFyIERhdGEgYW5kIE1ldGFkYXRhIG9uIHRoZSBXZWIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Nb2RlbCBmb3IgVGFidWxhciBEYXRhIGFuZCBNZXRhZGF0YSBvbiB0aGUgV2ViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DU1Ygb24gdGhlIFdlYiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMTItMTcgLSA8YSB0aXRsZT0iTW9kZWwgZm9yIFRhYnVsYXIgRGF0YSBhbmQgTWV0YWRhdGEgb24gdGhlIFdlYiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdGFidWxhci1kYXRhLW1vZGVsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9jc3Z3L3N5bnRheC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTW9kZWwgZm9yIFRhYnVsYXIgRGF0YSBhbmQgTWV0YWRhdGEgb24gdGhlIFdlYiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZW5pIFRlbm5pc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZ2cgS2VsbG9nZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnZW5lcmF0aW5nIGpzb24gZnJvbSB0YWJ1bGFyIGRhdGEgb24gdGhlIHdlYiIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy1jc3YyanNvbi0yMDE1MTIxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR2VuZXJhdGluZyBKU09OIGZyb20gVGFidWxhciBEYXRhIG9uIHRoZSBXZWIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HZW5lcmF0aW5nIEpTT04gZnJvbSBUYWJ1bGFyIERhdGEgb24gdGhlIFdlYjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q1NWIG9uIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTEyLTE3IC0gPGEgdGl0bGU9IkdlbmVyYXRpbmcgSlNPTiBmcm9tIFRhYnVsYXIgRGF0YSBvbiB0aGUgV2ViIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3YyanNvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vY3N2dy9jc3YyanNvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR2VuZXJhdGluZyBKU09OIGZyb20gVGFidWxhciBEYXRhIG9uIHRoZSBXZWIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVyZW15IFRhbmR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXZhbiBIZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZ2VuZXJhdGluZyByZGYgZnJvbSB0YWJ1bGFyIGRhdGEgb24gdGhlIHdlYiIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy1jc3YycmRmLTIwMTUxMjE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHZW5lcmF0aW5nIFJERiBmcm9tIFRhYnVsYXIgRGF0YSBvbiB0aGUgV2ViIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+R2VuZXJhdGluZyBSREYgZnJvbSBUYWJ1bGFyIERhdGEgb24gdGhlIFdlYjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q1NWIG9uIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTEyLTE3IC0gPGEgdGl0bGU9IkdlbmVyYXRpbmcgUkRGIGZyb20gVGFidWxhciBEYXRhIG9uIHRoZSBXZWIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NzdjJyZGYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NzdncvY3N2MnJkZi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR2VuZXJhdGluZyBSREYgZnJvbSBUYWJ1bGFyIERhdGEgb24gdGhlIFdlYiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZXJlbXkgVGFuZHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdmFuIEhlcm1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWdnIEtlbGxvZ2cKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWV0YWRhdGEgdm9jYWJ1bGFyeSBmb3IgdGFidWxhciBkYXRhIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvUkVDLXRhYnVsYXItbWV0YWRhdGEtMjAxNTEyMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1ldGFkYXRhIFZvY2FidWxhcnkgZm9yIFRhYnVsYXIgRGF0YSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1ldGFkYXRhIFZvY2FidWxhcnkgZm9yIFRhYnVsYXIgRGF0YTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q1NWIG9uIHRoZSBXZWIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTEyLTE3IC0gPGEgdGl0bGU9Ik1ldGFkYXRhIFZvY2FidWxhcnkgZm9yIFRhYnVsYXIgRGF0YSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdGFidWxhci1tZXRhZGF0YSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vY3N2dy9tZXRhZGF0YS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWV0YWRhdGEgVm9jYWJ1bGFyeSBmb3IgVGFidWxhciBEYXRhIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplbmkgVGVubmlzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBLZWxsb2dnCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idWFhZyAyLjAgcmVmZXJlbmNlOiBleHBsYW5hdGlvbnMsIGV4YW1wbGVzLCBhbmQgcmVzb3VyY2VzIGZvciB1c2VyIGFnZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAyLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLVVBQUcyMC1SZWZlcmVuY2UtMjAxNTEyMTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVBQUcgMi4wIFJlZmVyZW5jZTogRXhwbGFuYXRpb25zLCBFeGFtcGxlcywgYW5kIFJlc291cmNlcyBmb3IgVXNlciBBZ2VudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VUFBRyAgMi4wICBSZWZlcmVuY2U6ICBFeHBsYW5hdGlvbnMsICBFeGFtcGxlcywgIGFuZCAgUmVzb3VyY2VzICBmb3IgIFVzZXIgIEFnZW50ICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Vc2VyIEFnZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMTItMTUgLSA8YSB0aXRsZT0iVUFBRyAyLjAgUmVmZXJlbmNlOiBFeHBsYW5hdGlvbnMsIEV4YW1wbGVzLCBhbmQgUmVzb3VyY2VzIGZvciBVc2VyIEFnZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1VBQUcyMC1SZWZlcmVuY2UiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW1lcyBBbGxhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWcgTG93bmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2ltYmVybHkgUGF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZWFubmUgRiBTcGVsbG1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2VyIGFnZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAodWFhZykgMi4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0idXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLVVBQUcyMC0yMDE1MTIxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNlciBBZ2VudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgKFVBQUcpIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVzZXIgIEFnZW50ICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzICAoVUFBRykmbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVzZXIgQWdlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0xMi0xNSAtIDxhIHRpdGxlPSJVc2VyIEFnZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoVUFBRykgMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9VQUFHMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1VQUFHMjAtMjAxNTEyMTUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFVzZXIgQWdlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChVQUFHKSAyLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQWxsYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnIExvd25leQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktpbWJlcmx5IFBhdGNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbm5lIEYgU3BlbGxtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgYW5kIHhwYXRoIGZ1bGwgdGV4dCAzLjAgcmVxdWlyZW1lbnRzIGFuZCB1c2UgY2FzZXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUteHBhdGgtZnVsbC10ZXh0LTMwLXJlcXVpcmVtZW50cy11c2UtY2FzZXMtMjAxNTEyMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSBhbmQgWFBhdGggRnVsbCBUZXh0IDMuMCBSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSBhbmQgWFBhdGggRnVsbCBUZXh0IDMuMCBSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0xMi0xMCAtIDxhIHRpdGxlPSJYUXVlcnkgYW5kIFhQYXRoIEZ1bGwgVGV4dCAzLjAgUmVxdWlyZW1lbnRzIGFuZCBVc2UgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwYXRoLWZ1bGwtdGV4dC0zMC1yZXF1aXJlbWVudHMtdXNlLWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF0IENhc2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBjdXN0b20gcHJvcGVydGllcyBmb3IgY2FzY2FkaW5nIHZhcmlhYmxlcyBtb2R1bGUgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L0NSLWNzcy12YXJpYWJsZXMtMS0yMDE1MTIwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEN1c3RvbSBQcm9wZXJ0aWVzIGZvciBDYXNjYWRpbmcgVmFyaWFibGVzIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBDdXN0b20gIFByb3BlcnRpZXMgIGZvciAgQ2FzY2FkaW5nICBWYXJpYWJsZXMgIE1vZHVsZSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0xMi0wMyAtIDxhIHRpdGxlPSJDU1MgQ3VzdG9tIFByb3BlcnRpZXMgZm9yIENhc2NhZGluZyBWYXJpYWJsZXMgTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy12YXJpYWJsZXMtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhcmlhYmxlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEN1c3RvbSBQcm9wZXJ0aWVzIGZvciBDYXNjYWRpbmcgVmFyaWFibGVzIE1vZHVsZSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYSBhY2Nlc3NpYmlsaXR5IHVzZXIgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSBodG1sIG1lZGlhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLW1lZGlhLWFjY2Vzc2liaWxpdHktcmVxcy0yMDE1MTIwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWEgQWNjZXNzaWJpbGl0eSBVc2VyIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1lZGlhIEFjY2Vzc2liaWxpdHkgVXNlciBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29scyBhbmQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMTItMDMgLSA8YSB0aXRsZT0iTWVkaWEgQWNjZXNzaWJpbGl0eSBVc2VyIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWVkaWEtYWNjZXNzaWJpbGl0eS1yZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9wZndnL21lZGlhLWFjY2Vzc2liaWxpdHktcmVxcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTWVkaWEgQWNjZXNzaWJpbGl0eSBVc2VyIFJlcXVpcmVtZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFuZSBNY0NhcnJvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBTYWRlY2tpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB3aWxsIGNoYW5nZSBtb2R1bGUgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L0NSLWNzcy13aWxsLWNoYW5nZS0xLTIwMTUxMjAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgV2lsbCBDaGFuZ2UgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFdpbGwgIENoYW5nZSAgTW9kdWxlICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTEyLTAzIC0gPGEgdGl0bGU9IkNTUyBXaWxsIENoYW5nZSBNb2R1bGUgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXdpbGwtY2hhbmdlLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy13aWxsLWNoYW5nZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFdpbGwgQ2hhbmdlIE1vZHVsZSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgYW5kIHhwYXRoIGZ1bGwgdGV4dCAzLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy14cGF0aC1mdWxsLXRleHQtMzAtMjAxNTExMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSBhbmQgWFBhdGggRnVsbCBUZXh0IDMuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAgYW5kICBYUGF0aCAgRnVsbCAgVGV4dCZuYnNwOzMuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0xMS0yNCAtIDxhIHRpdGxlPSJYUXVlcnkgYW5kIFhQYXRoIEZ1bGwgVGV4dCAzLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwYXRoLWZ1bGwtdGV4dC0zMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnkgSG9sc3RlZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KaW0gTWVsdG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb25maW5lbWVudCB3aXRoIG9yaWdpbiB3ZWIgbGFiZWxzIiBkYXRhLXRhZz0ic2VjdXJpdHkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvV0QtQ09XTC0yMDE1MTAxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29uZmluZW1lbnQgd2l0aCBPcmlnaW4gV2ViIExhYmVscyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbmZpbmVtZW50IHdpdGggT3JpZ2luIFdlYiBMYWJlbHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBBcHBsaWNhdGlvbiBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMTAtMTUgLSA8YSB0aXRsZT0iQ29uZmluZW1lbnQgd2l0aCBPcmlnaW4gV2ViIExhYmVscyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvQ09XTCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLWNvd2wvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENvbmZpbmVtZW50IHdpdGggT3JpZ2luIFdlYiBMYWJlbHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVpYW4gU3RlZmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBzbmFwc2hvdCAyMDE1IiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtY3NzLTIwMTUtMjAxNTEwMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBTbmFwc2hvdCAyMDE1IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTIFNuYXBzaG90IDIwMTU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTEwLTEzIC0gPGEgdGl0bGU9IkNTUyBTbmFwc2hvdCAyMDE1IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtMjAxNSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLTIwMTUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBTbmFwc2hvdCAyMDE1Ij5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhYiBBdGtpbnMgSnIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmxvcmlhbiBSaXZvYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVwZ3JhZGUgaW5zZWN1cmUgcmVxdWVzdHMiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9ImNyIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPkNSPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iQ2FuZGlkYXRlUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L0NSLXVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMtMjAxNTEwMDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVwZ3JhZGUgSW5zZWN1cmUgUmVxdWVzdHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5VcGdyYWRlIEluc2VjdXJlIFJlcXVlc3RzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTEwLTA4IC0gPGEgdGl0bGU9IlVwZ3JhZGUgSW5zZWN1cmUgUmVxdWVzdHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3VwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy11cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBVcGdyYWRlIEluc2VjdXJlIFJlcXVlc3RzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgV2VzdAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhIHRyYW5zY3JpcHQgZXh0ZW5zaW9uIGZvciBodG1sIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLWh0bWwtdHJhbnNjcmlwdC1zcmMtMjAxNTEwMDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEEgdHJhbnNjcmlwdCBleHRlbnNpb24gZm9yIEhUTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BIHRyYW5zY3JpcHQgZXh0ZW5zaW9uIGZvciBIVE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTEwLTAxIC0gPGEgdGl0bGU9IkEgdHJhbnNjcmlwdCBleHRlbnNpb24gZm9yIEhUTUwgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtdHJhbnNjcmlwdC1zcmMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2h0bWwtdHJhbnNjcmlwdC9odG1sLXRyYW5zY3JpcHQtc3JjLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQSB0cmFuc2NyaXB0IGV4dGVuc2lvbiBmb3IgSFRNTCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIHRvIHBsYXRmb3JtIGFjY2Vzc2liaWxpdHkgYXBpcyBpbXBsZW1lbnRhdGlvbiBndWlkZSIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1odG1sLWFhcGktMjAxNTA5MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgdG8gUGxhdGZvcm0gQWNjZXNzaWJpbGl0eSBBUElzIEltcGxlbWVudGF0aW9uIEd1aWRlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTCB0byBQbGF0Zm9ybSBBY2Nlc3NpYmlsaXR5IEFQSXMgSW1wbGVtZW50YXRpb24gR3VpZGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDktMjkgLSA8YSB0aXRsZT0iSFRNTCB0byBQbGF0Zm9ybSBBY2Nlc3NpYmlsaXR5IEFQSXMgSW1wbGVtZW50YXRpb24gR3VpZGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtYWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlIEZhdWxrbmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q3ludGhpYSBTaGVsbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYXNvbiBLaXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleGFuZGVyIFN1cmtvdgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icG9seWdsb3QgbWFya3VwOiBhIHJvYnVzdCBwcm9maWxlIG9mIHRoZSBodG1sNSB2b2NhYnVsYXJ5IiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLWh0bWwtcG9seWdsb3QtMjAxNTA5MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBvbHlnbG90IE1hcmt1cDogQSByb2J1c3QgcHJvZmlsZSBvZiB0aGUgSFRNTDUgdm9jYWJ1bGFyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvbHlnbG90IE1hcmt1cDogQSByb2J1c3QgcHJvZmlsZSBvZiB0aGUgSFRNTDUgdm9jYWJ1bGFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wOS0yOSAtIDxhIHRpdGxlPSJQb2x5Z2xvdCBNYXJrdXA6IEEgcm9idXN0IHByb2ZpbGUgb2YgdGhlIEhUTUw1IHZvY2FidWxhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtcG9seWdsb3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kZXYudzMub3JnL2h0bWw1L2h0bWwtcG9seWdsb3QvaHRtbC1wb2x5Z2xvdC5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBvbHlnbG90IE1hcmt1cDogQSByb2J1c3QgcHJvZmlsZSBvZiB0aGUgSFRNTDUgdm9jYWJ1bGFyeSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlvdCBHcmFmZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxlaWYgSGFsdmFyZCBTaWxsaQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idzNjIGh0bWwganNvbiBmb3JtIHN1Ym1pc3Npb24iIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtaHRtbC1qc29uLWZvcm1zLTIwMTUwOTI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXM0MgSFRNTCBKU09OIGZvcm0gc3VibWlzc2lvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlczQyBIVE1MIEpTT04gZm9ybSBzdWJtaXNzaW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA5LTI5IC0gPGEgdGl0bGU9IlczQyBIVE1MIEpTT04gZm9ybSBzdWJtaXNzaW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLWpzb24tZm9ybXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JpbiBCZXJqb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIGNhbnZhcyAyZCBjb250ZXh0LCBsZXZlbCAyIiBkYXRhLXRhZz0iZ3JhcGhpY3MgaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLTJkY29udGV4dDItMjAxNTA5MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgQ2FudmFzIDJEIENvbnRleHQsIExldmVsIDIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MICBDYW52YXMgIDJEICBDb250ZXh0LCAgTGV2ZWwmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA5LTI5IC0gPGEgdGl0bGU9IkhUTUwgQ2FudmFzIDJEIENvbnRleHQsIExldmVsIDIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5LzJkY29udGV4dDIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWsgQ2FiYW5pZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYXRpbmRlciBNYW5uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmF5IE11bnJvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9tIFdpbHR6aXVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEhpY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3M2MgaHRtbCBmb3JtIGh0dHAgZXh0ZW5zaW9ucyIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1mb3JtLWh0dHAtZXh0ZW5zaW9ucy0yMDE1MDkyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVzNDIEhUTUwgRm9ybSBIVFRQIEV4dGVuc2lvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XM0MgSFRNTCBGb3JtIEhUVFAgRXh0ZW5zaW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wOS0yOSAtIDxhIHRpdGxlPSJXM0MgSFRNTCBGb3JtIEhUVFAgRXh0ZW5zaW9ucyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZm9ybS1odHRwLWV4dGVuc2lvbnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYW1lcm9uIEpvbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW1wbGVtZW50aW5nIGF0YWcgMi4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1JTVBMRU1FTlRJTkctQVRBRzIwLTIwMTUwOTI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbXBsZW1lbnRpbmcgQVRBRyAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbXBsZW1lbnRpbmcgIEFUQUcmbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1dGhvcmluZyBUb29sIEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDktMjQgLSA8YSB0aXRsZT0iSW1wbGVtZW50aW5nIEFUQUcgMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9JTVBMRU1FTlRJTkctQVRBRzIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFuIFJpY2hhcmRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbm5lIEYgU3BlbGxtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdXR0YSBUcmV2aXJhbnVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1dGhvcmluZyB0b29sIGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAoYXRhZykgMi4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvUkVDLUFUQUcyMC0yMDE1MDkyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXV0aG9yaW5nIFRvb2wgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChBVEFHKSAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BdXRob3JpbmcgIFRvb2wgIEFjY2Vzc2liaWxpdHkgIEd1aWRlbGluZXMgIChBVEFHKSZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXV0aG9yaW5nIFRvb2wgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wOS0yNCAtIDxhIHRpdGxlPSJBdXRob3JpbmcgVG9vbCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgKEFUQUcpIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvQVRBRzIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFuIFJpY2hhcmRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbm5lIEYgU3BlbGxtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdXR0YSBUcmV2aXJhbnVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aW1pbmcgY29udHJvbCBmb3Igc2NyaXB0LWJhc2VkIGFuaW1hdGlvbnMiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1hbmltYXRpb24tdGltaW5nLTIwMTUwOTIyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaW1pbmcgY29udHJvbCBmb3Igc2NyaXB0LWJhc2VkIGFuaW1hdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaW1pbmcgY29udHJvbCBmb3Igc2NyaXB0LWJhc2VkIGFuaW1hdGlvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDktMjIgLSA8YSB0aXRsZT0iVGltaW5nIGNvbnRyb2wgZm9yIHNjcmlwdC1iYXNlZCBhbmltYXRpb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hbmltYXRpb24tdGltaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hbmltYXRpb24tdGltaW5nLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUaW1pbmcgY29udHJvbCBmb3Igc2NyaXB0LWJhc2VkIGFuaW1hdGlvbnMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgUm9iaW5zb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYW1lcm9uIE1jQ29ybWFjawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBwYWdlIGZsb2F0cyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9XRC1jc3MtcGFnZS1mbG9hdHMtMy0yMDE1MDkxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFBhZ2UgRmxvYXRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTIFBhZ2UgRmxvYXRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wOS0xNSAtIDxhIHRpdGxlPSJDU1MgUGFnZSBGbG9hdHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1wYWdlLWZsb2F0cy0zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtcGFnZS1mbG9hdHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBQYWdlIEZsb2F0cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbm5lcyBXaWxtCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN0YXRlIGNoYXJ0IHhtbCAoc2N4bWwpOiBzdGF0ZSBtYWNoaW5lIG5vdGF0aW9uIGZvciBjb250cm9sIGFic3RyYWN0aW9uIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy1zY3htbC0yMDE1MDkwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU3RhdGUgQ2hhcnQgWE1MIChTQ1hNTCk6IFN0YXRlIE1hY2hpbmUgTm90YXRpb24gZm9yIENvbnRyb2wgQWJzdHJhY3Rpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TdGF0ZSBDaGFydCBYTUwgKFNDWE1MKTogU3RhdGUgTWFjaGluZSBOb3RhdGlvbiBmb3IgQ29udHJvbCBBYnN0cmFjdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Vm9pY2UgQnJvd3NlciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDktMDEgLSA8YSB0aXRsZT0iU3RhdGUgQ2hhcnQgWE1MIChTQ1hNTCk6IFN0YXRlIE1hY2hpbmUgTm90YXRpb24gZm9yIENvbnRyb2wgQWJzdHJhY3Rpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NjeG1sIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQmFybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhaHVsIEFrb2xrYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SSiBBdWJ1cm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEJvZGVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBCdXJuZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVycnkgQ2FydGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2NvdHQgTWNHbGFzaGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9yYmrDtnJuIExhZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyYyBIZWxiaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFmYWggSG9zbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlQuVi4gUmFtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LbGF1cyBSZWlmZW5yYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9hbSBSb3NlbnRoYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbiBSb3hlbmRhbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByaW9yaXRpZXMgZm9yIGNzcyBmcm9tIHRoZSBkaWdpdGFsIHB1Ymxpc2hpbmcgaW50ZXJlc3QgZ3JvdXAiIGRhdGEtdGFnPSJjc3MgZHB1YiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9XRC1kcHViLWNzcy1wcmlvcml0aWVzLTIwMTUwODIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcmlvcml0aWVzIGZvciBDU1MgZnJvbSB0aGUgRGlnaXRhbCBQdWJsaXNoaW5nIEludGVyZXN0IEdyb3VwIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJpb3JpdGllcyBmb3IgQ1NTIGZyb20gdGhlIERpZ2l0YWwgUHVibGlzaGluZyBJbnRlcmVzdCBHcm91cDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGlnaXRhbCBQdWJsaXNoaW5nIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDgtMjAgLSA8YSB0aXRsZT0iUHJpb3JpdGllcyBmb3IgQ1NTIGZyb20gdGhlIERpZ2l0YWwgUHVibGlzaGluZyBJbnRlcmVzdCBHcm91cCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZHB1Yi1jc3MtcHJpb3JpdGllcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZHB1Yi1wYWdpbmF0aW9uL3ByaW9yaXRpZXMuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQcmlvcml0aWVzIGZvciBDU1MgZnJvbSB0aGUgRGlnaXRhbCBQdWJsaXNoaW5nIEludGVyZXN0IEdyb3VwIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgQ3JhbWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhwYXRoIGRhdGEgbW9kZWwgZm9yIHNjeG1sIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtc2N4bWwteHBhdGgtZG0tMjAxNTA4MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhQYXRoIERhdGEgTW9kZWwgZm9yIFNDWE1MIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFBhdGggRGF0YSBNb2RlbCBmb3IgU0NYTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA4LTExIC0gPGEgdGl0bGU9IlhQYXRoIERhdGEgTW9kZWwgZm9yIFNDWE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zY3htbC14cGF0aC1kbSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIEJhcm5ldHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SYWh1bCBBa29sa2FyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UkogQXVidXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBCb2RlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQnVybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplcnJ5IENhcnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IE1jR2xhc2hhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvcmJqw7ZybiBMYWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmMgSGVsYmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhZmFoIEhvc24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UIFYgUmFtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LbGF1cyBSZWlmZW5yYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9hbSBSb3NlbnRoYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbiBSb3hlbmRhbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkb20gZXZlbnQgaS9vIHByb2Nlc3NvciBmb3Igc2N4bWwiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1zY3htbC1kb20taW9wLTIwMTUwODExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBET00gRXZlbnQgSS9PIFByb2Nlc3NvciBmb3IgU0NYTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5ET00gRXZlbnQgSS9PIFByb2Nlc3NvciBmb3IgU0NYTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA4LTExIC0gPGEgdGl0bGU9IkRPTSBFdmVudCBJL08gUHJvY2Vzc29yIGZvciBTQ1hNTCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2N4bWwtZG9tLWlvcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIEJhcm5ldHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SYWh1bCBBa29sa2FyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UkogQXVidXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBCb2RlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQnVybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplcnJ5IENhcnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IE1jR2xhc2hhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvcmJqw7ZybiBMYWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmMgSGVsYmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhZmFoIEhvc24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UIFYgUmFtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LbGF1cyBSZWlmZW5yYXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9hbSBSb3NlbnRoYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbiBSb3hlbmRhbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJydW50aW1lIGFuZCBzZWN1cml0eSBtb2RlbCBmb3Igd2ViIGFwcGxpY2F0aW9ucyIgZGF0YS10YWc9InNlY3VyaXR5IHdlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLXJ1bnRpbWUtMjAxNTA4MDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJ1bnRpbWUgYW5kIFNlY3VyaXR5IE1vZGVsIGZvciBXZWIgQXBwbGljYXRpb25zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UnVudGltZSBhbmQgU2VjdXJpdHkgTW9kZWwgZm9yIFdlYiBBcHBsaWNhdGlvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlN5c3RlbSBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA4LTA2IC0gPGEgdGl0bGU9IlJ1bnRpbWUgYW5kIFNlY3VyaXR5IE1vZGVsIGZvciBXZWIgQXBwbGljYXRpb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ydW50aW1lIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TW91bmlyIExhbW91cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NSU5HIEpJTgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsaW5rZWQgZGF0YSBwYXRjaCBmb3JtYXQiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLWxkcGF0Y2gtMjAxNTA3MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIExpbmtlZCBEYXRhIFBhdGNoIEZvcm1hdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkxpbmtlZCBEYXRhIFBhdGNoIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TGlua2VkIERhdGEgUGxhdGZvcm0gKExEUCkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA3LTI4IC0gPGEgdGl0bGU9IkxpbmtlZCBEYXRhIFBhdGNoIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGRwYXRjaCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2R2Y3MudzMub3JnL2hnL2xkcHdnL3Jhdy1maWxlL2xkcGF0Y2gvbGRwYXRjaC5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIExpbmtlZCBEYXRhIFBhdGNoIEZvcm1hdCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4YW5kcmUgQmVydGFpbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaWVycmUtQW50b2luZSBDaGFtcGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVpIFNhbWJyYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGNwIGFuZCB1ZHAgc29ja2V0IGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLXRjcC11ZHAtc29ja2V0cy0yMDE1MDcyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVENQIGFuZCBVRFAgU29ja2V0IEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRDUCBhbmQgVURQIFNvY2tldCBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlN5c3RlbSBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA3LTIzIC0gPGEgdGl0bGU9IlRDUCBhbmQgVURQIFNvY2tldCBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RjcC11ZHAtc29ja2V0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvMjAxMi9zeXNhcHBzL3RjcC11ZHAtc29ja2V0cy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgVENQIGFuZCBVRFAgU29ja2V0IEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DbGFlcyBOaWxzc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBhcHA6IHVybCBzY2hlbWUiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1hcHAtdXJpLTIwMTUwNzIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgYXBwOiBVUkwgU2NoZW1lIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIGFwcDogVVJMIFNjaGVtZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U3lzdGVtIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDctMjMgLSA8YSB0aXRsZT0iVGhlIGFwcDogVVJMIFNjaGVtZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYXBwLXVyaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2FwcC11cmkuc3lzYXBwcy5vcmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRoZSBhcHA6IFVSTCBTY2hlbWUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzaWduYXR1cmUgc3ludGF4IGFuZCBwcm9jZXNzaW5nIHZlcnNpb24gMi4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUteG1sZHNpZy1jb3JlMi0yMDE1MDcyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFNpZ25hdHVyZSBTeW50YXggYW5kIFByb2Nlc3NpbmcgVmVyc2lvbiAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgIFNpZ25hdHVyZSAgU3ludGF4ICBhbmQgIFByb2Nlc3NpbmcgIFZlcnNpb24mbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDctMjMgLSA8YSB0aXRsZT0iWE1MIFNpZ25hdHVyZSBTeW50YXggYW5kIFByb2Nlc3NpbmcgVmVyc2lvbiAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbGRzaWctY29yZTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnLzIwMDgveG1sc2VjL0RyYWZ0cy94bWxkc2lnLWNvcmUtMjAvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFhNTCBTaWduYXR1cmUgU3ludGF4IGFuZCBQcm9jZXNzaW5nIFZlcnNpb24gMi4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbmFsZCBFYXN0bGFrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBSZWFnbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBTb2xvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRob21hcyBSb2Vzc2xlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlbHZpbiBZaXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmF0aWsgRGF0dGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBDYW50b3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0YXNrIHNjaGVkdWxlciBhcGkgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLXRhc2stc2NoZWR1bGVyLTIwMTUwNzIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUYXNrIFNjaGVkdWxlciBBUEkgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRhc2sgU2NoZWR1bGVyIEFQSSBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TeXN0ZW0gQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wNy0yMyAtIDxhIHRpdGxlPSJUYXNrIFNjaGVkdWxlciBBUEkgU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdGFzay1zY2hlZHVsZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnLzIwMTIvc3lzYXBwcy93ZWItYWxhcm1zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUYXNrIFNjaGVkdWxlciBBUEkgU3BlY2lmaWNhdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYWhlc2ggS3Vsa2FybmkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFkZGl0aW9uYWwgcmVxdWlyZW1lbnRzIGZvciBiaWRpIGluIGh0bWwgJmFtcDsgY3NzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1odG1sLWJpZGktMjAxNTA3MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFkZGl0aW9uYWwgUmVxdWlyZW1lbnRzIGZvciBCaWRpIGluIEhUTUwgJmFtcDsgQ1NTIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QWRkaXRpb25hbCBSZXF1aXJlbWVudHMgZm9yIEJpZGkgaW4gSFRNTCAmIENTUzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA3LTIxIC0gPGEgdGl0bGU9IkFkZGl0aW9uYWwgUmVxdWlyZW1lbnRzIGZvciBCaWRpIGluIEhUTUwgJmFtcDsgQ1NTIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLWJpZGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BaGFyb24gTGFuaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icGVybWlzc2lvbnMgZm9yIGRldmljZSBhcGkgYWNjZXNzIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtYXBpLXBlcm1zLTIwMTUwNzE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQZXJtaXNzaW9ucyBmb3IgRGV2aWNlIEFQSSBBY2Nlc3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QZXJtaXNzaW9ucyBmb3IgRGV2aWNlIEFQSSBBY2Nlc3M8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA3LTE0IC0gPGEgdGl0bGU9IlBlcm1pc3Npb25zIGZvciBEZXZpY2UgQVBJIEFjY2VzcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYXBpLXBlcm1zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZGV2LnczLm9yZy8yMDA5L2RhcC9hcGktcGVybXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFBlcm1pc3Npb25zIGZvciBEZXZpY2UgQVBJIEFjY2VzcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYWRkeSBCeWVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb21pbmlxdWUgSGF6YcOrbC1NYXNzaWV1eAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyBwYXRocyIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1dELXN2Zy1wYXRocy0yMDE1MDcwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1ZHIFBhdGhzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1ZHIFBhdGhzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA3LTA5IC0gPGEgdGl0bGU9IlNWRyBQYXRocyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3ZnLXBhdGhzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vc3Znd2cub3JnL3NwZWNzL3BhdGhzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTVkcgUGF0aHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q3lyaWwgQ29uY29sYXRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2FtZXJvbiBNY0Nvcm1hY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb3VnIFNjaGVwZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsaW5rZWQgZGF0YSBwbGF0Zm9ybSBwYWdpbmcgMS4wIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1sZHAtcGFnaW5nLTIwMTUwNjMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBMaW5rZWQgRGF0YSBQbGF0Zm9ybSBQYWdpbmcgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TGlua2VkICBEYXRhICBQbGF0Zm9ybSAgUGFnaW5nJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5MaW5rZWQgRGF0YSBQbGF0Zm9ybSAoTERQKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDYtMzAgLSA8YSB0aXRsZT0iTGlua2VkIERhdGEgUGxhdGZvcm0gUGFnaW5nIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGRwLXBhZ2luZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvMjAxMi9sZHAvaGcvbGRwLXBhZ2luZy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIExpbmtlZCBEYXRhIFBsYXRmb3JtIFBhZ2luZyAxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgU3BlaWNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIEFyd2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bc2hvayBNYWxob3RyYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIG5mYyBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1uZmMtMjAxNTA2MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBORkMgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIE5GQyBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk5lYXIgRmllbGQgQ29tbXVuaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA2LTE2IC0gPGEgdGl0bGU9IldlYiBORkMgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9uZmMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MdWMgWXJpYXJ0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbXVlbCBPcnRpegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbiBDb2xlbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbnRhY3RzIG1hbmFnZXIgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtY29udGFjdHMtbWFuYWdlci1hcGktMjAxNTA2MDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbnRhY3RzIE1hbmFnZXIgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29udGFjdHMgTWFuYWdlciBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlN5c3RlbSBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA2LTAyIC0gPGEgdGl0bGU9IkNvbnRhY3RzIE1hbmFnZXIgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jb250YWN0cy1tYW5hZ2VyLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvMjAxMi9zeXNhcHBzL2NvbnRhY3RzLW1hbmFnZXItYXBpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDb250YWN0cyBNYW5hZ2VyIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FZHVhcmRvIEZ1bGxlYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2UgTWFudWVsIENhbnRlcmEgRm9uc2VjYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzdG9waGUgRHVtZXoKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHRlbGVwaG9ueSBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS10ZWxlcGhvbnktMjAxNTA2MDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBUZWxlcGhvbnkgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFRlbGVwaG9ueSBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlN5c3RlbSBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA2LTAyIC0gPGEgdGl0bGU9IldlYiBUZWxlcGhvbnkgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90ZWxlcGhvbnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnLzIwMTIvc3lzYXBwcy90ZWxlcGhvbnkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBUZWxlcGhvbnkgQVBJIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmNvcyBDYWNlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZSBNYW51ZWwgQ2FudGVyYSBGb25zZWNhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWR1YXJkbyBGdWxsZWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ab2x0YW4gS2lzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBMeWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1lc3NhZ2luZyBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1tZXNzYWdpbmctMjAxNTA2MDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lc3NhZ2luZyBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZXNzYWdpbmcgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TeXN0ZW0gQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wNi0wMiAtIDxhIHRpdGxlPSJNZXNzYWdpbmcgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZXNzYWdpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnLzIwMTIvc3lzYXBwcy9tZXNzYWdpbmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1lc3NhZ2luZyBBUEkiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWR1YXJkbyBGdWxsZWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3NlIE1hbnVlbCBDYW50ZXJhIEZvbnNlY2EKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ab2x0YW4gS2lzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWw1OiB0ZWNobmlxdWVzIGZvciBwcm92aWRpbmcgdXNlZnVsIHRleHQgYWx0ZXJuYXRpdmVzIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLWh0bWwtYWx0LXRlY2huaXF1ZXMtMjAxNTA1MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUw1OiBUZWNobmlxdWVzIGZvciBwcm92aWRpbmcgdXNlZnVsIHRleHQgYWx0ZXJuYXRpdmVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTDU6IFRlY2huaXF1ZXMgZm9yIHByb3ZpZGluZyB1c2VmdWwgdGV4dCBhbHRlcm5hdGl2ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDUtMjEgLSA8YSB0aXRsZT0iSFRNTDU6IFRlY2huaXF1ZXMgZm9yIHByb3ZpZGluZyB1c2VmdWwgdGV4dCBhbHRlcm5hdGl2ZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtYWx0LXRlY2huaXF1ZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFuZSBNY0NhcnJvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxpYW0gUXVpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlIEZhdWxrbmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGF0YXNldCBkZXNjcmlwdGlvbnM6IGhjbHMgY29tbXVuaXR5IHByb2ZpbGUiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtaGNscy1kYXRhc2V0LTIwMTUwNTE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEYXRhc2V0IERlc2NyaXB0aW9uczogSENMUyBDb21tdW5pdHkgUHJvZmlsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRhdGFzZXQgRGVzY3JpcHRpb25zOiBIQ0xTIENvbW11bml0eSBQcm9maWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgSGVhbHRoIENhcmUgYW5kIExpZmUgU2NpZW5jZXMgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wNS0xNCAtIDxhIHRpdGxlPSJEYXRhc2V0IERlc2NyaXB0aW9uczogSENMUyBDb21tdW5pdHkgUHJvZmlsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaGNscy1kYXRhc2V0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxhc2RhaXIgR3JheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk0uIFNjb3R0IE1hcnNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGVsIER1bW9udGllcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbmRpZXVpOiBldmVudHMgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9XRC1pbmRpZS11aS1ldmVudHMtMjAxNTA0MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEluZGllVUk6IEV2ZW50cyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbmRpZVVJOiAgRXZlbnRzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbmRlcGVuZGVudCBVc2VyIEludGVyZmFjZSAoSW5kaWUgVUkpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wNC0zMCAtIDxhIHRpdGxlPSJJbmRpZVVJOiBFdmVudHMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9pbmRpZS11aS1ldmVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2luZGllLXVpL2luZGllLXVpLWV2ZW50cy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEluZGllVUk6IEV2ZW50cyAxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQ3JhaWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbmRpZXVpOiB1c2VyIGNvbnRleHQgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9XRC1pbmRpZS11aS1jb250ZXh0LTIwMTUwNDMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbmRpZVVJOiBVc2VyIENvbnRleHQgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SW5kaWVVSTogIFVzZXIgIENvbnRleHQmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkluZGVwZW5kZW50IFVzZXIgSW50ZXJmYWNlIChJbmRpZSBVSSkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTA0LTMwIC0gPGEgdGl0bGU9IkluZGllVUk6IFVzZXIgQ29udGV4dCAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2luZGllLXVpLWNvbnRleHQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2luZGllLXVpL2luZGllLXVpLWNvbnRleHQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbmRpZVVJOiBVc2VyIENvbnRleHQgMS4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIENyYWlnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibGlua2VkIGRhdGEgcGxhdGZvcm0gMS4wIHByaW1lciIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtbGRwLXByaW1lci0yMDE1MDQyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTGlua2VkIERhdGEgUGxhdGZvcm0gMS4wIFByaW1lciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkxpbmtlZCBEYXRhIFBsYXRmb3JtIDEuMCBQcmltZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkxpbmtlZCBEYXRhIFBsYXRmb3JtIChMRFApIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wNC0yMyAtIDxhIHRpdGxlPSJMaW5rZWQgRGF0YSBQbGF0Zm9ybSAxLjAgUHJpbWVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sZHAtcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy8yMDEyL2xkcC9oZy9sZHAtcHJpbWVyL2xkcC1wcmltZXIuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBMaW5rZWQgRGF0YSBQbGF0Zm9ybSAxLjAgUHJpbWVyIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5hbmRhbmEgTWloaW5kdWt1bGFzb29yaXlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9nZXIgTWVuZGF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyBtYXJrZXJzIiBkYXRhLXRhZz0iZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvV0Qtc3ZnLW1hcmtlcnMtMjAxNTA0MDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNWRyBNYXJrZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1ZHIE1hcmtlcnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDQtMDkgLSA8YSB0aXRsZT0iU1ZHIE1hcmtlcnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3N2Zy1tYXJrZXJzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vc3Znd2cub3JnL3NwZWNzL21hcmtlcnMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNWRyBNYXJrZXJzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNhbWVyb24gTWNDb3JtYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3ZnIHN0cm9rZXMiIGRhdGEtdGFnPSJncmFwaGljcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9XRC1zdmctc3Ryb2tlcy0yMDE1MDQwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1ZHIFN0cm9rZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgU3Ryb2tlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wNC0wOSAtIDxhIHRpdGxlPSJTVkcgU3Ryb2tlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3ZnLXN0cm9rZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9zdmd3Zy5vcmcvc3BlY3Mvc3Ryb2tlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgU1ZHIFN0cm9rZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2FtZXJvbiBNY0Nvcm1hY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaXJrIFNjaHVsemUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB0ZW1wbGF0ZSBsYXlvdXQgbW9kdWxlIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLWNzcy10ZW1wbGF0ZS0zLTIwMTUwMzI2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgVGVtcGxhdGUgTGF5b3V0IE1vZHVsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBUZW1wbGF0ZSBMYXlvdXQgTW9kdWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMy0yNiAtIDxhIHRpdGxlPSJDU1MgVGVtcGxhdGUgTGF5b3V0IE1vZHVsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXRlbXBsYXRlLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy10ZW1wbGF0ZS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFRlbXBsYXRlIExheW91dCBNb2R1bGUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVydCBCb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Dw6lzYXIgQWNlYmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHRtbCtyZGZhIDEuMSAtIHNlY29uZCBlZGl0aW9uIiBkYXRhLXRhZz0iZGF0YSBodG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9SRUMtaHRtbC1yZGZhLTIwMTUwMzE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MK1JERmEgMS4xIC0gU2Vjb25kIEVkaXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MK1JERmEgMS4xIC0gU2Vjb25kIEVkaXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERmEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTAzLTE3IC0gPGEgdGl0bGU9IkhUTUwrUkRGYSAxLjEgLSBTZWNvbmQgRWRpdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHRtbC1yZGZhIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFudSBTcG9ybnkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhodG1sK3JkZmEgMS4xIC0gdGhpcmQgZWRpdGlvbiIgZGF0YS10YWc9ImRhdGEgaHRtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvUkVDLXhodG1sLXJkZmEtMjAxNTAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhIVE1MK1JERmEgMS4xIC0gVGhpcmQgRWRpdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhIVE1MK1JERmEgMS4xIC0gVGhpcmQgRWRpdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDMtMTcgLSA8YSB0aXRsZT0iWEhUTUwrUkRGYSAxLjEgLSBUaGlyZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbC1yZGZhIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkZmEgbGl0ZSAxLjEgLSBzZWNvbmQgZWRpdGlvbiIgZGF0YS10YWc9ImRhdGEgaHRtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvUkVDLXJkZmEtbGl0ZS0yMDE1MDMxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGYSBMaXRlIDEuMSAtIFNlY29uZCBFZGl0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGYSBMaXRlIDEuMSAtIFNlY29uZCBFZGl0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREZhIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMy0xNyAtIDxhIHRpdGxlPSJSREZhIExpdGUgMS4xIC0gU2Vjb25kIEVkaXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZmEtbGl0ZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbnUgU3Bvcm55CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGZhIDEuMSBwcmltZXIgLSB0aGlyZCBlZGl0aW9uIiBkYXRhLXRhZz0iZGF0YSBodG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9OT1RFLXJkZmEtcHJpbWVyLTIwMTUwMzE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSREZhIDEuMSBQcmltZXIgLSBUaGlyZCBFZGl0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGYSAxLjEgUHJpbWVyIC0gVGhpcmQgRWRpdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDMtMTcgLSA8YSB0aXRsZT0iUkRGYSAxLjEgUHJpbWVyIC0gVGhpcmQgRWRpdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRmYS1wcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnLzIwMTAvMDIvcmRmYS9zb3VyY2VzL3JkZmEtcHJpbWVyL092ZXJ2aWV3LXNyYy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFJERmEgMS4xIFByaW1lciAtIFRoaXJkIEVkaXRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SXZhbiBIZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW4gQWRpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYW51IFNwb3JueQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgQmlyYmVjawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmRmYSBjb3JlIDEuMSAtIHRoaXJkIGVkaXRpb24iIGRhdGEtdGFnPSJkYXRhIGh0bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy1yZGZhLWNvcmUtMjAxNTAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERmEgQ29yZSAxLjEgLSBUaGlyZCBFZGl0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGYSBDb3JlIDEuMSAtIFRoaXJkIEVkaXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERmEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTAzLTE3IC0gPGEgdGl0bGU9IlJERmEgQ29yZSAxLjEgLSBUaGlyZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGZhLWNvcmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW4gQWRpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEJpcmJlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFuZSBNY0NhcnJvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkl2YW4gSGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InB1YmxpYyBpZGVudGlmaWVycyBmb3IgZW50aXR5IHJlc29sdXRpb24gaW4geGh0bWwiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUteGh0bWwtcHViaWQtMjAxNTAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFB1YmxpYyBJZGVudGlmaWVycyBmb3IgZW50aXR5IHJlc29sdXRpb24gaW4gWEhUTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QdWJsaWMgSWRlbnRpZmllcnMgZm9yIGVudGl0eSByZXNvbHV0aW9uIGluIFhIVE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTAzLTE3IC0gPGEgdGl0bGU9IlB1YmxpYyBJZGVudGlmaWVycyBmb3IgZW50aXR5IHJlc29sdXRpb24gaW4gWEhUTUwgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hodG1sLXB1YmlkIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy8yMDAzL2VudGl0aWVzLzIwMDdkb2MveGh0bWwtcHViaWQuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBQdWJsaWMgSWRlbnRpZmllcnMgZm9yIGVudGl0eSByZXNvbHV0aW9uIGluIFhIVE1MIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIENhcmxpc2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBtaWRpIGFwaSIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1dELXdlYm1pZGktMjAxNTAzMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBNSURJIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBNSURJIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXVkaW8gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTAzLTE3IC0gPGEgdGl0bGU9IldlYiBNSURJIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2VibWlkaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3dlYmF1ZGlvLmdpdGh1Yi5pby93ZWItbWlkaS1hcGkvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFdlYiBNSURJIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBXaWxzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdXNzaSBLYWxsaW9rb3NraQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImxpbmtlZCBkYXRhIHBsYXRmb3JtIDEuMCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy1sZHAtMjAxNTAyMjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIExpbmtlZCBEYXRhIFBsYXRmb3JtIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkxpbmtlZCAgRGF0YSAgUGxhdGZvcm0mbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkxpbmtlZCBEYXRhIFBsYXRmb3JtIChMRFApIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMi0yNiAtIDxhIHRpdGxlPSJMaW5rZWQgRGF0YSBQbGF0Zm9ybSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2xkcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvMjAxMi9sZHAvaGcvbGRwLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTGlua2VkIERhdGEgUGxhdGZvcm0gMS4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlIFNwZWljaGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBBcndlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXNob2sgTWFsaG90cmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibW9iaWxlIGFjY2Vzc2liaWxpdHk6IGhvdyB3Y2FnIDIuMCBhbmQgb3RoZXIgdzNjL3dhaSBndWlkZWxpbmVzIGFwcGx5IHRvIG1vYmlsZSIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvV0QtbW9iaWxlLWFjY2Vzc2liaWxpdHktbWFwcGluZy0yMDE1MDIyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTW9iaWxlIEFjY2Vzc2liaWxpdHk6IEhvdyBXQ0FHIDIuMCBhbmQgT3RoZXIgVzNDL1dBSSBHdWlkZWxpbmVzIEFwcGx5IHRvIE1vYmlsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1vYmlsZSBBY2Nlc3NpYmlsaXR5OiBIb3cgV0NBRyAyLjAgYW5kIE90aGVyIFczQy9XQUkgR3VpZGVsaW5lcyBBcHBseSB0byBNb2JpbGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VXNlciBBZ2VudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTAyLTI2IC0gPGEgdGl0bGU9Ik1vYmlsZSBBY2Nlc3NpYmlsaXR5OiBIb3cgV0NBRyAyLjAgYW5kIE90aGVyIFczQy9XQUkgR3VpZGVsaW5lcyBBcHBseSB0byBNb2JpbGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21vYmlsZS1hY2Nlc3NpYmlsaXR5LW1hcHBpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL01vYmlsZS1BMTF5LVRGLU5vdGUvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1vYmlsZSBBY2Nlc3NpYmlsaXR5OiBIb3cgV0NBRyAyLjAgYW5kIE90aGVyIFczQy9XQUkgR3VpZGVsaW5lcyBBcHBseSB0byBNb2JpbGUiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2ltYmVybHkgUGF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZWFubmUgRiBTcGVsbG1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkthdGhsZWVuIFdhaGxiaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sNSBpbWFnZSBkZXNjcmlwdGlvbiBleHRlbnNpb24gKGxvbmdkZXNjKSIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1JFQy1odG1sLWxvbmdkZXNjLTIwMTUwMjI2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MNSBJbWFnZSBEZXNjcmlwdGlvbiBFeHRlbnNpb24gKGxvbmdkZXNjKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUw1IEltYWdlIERlc2NyaXB0aW9uIEV4dGVuc2lvbiAobG9uZ2Rlc2MpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTAyLTI2IC0gPGEgdGl0bGU9IkhUTUw1IEltYWdlIERlc2NyaXB0aW9uIEV4dGVuc2lvbiAobG9uZ2Rlc2MpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLWxvbmdkZXNjIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBNY0NhdGhpZU5ldmlsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgU2FkZWNraQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkYXRhIG9uIHRoZSB3ZWIgYmVzdCBwcmFjdGljZXMgdXNlIGNhc2VzICZhbXA7IHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtZHdicC11Y3ItMjAxNTAyMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERhdGEgb24gdGhlIFdlYiBCZXN0IFByYWN0aWNlcyBVc2UgQ2FzZXMgJmFtcDsgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzIFVzZSBDYXNlcyAmIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGF0YSBvbiB0aGUgV2ViIEJlc3QgUHJhY3RpY2VzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMi0yNCAtIDxhIHRpdGxlPSJEYXRhIG9uIHRoZSBXZWIgQmVzdCBQcmFjdGljZXMgVXNlIENhc2VzICZhbXA7IFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZHdicC11Y3IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2R3YnAvdXNlY2FzZXN2MS5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIERhdGEgb24gdGhlIFdlYiBCZXN0IFByYWN0aWNlcyBVc2UgQ2FzZXMgJmFtcDsgUmVxdWlyZW1lbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlaXJkcmUgTGVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVybmFkZXR0ZSBGYXJpYXMgTG9zY2lvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbCBBcmNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbnRlbnQgc2VjdXJpdHkgcG9saWN5IDEuMCIgZGF0YS10YWc9InNlY3VyaXR5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtQ1NQMS0yMDE1MDIxOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29udGVudCAgU2VjdXJpdHkgIFBvbGljeSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMi0xOSAtIDxhIHRpdGxlPSJDb250ZW50IFNlY3VyaXR5IFBvbGljeSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NTUDEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy9jb250ZW50LXNlY3VyaXR5LXBvbGljeS9yYXctZmlsZS90aXAvY3NwLTEuMC1zcGVjaWZpY2F0aW9uLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgMS4wIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyYW5kb24gU3Rlcm5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRhbSBCYXJ0aAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InNlY3VyaXR5Ij5TZWN1cml0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1dGhvcmluZyB0ZWNobmlxdWVzIGZvciB4aHRtbCAmYW1wOyBodG1sIGludGVybmF0aW9uYWxpemF0aW9uOiBjaGFyYWN0ZXJzIGFuZCBlbmNvZGluZ3MgMS4wIiBkYXRhLXRhZz0iaHRtbCBpMThuIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L05PVEUtaTE4bi1odG1sLXRlY2gtY2hhci0yMDE1MDEyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXV0aG9yaW5nIFRlY2huaXF1ZXMgZm9yIFhIVE1MICZhbXA7IEhUTUwgSW50ZXJuYXRpb25hbGl6YXRpb246IENoYXJhY3RlcnMgYW5kIEVuY29kaW5ncyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BdXRob3JpbmcgIFRlY2huaXF1ZXMgIGZvciAgWEhUTUwgICYgIEhUTUwgIEludGVybmF0aW9uYWxpemF0aW9uOiAgQ2hhcmFjdGVycyAgYW5kICBFbmNvZGluZ3MmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMS0yNyAtIDxhIHRpdGxlPSJBdXRob3JpbmcgVGVjaG5pcXVlcyBmb3IgWEhUTUwgJmFtcDsgSFRNTCBJbnRlcm5hdGlvbmFsaXphdGlvbjogQ2hhcmFjdGVycyBhbmQgRW5jb2RpbmdzIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaTE4bi1odG1sLXRlY2gtY2hhciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBleGNsdXNpb25zIG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1dELWNzczMtZXhjbHVzaW9ucy0yMDE1MDExNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEV4Y2x1c2lvbnMgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEV4Y2x1c2lvbnMgIE1vZHVsZSAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMS0xNSAtIDxhIHRpdGxlPSJDU1MgRXhjbHVzaW9ucyBNb2R1bGUgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzMy1leGNsdXNpb25zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZXhjbHVzaW9ucy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIEV4Y2x1c2lvbnMgTW9kdWxlIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9zc2VuIEF0YW5hc3NvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZpbmNlbnQgSGFyZHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGFuIFN0ZWFybnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvZ25pdGl2ZSBhY2Nlc3NpYmlsaXR5IHVzZXIgcmVzZWFyY2giIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE1L1dELWNvZ2EtdXNlci1yZXNlYXJjaC0yMDE1MDExNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29nbml0aXZlIEFjY2Vzc2liaWxpdHkgVXNlciBSZXNlYXJjaCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvZ25pdGl2ZSBBY2Nlc3NpYmlsaXR5IFVzZXIgUmVzZWFyY2g8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29scyBhbmQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNS0wMS0xNSAtIDxhIHRpdGxlPSJDb2duaXRpdmUgQWNjZXNzaWJpbGl0eSBVc2VyIFJlc2VhcmNoIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jb2dhLXVzZXItcmVzZWFyY2giPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NvZ2EvdXNlci1yZXNlYXJjaC8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ29nbml0aXZlIEFjY2Vzc2liaWxpdHkgVXNlciBSZXNlYXJjaCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MaXNhIFNlZW1hbi1Ib3J3aXR6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbXBvc2l0aW5nIGFuZCBibGVuZGluZyBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIGdyYXBoaWNzIiBkYXRhLXN0YXR1cz0iY3IiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Q1I8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJDYW5kaWRhdGVSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvQ1ItY29tcG9zaXRpbmctMS0yMDE1MDExMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29tcG9zaXRpbmcgYW5kIEJsZW5kaW5nIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db21wb3NpdGluZyAgYW5kICBCbGVuZGluZyAgTGV2ZWwmbmJzcDsxPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE1LTAxLTEzIC0gPGEgdGl0bGU9IkNvbXBvc2l0aW5nIGFuZCBCbGVuZGluZyBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jb21wb3NpdGluZy0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmZ4dGYub3JnL2NvbXBvc2l0aW5nLTEvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENvbXBvc2l0aW5nIGFuZCBCbGVuZGluZyBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpayBDYWJhbmllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5pa29zIEFuZHJvbmlrb3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkcHViIGlnIG1ldGFkYXRhIHRhc2sgZm9yY2UgcmVwb3J0IiBkYXRhLXRhZz0iZHB1YiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTUvTk9URS1kcHViLW1ldGFkYXRhLTIwMTUwMTA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEUFVCIElHIE1ldGFkYXRhIFRhc2sgRm9yY2UgUmVwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RFBVQiBJRyBNZXRhZGF0YSBUYXNrIEZvcmNlIFJlcG9ydDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGlnaXRhbCBQdWJsaXNoaW5nIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDEtMDggLSA8YSB0aXRsZT0iRFBVQiBJRyBNZXRhZGF0YSBUYXNrIEZvcmNlIFJlcG9ydCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZHB1Yi1tZXRhZGF0YSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vZHB1Yi1tZXRhZGF0YS8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRFBVQiBJRyBNZXRhZGF0YSBUYXNrIEZvcmNlIFJlcG9ydCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CaWxsIEthc2RvcmYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYWRpIFNvbG9tb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JdmFuIEhlcm1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRwdWIiPkRpZ2l0YWwgUHVibGlzaGluZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbmRleGVkIGRhdGFiYXNlIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNS9SRUMtSW5kZXhlZERCLTIwMTUwMTA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbmRleGVkIERhdGFiYXNlIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkluZGV4ZWQgRGF0YWJhc2UgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTUtMDEtMDggLSA8YSB0aXRsZT0iSW5kZXhlZCBEYXRhYmFzZSBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0luZGV4ZWREQiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3czYy5naXRodWIuaW8vSW5kZXhlZERCLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbmRleGVkIERhdGFiYXNlIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OaWt1bmogTWVodGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hcyBTaWNraW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpb3QgR3JhZmYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZWkgUG9wZXNjdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplcmVteSBPcmxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2h1YSBCZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWljcm9kYXRhIHRvIHJkZiDigJMgc2Vjb25kIGVkaXRpb24iIGRhdGEtdGFnPSJkYXRhIGh0bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtbWljcm9kYXRhLXJkZi0yMDE0MTIxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWljcm9kYXRhIHRvIFJERiDigJMgU2Vjb25kIEVkaXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NaWNyb2RhdGEgdG8gUkRGIOKAkyBTZWNvbmQgRWRpdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VtYW50aWMgV2ViIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMTItMTYgLSA8YSB0aXRsZT0iTWljcm9kYXRhIHRvIFJERiDigJMgU2Vjb25kIEVkaXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21pY3JvZGF0YS1yZGYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21pY3JvZGF0YS1yZGYvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1pY3JvZGF0YSB0byBSREYg4oCTIFNlY29uZCBFZGl0aW9uIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWdnIEtlbGxvZ2cKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWw1IGRpZmZlcmVuY2VzIGZyb20gaHRtbDQiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLWh0bWw1LWRpZmYtMjAxNDEyMDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUw1IERpZmZlcmVuY2VzIGZyb20gSFRNTDQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MNSBEaWZmZXJlbmNlcyBmcm9tIEhUTUw0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTEyLTA5IC0gPGEgdGl0bGU9IkhUTUw1IERpZmZlcmVuY2VzIGZyb20gSFRNTDQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWw1LWRpZmYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaW1vbiBQaWV0ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRpZ2l0YWwgcHVibGlzaGluZyBhbm5vdGF0aW9uIHVzZSBjYXNlcyIgZGF0YS10YWc9ImRwdWIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtZHB1Yi1hbm5vdGF0aW9uLXVjLTIwMTQxMjA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEaWdpdGFsIFB1Ymxpc2hpbmcgQW5ub3RhdGlvbiBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EaWdpdGFsIFB1Ymxpc2hpbmcgQW5ub3RhdGlvbiBVc2UgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRpZ2l0YWwgUHVibGlzaGluZyBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTEyLTA0IC0gPGEgdGl0bGU9IkRpZ2l0YWwgUHVibGlzaGluZyBBbm5vdGF0aW9uIFVzZSBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZHB1Yi1hbm5vdGF0aW9uLXVjIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9kcHViLWFubm90YXRpb24vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIERpZ2l0YWwgUHVibGlzaGluZyBBbm5vdGF0aW9uIFVzZSBDYXNlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JlcnQgU2FuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZHB1YiI+RGlnaXRhbCBQdWJsaXNoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImZ1bGxzY3JlZW4iIGRhdGEtdGFnPSJjc3Mgd2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtZnVsbHNjcmVlbi0yMDE0MTExOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRnVsbHNjcmVlbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkZ1bGxzY3JlZW48L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPihoaXN0b3JpY2FsKSBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0xMS0xOCAtIDxhIHRpdGxlPSJGdWxsc2NyZWVuIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9mdWxsc2NyZWVuIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5uZSB2YW4gS2VzdGVyZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYW50ZWsgw4dlbGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlc291cmNlIHByaW9yaXRpZXMiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLXJlc291cmNlLXByaW9yaXRpZXMtMjAxNDEwMjMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlc291cmNlIFByaW9yaXRpZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXNvdXJjZSBQcmlvcml0aWVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTEwLTIzIC0gPGEgdGl0bGU9IlJlc291cmNlIFByaW9yaXRpZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Jlc291cmNlLXByaW9yaXRpZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub2JpbiBUaXR1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIFNpbW9uc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmF0aW5kZXIgTWFubgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3MgcHJlc2VudGF0aW9uIGxldmVscyBtb2R1bGUiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1jc3MzLXByZXNsZXYtMjAxNDEwMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBQcmVzZW50YXRpb24gTGV2ZWxzIE1vZHVsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBQcmVzZW50YXRpb24gTGV2ZWxzIE1vZHVsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMTAtMTQgLSA8YSB0aXRsZT0iQ1NTIFByZXNlbnRhdGlvbiBMZXZlbHMgTW9kdWxlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MzLXByZXNsZXYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSGlja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkjDpWtvbiBXaXVtIExpZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcnQgQm9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIG1vYmlsZSBwcm9maWxlIDIuMCIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLWNzcy1tb2JpbGUtMjAxNDEwMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBNb2JpbGUgUHJvZmlsZSAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIE1vYmlsZSAgUHJvZmlsZSZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMTAtMTQgLSA8YSB0aXRsZT0iQ1NTIE1vYmlsZSBQcm9maWxlIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLW1vYmlsZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcnQgQm9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYmVoYXZpb3JhbCBleHRlbnNpb25zIHRvIGNzcyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLWJlY3NzLTIwMTQxMDE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBCZWhhdmlvcmFsIEV4dGVuc2lvbnMgdG8gQ1NTIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QmVoYXZpb3JhbCBFeHRlbnNpb25zIHRvIENTUzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMTAtMTQgLSA8YSB0aXRsZT0iQmVoYXZpb3JhbCBFeHRlbnNpb25zIHRvIENTUyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYmVjc3MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kZXYudzMub3JnLzIwMDYveGJsMi9jc3MtbW9kdWxlLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQmVoYXZpb3JhbCBFeHRlbnNpb25zIHRvIENTUyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSGlja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzczMgaHlwZXJsaW5rIHByZXNlbnRhdGlvbiBtb2R1bGUiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1jc3MzLWh5cGVybGlua3MtMjAxNDEwMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUzMgSHlwZXJsaW5rIFByZXNlbnRhdGlvbiBNb2R1bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MzIEh5cGVybGluayBQcmVzZW50YXRpb24gTW9kdWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0xMC0xNCAtIDxhIHRpdGxlPSJDU1MzIEh5cGVybGluayBQcmVzZW50YXRpb24gTW9kdWxlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MzLWh5cGVybGlua3MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJ0IEJvcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyB0diBwcm9maWxlIDEuMCIgZGF0YS10YWc9ImNzcyBtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLWNzcy10di0yMDE0MTAxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFRWIFByb2ZpbGUgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBUViAgUHJvZmlsZSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMTAtMTQgLSA8YSB0aXRsZT0iQ1NTIFRWIFByb2ZpbGUgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtdHYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZWFuIEhheWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2xlbm4gQWRhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYW50ZWsgw4dlbGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SMOla29uIFdpdW0gTGllCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBjc3Mg4oCYcmVhZGVy4oCZIG1lZGlhIHR5cGUiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1jc3MzLXJlYWRlci0yMDE0MTAxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIENTUyDigJhSZWFkZXLigJkgTWVkaWEgVHlwZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBDU1Mg4oCYUmVhZGVy4oCZIE1lZGlhIFR5cGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTEwLTE0IC0gPGEgdGl0bGU9IlRoZSBDU1Mg4oCYUmVhZGVy4oCZIE1lZGlhIFR5cGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NzczMtcmVhZGVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVydCBCb3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBtYXJxdWVlIG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtY3NzMy1tYXJxdWVlLTIwMTQxMDE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgTWFycXVlZSBNb2R1bGUgTGV2ZWwgMyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgTWFycXVlZSAgTW9kdWxlICBMZXZlbCZuYnNwOzM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTEwLTE0IC0gPGEgdGl0bGU9IkNTUyBNYXJxdWVlIE1vZHVsZSBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MzLW1hcnF1ZWUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJ0IEJvcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyByZWdpb25zIG1vZHVsZSBsZXZlbCAxIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1dELWNzcy1yZWdpb25zLTEtMjAxNDEwMDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBSZWdpb25zIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBSZWdpb25zICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMTAtMDkgLSA8YSB0aXRsZT0iQ1NTIFJlZ2lvbnMgTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1yZWdpb25zLTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1yZWdpb25zLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgUmVnaW9ucyBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3NzZW4gQXRhbmFzc292CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxhbiBTdGVhcm5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idW5pZm9ybSBtZXNzYWdpbmcgcG9saWN5LCBsZXZlbCBvbmUiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLVVNUC0yMDE0MTAwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVW5pZm9ybSBNZXNzYWdpbmcgUG9saWN5LCBMZXZlbCBPbmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vbmlmb3JtIE1lc3NhZ2luZyBQb2xpY3ksIExldmVsIE9uZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTEwLTAyIC0gPGEgdGl0bGU9IlVuaWZvcm0gTWVzc2FnaW5nIFBvbGljeSwgTGV2ZWwgT25lIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9VTVAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UeWxlciBDbG9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgTWlsbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ic2VjdXJpdHkiPlNlY3VyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGZvciBsYXRpbiB0ZXh0IGxheW91dCBhbmQgcGFnaW5hdGlvbiIgZGF0YS10YWc9ImRwdWIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvV0QtZHB1Yi1sYXRpbnJlcS0yMDE0MDkzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVxdWlyZW1lbnRzIGZvciBMYXRpbiBUZXh0IExheW91dCBhbmQgUGFnaW5hdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyBmb3IgTGF0aW4gVGV4dCBMYXlvdXQgYW5kIFBhZ2luYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRpZ2l0YWwgUHVibGlzaGluZyBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA5LTMwIC0gPGEgdGl0bGU9IlJlcXVpcmVtZW50cyBmb3IgTGF0aW4gVGV4dCBMYXlvdXQgYW5kIFBhZ2luYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RwdWItbGF0aW5yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2RwdWItcGFnaW5hdGlvbi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUmVxdWlyZW1lbnRzIGZvciBMYXRpbiBUZXh0IExheW91dCBhbmQgUGFnaW5hdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIENyYW1lcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRwdWIiPkRpZ2l0YWwgUHVibGlzaGluZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgc2NyaXB0aW5nIGV4dGVuc2lvbiAxLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUteHF1ZXJ5LXN4LTEwLTIwMTQwOTE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgU2NyaXB0aW5nIEV4dGVuc2lvbiAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgIFNjcmlwdGluZyAgRXh0ZW5zaW9uJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA5LTE4IC0gPGEgdGl0bGU9IlhRdWVyeSBTY3JpcHRpbmcgRXh0ZW5zaW9uIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHF1ZXJ5LXN4LTEwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBTbmVsc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uIENoYW1iZXJsaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgRW5nb3ZhdG92CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuYSBGbG9yZXNjdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdpb3JnaW8gR2hlbGxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIE1lbHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplcm9tZSBTaW1lb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImxkcCBhY2Nlc3MgY29udHJvbCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtbGRwLWFjci0yMDE0MDkxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTERQIEFjY2VzcyBDb250cm9sIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TERQIEFjY2VzcyBDb250cm9sPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5MaW5rZWQgRGF0YSBQbGF0Zm9ybSAoTERQKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDktMTYgLSA8YSB0aXRsZT0iTERQIEFjY2VzcyBDb250cm9sIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sZHAtYWNyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHZjcy53My5vcmcvaGcvbGRwd2cvcmF3LWZpbGUvZGVmYXVsdC9sZHAtYWNyLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTERQIEFjY2VzcyBDb250cm9sIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBsaW5lIGdyaWQgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvV0QtY3NzLWxpbmUtZ3JpZC0xLTIwMTQwOTE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgTGluZSBHcmlkIE1vZHVsZSBMZXZlbCAxIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTICBMaW5lICBHcmlkICBNb2R1bGUgIExldmVsJm5ic3A7MTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDktMTYgLSA8YSB0aXRsZT0iQ1NTIExpbmUgR3JpZCBNb2R1bGUgTGV2ZWwgMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWxpbmUtZ3JpZC0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtbGluZS1ncmlkLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgTGluZSBHcmlkIE1vZHVsZSBMZXZlbCAxIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktvamkgSXNoaWkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGFuIFN0ZWFybnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZWZmaWNpZW50IHhtbCBpbnRlcmNoYW5nZSAoZXhpKSBwcm9maWxlIGZvciBsaW1pdGluZyB1c2FnZSBvZiBkeW5hbWljIG1lbW9yeSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLWV4aS1wcm9maWxlLTIwMTQwOTA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIChFWEkpIFByb2ZpbGUgZm9yIGxpbWl0aW5nIHVzYWdlIG9mIGR5bmFtaWMgbWVtb3J5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSAoRVhJKSBQcm9maWxlIGZvciBsaW1pdGluZyB1c2FnZSBvZiBkeW5hbWljIG1lbW9yeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RWZmaWNpZW50IEV4dGVuc2libGUgSW50ZXJjaGFuZ2UgIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wOS0wOSAtIDxhIHRpdGxlPSJFZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIChFWEkpIFByb2ZpbGUgZm9yIGxpbWl0aW5nIHVzYWdlIG9mIGR5bmFtaWMgbWVtb3J5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9leGktcHJvZmlsZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPllvdWVubiBGYWJsZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgUGVpbnRuZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImxpbmtlZCBkYXRhIHBsYXRmb3JtIGJlc3QgcHJhY3RpY2VzIGFuZCBndWlkZWxpbmVzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1sZHAtYnAtMjAxNDA4MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIExpbmtlZCBEYXRhIFBsYXRmb3JtIEJlc3QgUHJhY3RpY2VzIGFuZCBHdWlkZWxpbmVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TGlua2VkIERhdGEgUGxhdGZvcm0gQmVzdCBQcmFjdGljZXMgYW5kIEd1aWRlbGluZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkxpbmtlZCBEYXRhIFBsYXRmb3JtIChMRFApIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wOC0yOCAtIDxhIHRpdGxlPSJMaW5rZWQgRGF0YSBQbGF0Zm9ybSBCZXN0IFByYWN0aWNlcyBhbmQgR3VpZGVsaW5lcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGRwLWJwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHZjcy53My5vcmcvaGcvbGRwd2cvcmF3LWZpbGUvZGVmYXVsdC9sZHAtYnAvbGRwLWJwLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTGlua2VkIERhdGEgUGxhdGZvcm0gQmVzdCBQcmFjdGljZXMgYW5kIEd1aWRlbGluZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q29keSBCdXJsZXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pZ3VlbCBFc3RlYmFuIEd1dGnDqXJyZXoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYW5kYW5hIE1paGluZHVrdWxhc29vcml5YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlIHNyY3NldCBhdHRyaWJ1dGUiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtaHRtbC1zcmNzZXQtMjAxNDA4MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRoZSBzcmNzZXQgYXR0cmlidXRlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIHNyY3NldCBhdHRyaWJ1dGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDgtMTkgLSA8YSB0aXRsZT0iVGhlIHNyY3NldCBhdHRyaWJ1dGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtc3Jjc2V0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhlcmVzYSBPJiMwMzk7Q29ubm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Indha2UgbG9jazogdXNlIGNhc2VzIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLXdha2UtbG9jay11c2UtY2FzZXMtMjAxNDA4MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdha2UgTG9jazogVXNlIGNhc2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2FrZSBMb2NrOiBVc2UgY2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBhbmQgTW9iaWxlIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDgtMTQgLSA8YSB0aXRsZT0iV2FrZSBMb2NrOiBVc2UgY2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dha2UtbG9jay11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2Mtd2VibW9iLmdpdGh1Yi5pby93YWtlLWxvY2stdXNlLWNhc2VzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXYWtlIExvY2s6IFVzZSBjYXNlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5hdGFzaGEgUm9vbmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9taW5pcXVlIEhhemHDq2wtTWFzc2lldXgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW50cm9kdWN0aW9uIHRvIHdlYiBjb21wb25lbnRzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtY29tcG9uZW50cy1pbnRyby0yMDE0MDcyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW50cm9kdWN0aW9uIHRvIFdlYiBDb21wb25lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SW50cm9kdWN0aW9uIHRvIFdlYiBDb21wb25lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDctMjQgLSA8YSB0aXRsZT0iSW50cm9kdWN0aW9uIHRvIFdlYiBDb21wb25lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jb21wb25lbnRzLWludHJvIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJjb21wb25lbnRzL2V4cGxhaW5lci8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgSW50cm9kdWN0aW9uIHRvIFdlYiBDb21wb25lbnRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpbWl0cmkgR2xhemtvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhheWF0byBJdG8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlIHBpY3R1cmUgZWxlbWVudCIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1odG1sLXBpY3R1cmUtZWxlbWVudC0yMDE0MDcyMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIHBpY3R1cmUgRWxlbWVudCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBwaWN0dXJlIEVsZW1lbnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDctMjIgLSA8YSB0aXRsZT0iVGhlIHBpY3R1cmUgRWxlbWVudCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHRtbC1waWN0dXJlLWVsZW1lbnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWIgQXRraW5zIEpyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFBpZXRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Zb2F2IFdlaXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXRoZXcgTWFycXVpcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYnNpdGUgYWNjZXNzaWJpbGl0eSBjb25mb3JtYW5jZSBldmFsdWF0aW9uIG1ldGhvZG9sb2d5ICh3Y2FnLWVtKSAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLVdDQUctRU0tMjAxNDA3MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYnNpdGUgQWNjZXNzaWJpbGl0eSBDb25mb3JtYW5jZSBFdmFsdWF0aW9uIE1ldGhvZG9sb2d5IChXQ0FHLUVNKSAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWJzaXRlICBBY2Nlc3NpYmlsaXR5ICBDb25mb3JtYW5jZSAgRXZhbHVhdGlvbiAgTWV0aG9kb2xvZ3kgIChXQ0FHLUVNKSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RXZhbHVhdGlvbiBhbmQgUmVwYWlyIFRvb2xzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA3LTEwIC0gPGEgdGl0bGU9IldlYnNpdGUgQWNjZXNzaWJpbGl0eSBDb25mb3JtYW5jZSBFdmFsdWF0aW9uIE1ldGhvZG9sb2d5IChXQ0FHLUVNKSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dDQUctRU0iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIFZlbGxlbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhZGkgQWJvdS1aYWhyYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkZiAxLjEgcHJpbWVyIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1yZGYxMS1wcmltZXItMjAxNDA2MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERiAxLjEgUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGIDEuMSBQcmltZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDYtMjQgLSA8YSB0aXRsZT0iUkRGIDEuMSBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZjExLXByaW1lciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkd1dXMgU2NocmVpYmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXZlcyBSYWltb25kCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1dGhvcmluZyBodG1sOiBoYW5kbGluZyByaWdodC10by1sZWZ0IHNjcmlwdHMiIGRhdGEtdGFnPSJodG1sIGkxOG4iIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtaTE4bi1odG1sLXRlY2gtYmlkaS0yMDE0MDYwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXV0aG9yaW5nIEhUTUw6IEhhbmRsaW5nIFJpZ2h0LXRvLWxlZnQgU2NyaXB0cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkF1dGhvcmluZyBIVE1MOiBIYW5kbGluZyBSaWdodC10by1sZWZ0IFNjcmlwdHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNi0wMyAtIDxhIHRpdGxlPSJBdXRob3JpbmcgSFRNTDogSGFuZGxpbmcgUmlnaHQtdG8tbGVmdCBTY3JpcHRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9pMThuLWh0bWwtdGVjaC1iaWRpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9JbnRlcm5hdGlvbmFsL2RvY3MvYnAtaHRtbC1iaWRpLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBBdXRob3JpbmcgSFRNTDogSGFuZGxpbmcgUmlnaHQtdG8tbGVmdCBTY3JpcHRzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgSXNoaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhdXRob3JpbmcgaHRtbDogbGFuZ3VhZ2UgZGVjbGFyYXRpb25zIiBkYXRhLXRhZz0iaHRtbCBpMThuIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLWkxOG4taHRtbC10ZWNoLWxhbmctMjAxNDA2MDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEF1dGhvcmluZyBIVE1MOiBMYW5ndWFnZSBkZWNsYXJhdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BdXRob3JpbmcgSFRNTDogTGFuZ3VhZ2UgZGVjbGFyYXRpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDYtMDMgLSA8YSB0aXRsZT0iQXV0aG9yaW5nIEhUTUw6IExhbmd1YWdlIGRlY2xhcmF0aW9ucyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaTE4bi1odG1sLXRlY2gtbGFuZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvSW50ZXJuYXRpb25hbC9kb2NzL2JwLWh0bWwtbGFuZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQXV0aG9yaW5nIEhUTUw6IExhbmd1YWdlIGRlY2xhcmF0aW9ucyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idmNhcmQgb250b2xvZ3kgLSBmb3IgZGVzY3JpYmluZyBwZW9wbGUgYW5kIG9yZ2FuaXphdGlvbnMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLXZjYXJkLXJkZi0yMDE0MDUyMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgdkNhcmQgT250b2xvZ3kgLSBmb3IgZGVzY3JpYmluZyBQZW9wbGUgYW5kIE9yZ2FuaXphdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj52Q2FyZCBPbnRvbG9neSAtIGZvciBkZXNjcmliaW5nIFBlb3BsZSBhbmQgT3JnYW5pemF0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VtYW50aWMgV2ViIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDUtMjIgLSA8YSB0aXRsZT0idkNhcmQgT250b2xvZ3kgLSBmb3IgZGVzY3JpYmluZyBQZW9wbGUgYW5kIE9yZ2FuaXphdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZjYXJkLXJkZiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJlbmF0byBJYW5uZWxsYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIE1jS2lubmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlbW90aW9uIG1hcmt1cCBsYW5ndWFnZSAoZW1vdGlvbm1sKSAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1JFQy1lbW90aW9ubWwtMjAxNDA1MjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEVtb3Rpb24gTWFya3VwIExhbmd1YWdlIChFbW90aW9uTUwpIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVtb3Rpb24gIE1hcmt1cCAgTGFuZ3VhZ2UgIChFbW90aW9uTUwpJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNS0yMiAtIDxhIHRpdGxlPSJFbW90aW9uIE1hcmt1cCBMYW5ndWFnZSAoRW1vdGlvbk1MKSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Vtb3Rpb25tbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZlbGl4IEJ1cmtoYXJkdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmMgU2NocsO2ZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGZvbnQgbG9hZGluZyBtb2R1bGUgbGV2ZWwgMyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9XRC1jc3MtZm9udC1sb2FkaW5nLTMtMjAxNDA1MjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBGb250IExvYWRpbmcgTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIEZvbnQgIExvYWRpbmcgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNS0yMiAtIDxhIHRpdGxlPSJDU1MgRm9udCBMb2FkaW5nIE1vZHVsZSBMZXZlbCAzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtZm9udC1sb2FkaW5nLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1mb250LWxvYWRpbmcvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBGb250IExvYWRpbmcgTW9kdWxlIExldmVsIDMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIGdlbmVyYXRlZCBjb250ZW50IGZvciBwYWdlZCBtZWRpYSBtb2R1bGUiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvV0QtY3NzLWdjcG0tMy0yMDE0MDUxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIEdlbmVyYXRlZCBDb250ZW50IGZvciBQYWdlZCBNZWRpYSBNb2R1bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgR2VuZXJhdGVkIENvbnRlbnQgZm9yIFBhZ2VkIE1lZGlhIE1vZHVsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDUtMTMgLSA8YSB0aXRsZT0iQ1NTIEdlbmVyYXRlZCBDb250ZW50IGZvciBQYWdlZCBNZWRpYSBNb2R1bGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1nY3BtLTMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1nY3BtLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBDU1MgR2VuZXJhdGVkIENvbnRlbnQgZm9yIFBhZ2VkIE1lZGlhIE1vZHVsZSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIENyYW1lcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlZmZpY2llbnQgeG1sIGludGVyY2hhbmdlIChleGkpIHByaW1lciIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9XRC1leGktcHJpbWVyLTIwMTQwNDI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIChFWEkpIFByaW1lciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVmZmljaWVudCBYTUwgSW50ZXJjaGFuZ2UgKEVYSSkgUHJpbWVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5FZmZpY2llbnQgRXh0ZW5zaWJsZSBJbnRlcmNoYW5nZSAgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTI0IC0gPGEgdGl0bGU9IkVmZmljaWVudCBYTUwgSW50ZXJjaGFuZ2UgKEVYSSkgUHJpbWVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9leGktcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFBlaW50bmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2FudGlhZ28gUGVyaWNhcy1HZWVydHNlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImZpbGUgYXBpOiBkaXJlY3RvcmllcyBhbmQgc3lzdGVtIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtZmlsZS1zeXN0ZW0tYXBpLTIwMTQwNDI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBGaWxlIEFQSTogRGlyZWN0b3JpZXMgYW5kIFN5c3RlbSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkZpbGUgQVBJOiBEaXJlY3RvcmllcyBhbmQgU3lzdGVtPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDQtMjQgLSA8YSB0aXRsZT0iRmlsZSBBUEk6IERpcmVjdG9yaWVzIGFuZCBTeXN0ZW0gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2ZpbGUtc3lzdGVtLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2Rldi53My5vcmcvMjAwOS9kYXAvZmlsZS1zeXN0ZW0vZmlsZS1kaXItc3lzLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgRmlsZSBBUEk6IERpcmVjdG9yaWVzIGFuZCBTeXN0ZW0iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBVaHJoYW5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImZpbGUgYXBpOiB3cml0ZXIiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1maWxlLXdyaXRlci1hcGktMjAxNDA0MjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEZpbGUgQVBJOiBXcml0ZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5GaWxlIEFQSTogV3JpdGVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDQtMjQgLSA8YSB0aXRsZT0iRmlsZSBBUEk6IFdyaXRlciBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZmlsZS13cml0ZXItYXBpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZGV2LnczLm9yZy8yMDA5L2RhcC9maWxlLXN5c3RlbS9maWxlLXdyaXRlci5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEZpbGUgQVBJOiBXcml0ZXIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBVaHJoYW5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGZvciBpbmRpZXVpOiBldmVudHMgMS4wIGFuZCBpbmRpZXVpOiB1c2VyIGNvbnRleHQgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9XRC1pbmRpZS11aS1yZXF1aXJlbWVudHMtMjAxNDA0MjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgSW5kaWVVSTogRXZlbnRzIDEuMCBhbmQgSW5kaWVVSTogVXNlciBDb250ZXh0IDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyAgZm9yICBJbmRpZVVJOiAgRXZlbnRzICAxLjAgIGFuZCAgSW5kaWVVSTogIFVzZXIgIENvbnRleHQmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkluZGVwZW5kZW50IFVzZXIgSW50ZXJmYWNlIChJbmRpZSBVSSkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTIyIC0gPGEgdGl0bGU9IlJlcXVpcmVtZW50cyBmb3IgSW5kaWVVSTogRXZlbnRzIDEuMCBhbmQgSW5kaWVVSTogVXNlciBDb250ZXh0IDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaW5kaWUtdWktcmVxdWlyZW1lbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHZjcy53My5vcmcvaGcvSW5kaWVVSS9yYXctZmlsZS9kZWZhdWx0L3NyYy9pbmRpZS11aS1yZXF1aXJlbWVudHMuaHRtbCIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBSZXF1aXJlbWVudHMgZm9yIEluZGllVUk6IEV2ZW50cyAxLjAgYW5kIEluZGllVUk6IFVzZXIgQ29udGV4dCAxLjAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3ZnIGludGVncmF0aW9uIiBkYXRhLXRhZz0iY3NzIGdyYXBoaWNzIGh0bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvV0Qtc3ZnLWludGVncmF0aW9uLTIwMTQwNDE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTVkcgSW50ZWdyYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgSW50ZWdyYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDQtMTcgLSA8YSB0aXRsZT0iU1ZHIEludGVncmF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zdmctaW50ZWdyYXRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9zdmd3Zy5vcmcvc3BlY3MvaW50ZWdyYXRpb24vIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFNWRyBJbnRlZ3JhdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYW1lcm9uIE1jQ29ybWFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvdWcgU2NoZXBlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaXJrIFNjaHVsemUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aGUgbmV0d29yayBpbmZvcm1hdGlvbiBhcGkiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1uZXRpbmZvLWFwaS0yMDE0MDQxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIE5ldHdvcmsgSW5mb3JtYXRpb24gQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIE5ldHdvcmsgSW5mb3JtYXRpb24gQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0xMCAtIDxhIHRpdGxlPSJUaGUgTmV0d29yayBJbmZvcm1hdGlvbiBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L25ldGluZm8tYXBpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHZjcy53My5vcmcvaGcvZGFwL3Jhdy1maWxlL3RpcC9uZXR3b3JrLWFwaS9PdmVydmlldy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRoZSBOZXR3b3JrIEluZm9ybWF0aW9uIEFQSSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Nb3VuaXIgTGFtb3VyaQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGVudGl0eSBkZWZpbml0aW9ucyBmb3IgY2hhcmFjdGVycyAoMm5kIGVkaXRpb24pIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMteG1sLWVudGl0eS1uYW1lcy0yMDE0MDQxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEVudGl0eSBEZWZpbml0aW9ucyBmb3IgQ2hhcmFjdGVycyAoMm5kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEVudGl0eSBEZWZpbml0aW9ucyBmb3IgQ2hhcmFjdGVycyAoMm5kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NYXRoIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0xMCAtIDxhIHRpdGxlPSJYTUwgRW50aXR5IERlZmluaXRpb25zIGZvciBDaGFyYWN0ZXJzICgybmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1lbnRpdHktbmFtZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBDYXJsaXNsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgRCBGIElvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWF0aGVtYXRpY2FsIG1hcmt1cCBsYW5ndWFnZSAobWF0aG1sKSB2ZXJzaW9uIDMuMCAybmQgZWRpdGlvbiIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLU1hdGhNTDMtMjAxNDA0MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1hdGhlbWF0aWNhbCBNYXJrdXAgTGFuZ3VhZ2UgKE1hdGhNTCkgVmVyc2lvbiAzLjAgMm5kIEVkaXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NYXRoZW1hdGljYWwgTWFya3VwIExhbmd1YWdlIChNYXRoTUwpIFZlcnNpb24gMy4wIDJuZCBFZGl0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NYXRoIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0xMCAtIDxhIHRpdGxlPSJNYXRoZW1hdGljYWwgTWFya3VwIExhbmd1YWdlIChNYXRoTUwpIFZlcnNpb24gMy4wIDJuZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9NYXRoTUwzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQ2FybGlzbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXRyaWNrIEQgRiBJb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JlcnQgUiBNaW5lcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhxdWVyeSAzLjAgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLXhxdWVyeS0zMC1yZXF1aXJlbWVudHMtMjAxNDA0MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSAzLjAgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFF1ZXJ5IDMuMCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDQtMDggLSA8YSB0aXRsZT0iWFF1ZXJ5IDMuMCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS0zMC1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBSb2JpZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBFbmdvdmF0b3YKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHF1ZXJ5eCAzLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1JFQy14cXVlcnl4LTMwLTIwMTQwNDA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnlYIDMuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeVgmbmJzcDszLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDQtMDggLSA8YSB0aXRsZT0iWFF1ZXJ5WCAzLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeXgtMzAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KaW0gTWVsdG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWJ1aSAtIHRhc2sgbW9kZWxzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtdGFzay1tb2RlbHMtMjAxNDA0MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1CVUkgLSBUYXNrIE1vZGVscyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1CVUkgLSBUYXNrIE1vZGVsczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TW9kZWwtQmFzZWQgVXNlciBJbnRlcmZhY2VzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0wOCAtIDxhIHRpdGxlPSJNQlVJIC0gVGFzayBNb2RlbHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Rhc2stbW9kZWxzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmFiaW8gUGF0ZXJuw7IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYXJtZW4gU2FudG9ybwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNwYW5vIEx1Y2lvIERhdmlkZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmFnZ2V0dAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgYW5kIHhwYXRoIGRhdGEgbW9kZWwgMy4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMteHBhdGgtZGF0YW1vZGVsLTMwLTIwMTQwNDA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgYW5kIFhQYXRoIERhdGEgTW9kZWwgMy4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFF1ZXJ5ICBhbmQgIFhQYXRoICBEYXRhICBNb2RlbCZuYnNwOzMuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0wOCAtIDxhIHRpdGxlPSJYUXVlcnkgYW5kIFhQYXRoIERhdGEgTW9kZWwgMy4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aC1kYXRhbW9kZWwtMzAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRlcnMgQmVyZ2x1bmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIFNuZWxzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhwYXRoIGFuZCB4cXVlcnkgZnVuY3Rpb25zIGFuZCBvcGVyYXRvcnMgMy4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMteHBhdGgtZnVuY3Rpb25zLTMwLTIwMTQwNDA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUGF0aCBhbmQgWFF1ZXJ5IEZ1bmN0aW9ucyBhbmQgT3BlcmF0b3JzIDMuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhQYXRoICBhbmQgIFhRdWVyeSAgRnVuY3Rpb25zICBhbmQgIE9wZXJhdG9ycyZuYnNwOzMuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0wOCAtIDxhIHRpdGxlPSJYUGF0aCBhbmQgWFF1ZXJ5IEZ1bmN0aW9ucyBhbmQgT3BlcmF0b3JzIDMuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHBhdGgtZnVuY3Rpb25zLTMwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBLYXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgMy4wIHVzZSBjYXNlcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS14cXVlcnktMzAtdXNlLWNhc2VzLTIwMTQwNDA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgMy4wIFVzZSBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAzLjAgVXNlIENhc2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTA4IC0gPGEgdGl0bGU9IlhRdWVyeSAzLjAgVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnktMzAtdXNlLWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uYXRoYW4gUm9iaWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaW0gS3Jhc2thCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgMy4wOiBhbiB4bWwgcXVlcnkgbGFuZ3VhZ2UiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1JFQy14cXVlcnktMzAtMjAxNDA0MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSAzLjA6IEFuIFhNTCBRdWVyeSBMYW5ndWFnZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAzLjA6IEFuIFhNTCBRdWVyeSBMYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0wOCAtIDxhIHRpdGxlPSJYUXVlcnkgMy4wOiBBbiBYTUwgUXVlcnkgTGFuZ3VhZ2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS0zMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uIENoYW1iZXJsaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIER5Y2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIFNuZWxzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHBhdGggbGFuZ3VhZ2UgKHhwYXRoKSAzLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1JFQy14cGF0aC0zMC0yMDE0MDQwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFBhdGggTGFuZ3VhZ2UgKFhQYXRoKSAzLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgIFBhdGggIExhbmd1YWdlICAoWFBhdGgpJm5ic3A7My4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTA4IC0gPGEgdGl0bGU9IlhNTCBQYXRoIExhbmd1YWdlIChYUGF0aCkgMy4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aC0zMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uIENoYW1iZXJsaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIER5Y2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIFNuZWxzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtYnVpIC0gYWJzdHJhY3QgdXNlciBpbnRlcmZhY2UgbW9kZWxzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtYWJzdHJhY3QtdWktMjAxNDA0MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1CVUkgLSBBYnN0cmFjdCBVc2VyIEludGVyZmFjZSBNb2RlbHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NQlVJIC0gQWJzdHJhY3QgVXNlciBJbnRlcmZhY2UgTW9kZWxzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2RlbC1CYXNlZCBVc2VyIEludGVyZmFjZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTA4IC0gPGEgdGl0bGU9Ik1CVUkgLSBBYnN0cmFjdCBVc2VyIEludGVyZmFjZSBNb2RlbHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Fic3RyYWN0LXVpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbiBWYW5kZXJkb25ja3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNhcmRvIFRlc29yaWVybwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5lc3JpbmUgTWV6aG91ZGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WaXZpYW4gR2VuYXJvIE1vdHRpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJhbsOnb2lzIEJldXZlbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kw6lyw6ltaWUgTWVsY2hpb3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhzbHQgYW5kIHhxdWVyeSBzZXJpYWxpemF0aW9uIDMuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLXhzbHQteHF1ZXJ5LXNlcmlhbGl6YXRpb24tMzAtMjAxNDA0MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhTTFQgYW5kIFhRdWVyeSBTZXJpYWxpemF0aW9uIDMuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhTTFQgIGFuZCAgWFF1ZXJ5ICBTZXJpYWxpemF0aW9uJm5ic3A7My4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTA4IC0gPGEgdGl0bGU9IlhTTFQgYW5kIFhRdWVyeSBTZXJpYWxpemF0aW9uIDMuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsdC14cXVlcnktc2VyaWFsaXphdGlvbi0zMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJ5IFpvbmdhcm8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXcgQ29sZW1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgU3BlcmJlcmctTWNRdWVlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmV2aWV3IG9mIGFwcHMgdGhhdCB1c2UgbmV0d29yayBpbmZvcm1hdGlvbiIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1uZXRpbmZvLXVzZWNhc2VzLTIwMTQwNDAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXZpZXcgb2YgYXBwcyB0aGF0IHVzZSBuZXR3b3JrIGluZm9ybWF0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmV2aWV3IG9mIGFwcHMgdGhhdCB1c2UgbmV0d29yayBpbmZvcm1hdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIGFuZCBNb2JpbGUgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wNC0wMyAtIDxhIHRpdGxlPSJSZXZpZXcgb2YgYXBwcyB0aGF0IHVzZSBuZXR3b3JrIGluZm9ybWF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9uZXRpbmZvLXVzZWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLXdlYm1vYi5naXRodWIuaW8vbmV0aW5mby11c2VjYXNlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUmV2aWV3IG9mIGFwcHMgdGhhdCB1c2UgbmV0d29yayBpbmZvcm1hdGlvbiI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZlcm5hbmRvIEppbcOpbmV6IE1vcmVubwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVybmVzdG8gSmltZW5legogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3Mgc2NvcGluZyBtb2R1bGUgbGV2ZWwgMSIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9XRC1jc3Mtc2NvcGluZy0xLTIwMTQwNDAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgU2NvcGluZyBNb2R1bGUgTGV2ZWwgMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgU2NvcGluZyAgTW9kdWxlICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTAzIC0gPGEgdGl0bGU9IkNTUyBTY29waW5nIE1vZHVsZSBMZXZlbCAxIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3Mtc2NvcGluZy0xIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3Mtc2NvcGluZy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFNjb3BpbmcgTW9kdWxlIExldmVsIDEiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGFiIEF0a2lucyBKci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idm9jYWJ1bGFyaWVzIGZvciBlbW90aW9ubWwiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtZW1vdGlvbi12b2MtMjAxNDA0MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZvY2FidWxhcmllcyBmb3IgRW1vdGlvbk1MIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Vm9jYWJ1bGFyaWVzIGZvciBFbW90aW9uTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk11bHRpbW9kYWwgSW50ZXJhY3Rpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTA0LTAxIC0gPGEgdGl0bGU9IlZvY2FidWxhcmllcyBmb3IgRW1vdGlvbk1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbW90aW9uLXZvYyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZlbGl4IEJ1cmtoYXJkdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmMgU2NocsO2ZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2F0aGVyaW5lIFBlbGFjaGF1ZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhY2Nlc3NpYmxlIHJpY2ggaW50ZXJuZXQgYXBwbGljYXRpb25zICh3YWktYXJpYSkgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLXdhaS1hcmlhLTIwMTQwMzIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIChXQUktQVJJQSkgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QWNjZXNzaWJsZSAgUmljaCAgSW50ZXJuZXQgIEFwcGxpY2F0aW9ucyAgKFdBSS1BUklBKSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdG9jb2xzIGFuZCBGb3JtYXRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMy0yMCAtIDxhIHRpdGxlPSJBY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIChXQUktQVJJQSkgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93YWktYXJpYSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIENyYWlnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBzaGFwZXMgbW9kdWxlIGxldmVsIDEiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9DUi1jc3Mtc2hhcGVzLTEtMjAxNDAzMjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBTaGFwZXMgTW9kdWxlIExldmVsIDEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIFNoYXBlcyAgTW9kdWxlICBMZXZlbCZuYnNwOzE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTAzLTIwIC0gPGEgdGl0bGU9IkNTUyBTaGFwZXMgTW9kdWxlIExldmVsIDEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Nzcy1zaGFwZXMtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXNoYXBlcy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ1NTIFNoYXBlcyBNb2R1bGUgTGV2ZWwgMSI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WaW5jZW50IEhhcmR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9zc2VuIEF0YW5hc3NvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsYW4gU3RlYXJucwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBuYW1lc3BhY2VzIG1vZHVsZSBsZXZlbCAzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtY3NzLW5hbWVzcGFjZXMtMy0yMDE0MDMyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIE5hbWVzcGFjZXMgTW9kdWxlIExldmVsIDMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgIE5hbWVzcGFjZXMgIE1vZHVsZSAgTGV2ZWwmbmJzcDszPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMy0yMCAtIDxhIHRpdGxlPSJDU1MgTmFtZXNwYWNlcyBNb2R1bGUgTGV2ZWwgMyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLW5hbWVzcGFjZXMtMyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLW5hbWVzcGFjZXMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBOYW1lc3BhY2VzIE1vZHVsZSBMZXZlbCAzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2FpLWFyaWEgMS4wIHVzZXIgYWdlbnQgaW1wbGVtZW50YXRpb24gZ3VpZGUiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtd2FpLWFyaWEtaW1wbGVtZW50YXRpb24tMjAxNDAzMjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdBSS1BUklBIDEuMCBVc2VyIEFnZW50IEltcGxlbWVudGF0aW9uIEd1aWRlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V0FJLUFSSUEgMS4wIFVzZXIgQWdlbnQgSW1wbGVtZW50YXRpb24gR3VpZGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29scyBhbmQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDMtMjAgLSA8YSB0aXRsZT0iV0FJLUFSSUEgMS4wIFVzZXIgQWdlbnQgSW1wbGVtZW50YXRpb24gR3VpZGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dhaS1hcmlhLWltcGxlbWVudGF0aW9uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZXBoIFNjaGV1aGFtbWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaHRtbCB0ZW1wbGF0ZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtaHRtbC10ZW1wbGF0ZXMtMjAxNDAzMTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgVGVtcGxhdGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTCBUZW1wbGF0ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPihoaXN0b3JpY2FsKSBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMy0xOCAtIDxhIHRpdGxlPSJIVE1MIFRlbXBsYXRlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHRtbC10ZW1wbGF0ZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy93ZWJjb21wb25lbnRzL3Jhdy1maWxlL3RpcC9zcGVjL3RlbXBsYXRlcy9pbmRleC5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEhUTUwgVGVtcGxhdGVzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpbWl0cmkgR2xhemtvdgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhZmFlbCBXZWluc3RlaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub255IFJvc3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsaW5rZWQgZGF0YSBwbGF0Zm9ybSB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtbGRwLXVjci0yMDE0MDMxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTGlua2VkIERhdGEgUGxhdGZvcm0gVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5MaW5rZWQgRGF0YSBQbGF0Zm9ybSBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TGlua2VkIERhdGEgUGxhdGZvcm0gKExEUCkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTAzLTEzIC0gPGEgdGl0bGU9IkxpbmtlZCBEYXRhIFBsYXRmb3JtIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sZHAtdWNyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy8yMDEyL2xkcC9oZy9sZHAtdWNyLmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgTGlua2VkIERhdGEgUGxhdGZvcm0gVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgQmF0dGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgU3BlaWNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZXRhZGF0YSBhcGkgZm9yIG1lZGlhIHJlc291cmNlcyAxLjAiIGRhdGEtdGFnPSJtZWRpYSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1JFQy1tZWRpYW9udC1hcGktMS4wLTIwMTQwMzEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNZXRhZGF0YSBBUEkgZm9yIE1lZGlhIFJlc291cmNlcyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZXRhZGF0YSAgQVBJICBmb3IgIE1lZGlhICBSZXNvdXJjZXMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1lZGlhIEFubm90YXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMy0xMyAtIDxhIHRpdGxlPSJNZXRhZGF0YSBBUEkgZm9yIE1lZGlhIFJlc291cmNlcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21lZGlhb250LWFwaS0xLjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GbG9yaWFuIFN0ZWdtYWllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldlcm5lciBCYWlsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gSMO2ZmZlcm5pZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldvbnN1ayBMZWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBQb3BwZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkZiAxLjEgdHVydGxlIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLXR1cnRsZS0yMDE0MDIyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGIDEuMSBUdXJ0bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgMS4xIFR1cnRsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMi0yNSAtIDxhIHRpdGxlPSJSREYgMS4xIFR1cnRsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdHVydGxlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBQcnVkJiMwMzk7aG9tbWVhdXgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HYXZpbiBDYXJvdGhlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgMS4xIHRyaWciIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtdHJpZy0yMDE0MDIyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGIDEuMSBUcmlHIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGIDEuMSBUcmlHPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTAyLTI1IC0gPGEgdGl0bGU9IlJERiAxLjEgVHJpRyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdHJpZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdhdmluIENhcm90aGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHkgU2VhYm9ybmUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgMS4xIG4tcXVhZHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtbi1xdWFkcy0yMDE0MDIyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGIDEuMSBOLVF1YWRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGIDEuMSBOLVF1YWRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTAyLTI1IC0gPGEgdGl0bGU9IlJERiAxLjEgTi1RdWFkcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvbi1xdWFkcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdhdmluIENhcm90aGVycwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkZiAxLjEgc2VtYW50aWNzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLXJkZjExLW10LTIwMTQwMjI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSREYgMS4xIFNlbWFudGljcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJERiAxLjEgU2VtYW50aWNzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTAyLTI1IC0gPGEgdGl0bGU9IlJERiAxLjEgU2VtYW50aWNzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGYxMS1tdCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgSGF5ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBQYXRlbC1TY2huZWlkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgMS4xOiBvbiBzZW1hbnRpY3Mgb2YgcmRmIGRhdGFzZXRzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1yZGYxMS1kYXRhc2V0cy0yMDE0MDIyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGIDEuMTogT24gU2VtYW50aWNzIG9mIFJERiBEYXRhc2V0cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJERiAxLjE6IE9uIFNlbWFudGljcyBvZiBSREYgRGF0YXNldHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDItMjUgLSA8YSB0aXRsZT0iUkRGIDEuMTogT24gU2VtYW50aWNzIG9mIFJERiBEYXRhc2V0cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRmMTEtZGF0YXNldHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRvaW5lIFppbW1lcm1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgMS4xIG4tdHJpcGxlcyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1JFQy1uLXRyaXBsZXMtMjAxNDAyMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERiAxLjEgTi1UcmlwbGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGIDEuMSBOLVRyaXBsZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDItMjUgLSA8YSB0aXRsZT0iUkRGIDEuMSBOLVRyaXBsZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L24tdHJpcGxlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdhdmluIENhcm90aGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHkgU2VhYm9ybmUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgMS4xIGNvbmNlcHRzIGFuZCBhYnN0cmFjdCBzeW50YXgiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtcmRmMTEtY29uY2VwdHMtMjAxNDAyMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERiAxLjEgQ29uY2VwdHMgYW5kIEFic3RyYWN0IFN5bnRheCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJERiAxLjEgQ29uY2VwdHMgYW5kIEFic3RyYWN0IFN5bnRheDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMi0yNSAtIDxhIHRpdGxlPSJSREYgMS4xIENvbmNlcHRzIGFuZCBBYnN0cmFjdCBTeW50YXggcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZjExLWNvbmNlcHRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBDeWdhbmlhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIFdvb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrdXMgTGFudGhhbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3aGF04oCZcyBuZXcgaW4gcmRmIDEuMSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtcmRmMTEtbmV3LTIwMTQwMjI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXaGF04oCZcyBOZXcgaW4gUkRGIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldoYXTigJlzICBOZXcgIGluICBSREYmbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDItMjUgLSA8YSB0aXRsZT0iV2hhdOKAmXMgTmV3IGluIFJERiAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZjExLW5ldyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIFdvb2QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgMS4xIHhtbCBzeW50YXgiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtcmRmLXN5bnRheC1ncmFtbWFyLTIwMTQwMjI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSREYgMS4xIFhNTCBTeW50YXggZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgMS4xIFhNTCBTeW50YXg8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDItMjUgLSA8YSB0aXRsZT0iUkRGIDEuMSBYTUwgU3ludGF4IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGYtc3ludGF4LWdyYW1tYXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GYWJpZW4gR2FuZG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3V1cyBTY2hyZWliZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmRmIHNjaGVtYSAxLjEiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtcmRmLXNjaGVtYS0yMDE0MDIyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGIFNjaGVtYSAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgIFNjaGVtYSZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMi0yNSAtIDxhIHRpdGxlPSJSREYgU2NoZW1hIDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRmLXNjaGVtYSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbiBCcmlja2xleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhbWFuYXRoYW4gR3VoYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkZiAxLjEgdGVzdCBjYXNlcyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtcmRmMTEtdGVzdGNhc2VzLTIwMTQwMjI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSREYgMS4xIFRlc3QgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgMS4xIFRlc3QgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDItMjUgLSA8YSB0aXRsZT0iUkRGIDEuMSBUZXN0IENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGYxMS10ZXN0Y2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBLZWxsb2dnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya3VzIExhbnRoYWxlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnb29kIHByYWN0aWNlcyBmb3IgY2FwYWJpbGl0eSB1cmxzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L1dELWNhcGFiaWxpdHktdXJscy0yMDE0MDIxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR29vZCBQcmFjdGljZXMgZm9yIENhcGFiaWxpdHkgVVJMcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkdvb2QgUHJhY3RpY2VzIGZvciBDYXBhYmlsaXR5IFVSTHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRlY2huaWNhbCBBcmNoaXRlY3R1cmUgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMi0xOCAtIDxhIHRpdGxlPSJHb29kIFByYWN0aWNlcyBmb3IgQ2FwYWJpbGl0eSBVUkxzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jYXBhYmlsaXR5LXVybHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93M2N0YWcuZ2l0aHViLmlvL2NhcGFiaWxpdHktdXJscy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgR29vZCBQcmFjdGljZXMgZm9yIENhcGFiaWxpdHkgVVJMcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZW5pIFRlbm5pc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlZmZpY2llbnQgeG1sIGludGVyY2hhbmdlIChleGkpIGZvcm1hdCAxLjAgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLWV4aS0yMDE0MDIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSAoRVhJKSBGb3JtYXQgMS4wIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIChFWEkpIEZvcm1hdCAxLjAgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RWZmaWNpZW50IEV4dGVuc2libGUgSW50ZXJjaGFuZ2UgIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMi0xMSAtIDxhIHRpdGxlPSJFZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIChFWEkpIEZvcm1hdCAxLjAgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZXhpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBTY2huZWlkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWt1a2kgS2FtaXlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFBlaW50bmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UnVtZW4gS3l1c2Frb3YKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHByb2Nlc3NvciBwcm9maWxlcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS14bWwtcHJvYy1wcm9maWxlcy0yMDE0MDIwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIHByb2Nlc3NvciBwcm9maWxlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBwcm9jZXNzb3IgcHJvZmlsZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBQcm9jZXNzaW5nIE1vZGVsIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMi0wNiAtIDxhIHRpdGxlPSJYTUwgcHJvY2Vzc29yIHByb2ZpbGVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtcHJvYy1wcm9maWxlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJ5IFRob21wc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgRnVsbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3M2MgaHRtbCBydWJ5IG1hcmt1cCBleHRlbnNpb25zIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS1odG1sLXJ1YnktZXh0ZW5zaW9ucy0yMDE0MDIwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVzNDIEhUTUwgUnVieSBNYXJrdXAgRXh0ZW5zaW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlczQyBIVE1MIFJ1YnkgTWFya3VwIEV4dGVuc2lvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDItMDQgLSA8YSB0aXRsZT0iVzNDIEhUTUwgUnVieSBNYXJrdXAgRXh0ZW5zaW9ucyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHRtbC1ydWJ5LWV4dGVuc2lvbnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kYXJvYmluLmdpdGh1Yi5jb20vaHRtbC1ydWJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBXM0MgSFRNTCBSdWJ5IE1hcmt1cCBFeHRlbnNpb25zIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvYmluIEJlcmpvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSByZGYgZGF0YSBjdWJlIHZvY2FidWxhcnkiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9SRUMtdm9jYWItZGF0YS1jdWJlLTIwMTQwMTE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgUkRGIERhdGEgQ3ViZSBWb2NhYnVsYXJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIFJERiBEYXRhIEN1YmUgVm9jYWJ1bGFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+R292ZXJubWVudCBMaW5rZWQgRGF0YSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDEtMTYgLSA8YSB0aXRsZT0iVGhlIFJERiBEYXRhIEN1YmUgVm9jYWJ1bGFyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9jYWItZGF0YS1jdWJlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBDeWdhbmlhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmV5bm9sZHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aGUgb3JnYW5pemF0aW9uIG9udG9sb2d5IiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvUkVDLXZvY2FiLW9yZy0yMDE0MDExNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIE9yZ2FuaXphdGlvbiBPbnRvbG9neSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBPcmdhbml6YXRpb24gT250b2xvZ3k8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkdvdmVybm1lbnQgTGlua2VkIERhdGEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDE0LTAxLTE2IC0gPGEgdGl0bGU9IlRoZSBPcmdhbml6YXRpb24gT250b2xvZ3kgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvY2FiLW9yZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmV5bm9sZHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBtZXNzYWdpbmcgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtbWVzc2FnaW5nLWFwaS0yMDE0MDExNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIE1lc3NhZ2luZyBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgTWVzc2FnaW5nIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDEtMTQgLSA8YSB0aXRsZT0iVGhlIE1lc3NhZ2luZyBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21lc3NhZ2luZy1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb21pbmlxdWUgSGF6YcOrbC1NYXNzaWV1eAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN1cmVzaCBDaGl0dHVyaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1heCBGcm91bWVudGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyaWEgQW5nZWxlcyBPdGVvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmlrbGFzIFdpZGVsbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aGUgc3lzdGVtIGluZm9ybWF0aW9uIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLXN5c3RlbS1pbmZvLWFwaS0yMDE0MDExNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIFN5c3RlbSBJbmZvcm1hdGlvbiBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgU3lzdGVtIEluZm9ybWF0aW9uIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDEtMTQgLSA8YSB0aXRsZT0iVGhlIFN5c3RlbSBJbmZvcm1hdGlvbiBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3N5c3RlbS1pbmZvLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1heCBGcm91bWVudGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RHp1bmcgVHJhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyeWFuIFN1bGxpdmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBpbnRlbnRzIGFkZGVuZHVtIC0gbG9jYWwgc2VydmljZXMiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTQvTk9URS13ZWJpbnRlbnRzLWxvY2FsLXNlcnZpY2VzLTIwMTQwMTE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgSW50ZW50cyBBZGRlbmR1bSAtIExvY2FsIFNlcnZpY2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIEludGVudHMgQWRkZW5kdW0gLSBMb2NhbCBTZXJ2aWNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDEtMTQgLSA8YSB0aXRsZT0iV2ViIEludGVudHMgQWRkZW5kdW0gLSBMb2NhbCBTZXJ2aWNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2ViaW50ZW50cy1sb2NhbC1zZXJ2aWNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNsYWVzIE5pbHNzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JpZnVtaSBLaWtrYXdhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBpY2sgbWVkaWEgaW50ZW50IiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtZ2FsbGVyeS0yMDE0MDExNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUGljayBNZWRpYSBJbnRlbnQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QaWNrIE1lZGlhIEludGVudDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDEtMTQgLSA8YSB0aXRsZT0iUGljayBNZWRpYSBJbnRlbnQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2dhbGxlcnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdW5na2VlIFNvbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Xb25zdWsgTGVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBpY2sgY29udGFjdHMgaW50ZW50IiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtY29udGFjdHMtYXBpLTIwMTQwMTE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQaWNrIENvbnRhY3RzIEludGVudCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBpY2sgQ29udGFjdHMgSW50ZW50PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMS0xNCAtIDxhIHRpdGxlPSJQaWNrIENvbnRhY3RzIEludGVudCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY29udGFjdHMtYXBpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBUaWJiZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iaW4gQmVyam9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVuZ2tlZSBTb25nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNhbGVuZGFyIGFwaSIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLWNhbGVuZGFyLWFwaS0yMDE0MDExNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ2FsZW5kYXIgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2FsZW5kYXIgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMS0xNCAtIDxhIHRpdGxlPSJDYWxlbmRhciBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NhbGVuZGFyLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgVGliYmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN1cmVzaCBDaGl0dHVyaQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYmVzdCBwcmFjdGljZXMgZm9yIHB1Ymxpc2hpbmcgbGlua2VkIGRhdGEiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLWxkLWJwLTIwMTQwMTA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBCZXN0IFByYWN0aWNlcyBmb3IgUHVibGlzaGluZyBMaW5rZWQgRGF0YSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkJlc3QgUHJhY3RpY2VzIGZvciBQdWJsaXNoaW5nIExpbmtlZCBEYXRhPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Hb3Zlcm5tZW50IExpbmtlZCBEYXRhIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMS0wOSAtIDxhIHRpdGxlPSJCZXN0IFByYWN0aWNlcyBmb3IgUHVibGlzaGluZyBMaW5rZWQgRGF0YSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGQtYnAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJuYWRldHRlIEh5bGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdoaXNsYWluIEF1Z3VzdGUgQXRlbWV6aW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Qm9yaXMgVmlsbGF6w7NuLVRlcnJhemFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWJ1aSAtIGdsb3NzYXJ5IiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxNC9OT1RFLW1idWktZ2xvc3NhcnktMjAxNDAxMDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1CVUkgLSBHbG9zc2FyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1CVUkgLSBHbG9zc2FyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TW9kZWwtQmFzZWQgVXNlciBJbnRlcmZhY2VzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxNC0wMS0wNyAtIDxhIHRpdGxlPSJNQlVJIC0gR2xvc3NhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21idWktZ2xvc3NhcnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYXJvc2xhdiBQdWxsbWFubgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImludHJvZHVjdGlvbiB0byBtb2RlbC1iYXNlZCB1c2VyIGludGVyZmFjZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDE0L05PVEUtbWJ1aS1pbnRyby0yMDE0MDEwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW50cm9kdWN0aW9uIHRvIE1vZGVsLUJhc2VkIFVzZXIgSW50ZXJmYWNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkludHJvZHVjdGlvbiB0byBNb2RlbC1CYXNlZCBVc2VyIEludGVyZmFjZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1vZGVsLUJhc2VkIFVzZXIgSW50ZXJmYWNlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTQtMDEtMDcgLSA8YSB0aXRsZT0iSW50cm9kdWN0aW9uIHRvIE1vZGVsLUJhc2VkIFVzZXIgSW50ZXJmYWNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWJ1aS1pbnRybyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvMjAxMS9tYnVpL2RyYWZ0cy9tYnVpLWludHJvLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBJbnRyb2R1Y3Rpb24gdG8gTW9kZWwtQmFzZWQgVXNlciBJbnRlcmZhY2VzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdlcnJpdCBNZWl4bmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2FlbGxlIENhbHZhcnkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwZXJmb3JtYW5jZSB0aW1lbGluZSIgZGF0YS10YWc9InBlcmZvcm1hbmNlIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXBlcmZvcm1hbmNlLXRpbWVsaW5lLTIwMTMxMjEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQZXJmb3JtYW5jZSBUaW1lbGluZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBlcmZvcm1hbmNlIFRpbWVsaW5lPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgUGVyZm9ybWFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTEyLTEyIC0gPGEgdGl0bGU9IlBlcmZvcm1hbmNlIFRpbWVsaW5lIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wZXJmb3JtYW5jZS10aW1lbGluZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aaGloZW5nIFdhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwZXJmb3JtYW5jZSI+UGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgMS4xIGpzb24gYWx0ZXJuYXRlIHNlcmlhbGl6YXRpb24gKHJkZi9qc29uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtcmRmLWpzb24tMjAxMzExMDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERiAxLjEgSlNPTiBBbHRlcm5hdGUgU2VyaWFsaXphdGlvbiAoUkRGL0pTT04pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGIDEuMSBKU09OIEFsdGVybmF0ZSBTZXJpYWxpemF0aW9uIChSREYvSlNPTik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMTEtMDcgLSA8YSB0aXRsZT0iUkRGIDEuMSBKU09OIEFsdGVybmF0ZSBTZXJpYWxpemF0aW9uIChSREYvSlNPTikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZi1qc29uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIERhdmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhvbWFzIFN0ZWluZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bcm5hdWQgTGUgSG9ycwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjc3Mgc3R5bGUgYXR0cmlidXRlcyIgZGF0YS10YWc9ImNzcyBodG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtY3NzLXN0eWxlLWF0dHItMjAxMzExMDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENTUyBTdHlsZSBBdHRyaWJ1dGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1NTIFN0eWxlIEF0dHJpYnV0ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTExLTA3IC0gPGEgdGl0bGU9IkNTUyBTdHlsZSBBdHRyaWJ1dGVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3Mtc3R5bGUtYXR0ciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN0eWxlLWF0dHIvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIENTUyBTdHlsZSBBdHRyaWJ1dGVzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhbnRlayDDh2VsaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMgZm9yIHN0YW5kYXJkaXppbmcgcmVzcG9uc2l2ZSBpbWFnZXMiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXJlc3BpbWctdXNlY2FzZXMtMjAxMzExMDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvciBTdGFuZGFyZGl6aW5nIFJlc3BvbnNpdmUgSW1hZ2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9yIFN0YW5kYXJkaXppbmcgUmVzcG9uc2l2ZSBJbWFnZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMTEtMDcgLSA8YSB0aXRsZT0iVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9yIFN0YW5kYXJkaXppbmcgUmVzcG9uc2l2ZSBJbWFnZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Jlc3BpbWctdXNlY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly91c2VjYXNlcy5yZXNwb25zaXZlaW1hZ2VzLm9yZyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3IgU3RhbmRhcmRpemluZyBSZXNwb25zaXZlIEltYWdlcyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdGhldyBNYXJxdWlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW9hdiBXZWlzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIE5ld3RvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhwcm9jIHYyLjAgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1dELXhwcm9jLXYyLXJlcS0yMDEzMTEwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFByb2MgVjIuMCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUHJvYyBWMi4wIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb2Nlc3NpbmcgTW9kZWwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTExLTA1IC0gPGEgdGl0bGU9IlhQcm9jIFYyLjAgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cHJvYy12Mi1yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4IE1pxYJvd3NraQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIEZ1bGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vcm1hbiBXYWxzaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRvdWNoIGV2ZW50cyBleHRlbnNpb25zIiBkYXRhLXRhZz0iZG9tIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXRvdWNoLWV2ZW50cy1leHRlbnNpb25zLTIwMTMxMDMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUb3VjaCBFdmVudHMgRXh0ZW5zaW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRvdWNoIEV2ZW50cyBFeHRlbnNpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgRXZlbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0xMC0zMSAtIDxhIHRpdGxlPSJUb3VjaCBFdmVudHMgRXh0ZW5zaW9ucyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdG91Y2gtZXZlbnRzLWV4dGVuc2lvbnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy93ZWJldmVudHMvcmF3LWZpbGUvZGVmYXVsdC90b3VjaGV2ZW50cy5odG1sIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRvdWNoIEV2ZW50cyBFeHRlbnNpb25zIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvdWcgU2NoZXBlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW5nd2hhbiBNb29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBCcnViZWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icGFnZSB2aXNpYmlsaXR5IChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJwZXJmb3JtYW5jZSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1wYWdlLXZpc2liaWxpdHktMjAxMzEwMjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBhZ2UgVmlzaWJpbGl0eSAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UGFnZSBWaXNpYmlsaXR5IChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMTAtMjkgLSA8YSB0aXRsZT0iUGFnZSBWaXNpYmlsaXR5IChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3BhZ2UtdmlzaWJpbGl0eSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphdGluZGVyIE1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BcnZpbmQgSmFpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBlcmZvcm1hbmNlIj5QZXJmb3JtYW5jZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbnRlcm5hdGlvbmFsaXphdGlvbiB0YWcgc2V0IChpdHMpIHZlcnNpb24gMi4wIiBkYXRhLXRhZz0iZGF0YSBodG1sIGkxOG4iIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1pdHMyMC0yMDEzMTAyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSBWZXJzaW9uIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkludGVybmF0aW9uYWxpemF0aW9uICBUYWcgIFNldCAgKElUUykgIFZlcnNpb24mbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk11bHRpbGluZ3VhbFdlYi1MVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMTAtMjkgLSA8YSB0aXRsZT0iSW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSBWZXJzaW9uIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaXRzMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBGaWxpcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYXVuIE1jQ2FuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBMZXdpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzdGlhbiBMaWVza2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BcmxlIExvbW1lbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppcmthIEtvc2VrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmVsaXggU2FzYWtpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXZlcyBTYXZvdXJlbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNlbGVjdG9ycyBhcGkgbGV2ZWwgMiIgZGF0YS10YWc9ImNzcyB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS1zZWxlY3RvcnMtYXBpMi0yMDEzMTAxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2VsZWN0b3JzIEFQSSBMZXZlbCAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VsZWN0b3JzICBBUEkgIExldmVsJm5ic3A7MjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTEwLTE3IC0gPGEgdGl0bGU9IlNlbGVjdG9ycyBBUEkgTGV2ZWwgMiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2VsZWN0b3JzLWFwaTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kZXYudzMub3JnLzIwMDYvd2ViYXBpL3NlbGVjdG9ycy1hcGkyLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBTZWxlY3RvcnMgQVBJIExldmVsIDIiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGFjaGxhbiBIdW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idG91Y2ggZXZlbnRzIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtdG91Y2gtZXZlbnRzLTIwMTMxMDEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUb3VjaCBFdmVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Ub3VjaCBFdmVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBFdmVudHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTEwLTEwIC0gPGEgdGl0bGU9IlRvdWNoIEV2ZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdG91Y2gtZXZlbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby90b3VjaC1ldmVudHMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIFRvdWNoIEV2ZW50cyI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb3VnIFNjaGVwZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2FuZ3doYW4gTW9vbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgQnJ1YmVjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFydGh1ciBCYXJzdG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idXNlIGNhc2VzICZhbXA7IGV4cGxvcmF0b3J5IGFwcHJvYWNoZXMgZm9yIHJ1YnkgbWFya3VwIiBkYXRhLXRhZz0iaHRtbCBpMThuIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXJ1YnktdXNlLWNhc2VzLTIwMTMxMDA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVc2UgQ2FzZXMgJmFtcDsgRXhwbG9yYXRvcnkgQXBwcm9hY2hlcyBmb3IgUnVieSBNYXJrdXAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2UgQ2FzZXMgJiBFeHBsb3JhdG9yeSBBcHByb2FjaGVzIGZvciBSdWJ5IE1hcmt1cDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTEwLTA4IC0gPGEgdGl0bGU9IlVzZSBDYXNlcyAmYW1wOyBFeHBsb3JhdG9yeSBBcHByb2FjaGVzIGZvciBSdWJ5IE1hcmt1cCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcnVieS11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL0ludGVybmF0aW9uYWwvZG9jcy9ydWJ5LyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBVc2UgQ2FzZXMgJmFtcDsgRXhwbG9yYXRvcnkgQXBwcm9hY2hlcyBmb3IgUnVieSBNYXJrdXAiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBJc2hpZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgY3J5cHRvZ3JhcGh5IGFwaSB1c2UgY2FzZXMiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS13ZWJjcnlwdG8tdXNlY2FzZXMtMjAxMzA5MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBDcnlwdG9ncmFwaHkgQVBJIFVzZSBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBDcnlwdG9ncmFwaHkgQVBJIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIENyeXB0b2dyYXBoeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDktMTAgLSA8YSB0aXRsZT0iV2ViIENyeXB0b2dyYXBoeSBBUEkgVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJjcnlwdG8tdXNlY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIC0gPGEgaHJlZj0iaHR0cHM6Ly9kdmNzLnczLm9yZy9oZy93ZWJjcnlwdG8tdXNlY2FzZXMvcmF3LWZpbGUvdGlwL092ZXJ2aWV3Lmh0bWwiIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgV2ViIENyeXB0b2dyYXBoeSBBUEkgVXNlIENhc2VzIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFydW4gUmFuZ2FuYXRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJndWlkYW5jZSBvbiBhcHBseWluZyB3Y2FnIDIuMCB0byBub24td2ViIGluZm9ybWF0aW9uIGFuZCBjb21tdW5pY2F0aW9ucyB0ZWNobm9sb2dpZXMgKHdjYWcyaWN0KSIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtd2NhZzJpY3QtMjAxMzA5MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEd1aWRhbmNlIG9uIEFwcGx5aW5nIFdDQUcgMi4wIHRvIE5vbi1XZWIgSW5mb3JtYXRpb24gYW5kIENvbW11bmljYXRpb25zIFRlY2hub2xvZ2llcyAoV0NBRzJJQ1QpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+R3VpZGFuY2Ugb24gQXBwbHlpbmcgV0NBRyAyLjAgdG8gTm9uLVdlYiBJbmZvcm1hdGlvbiBhbmQgQ29tbXVuaWNhdGlvbnMgVGVjaG5vbG9naWVzIChXQ0FHMklDVCk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDktMDUgLSA8YSB0aXRsZT0iR3VpZGFuY2Ugb24gQXBwbHlpbmcgV0NBRyAyLjAgdG8gTm9uLVdlYiBJbmZvcm1hdGlvbiBhbmQgQ29tbXVuaWNhdGlvbnMgVGVjaG5vbG9naWVzIChXQ0FHMklDVCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3djYWcyaWN0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9XQUkvR0wvd2NhZzJpY3QvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIEd1aWRhbmNlIG9uIEFwcGx5aW5nIFdDQUcgMi4wIHRvIE5vbi1XZWIgSW5mb3JtYXRpb24gYW5kIENvbW11bmljYXRpb25zIFRlY2hub2xvZ2llcyAoV0NBRzJJQ1QpIj5FZGl0b3IncyBEcmFmdDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQ29vcGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGV0ZXIgS29ybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZGkgU25vdy1XZWF2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBWYW5kZXJoZWlkZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2UgY2FzZXMgYW5kIGxlc3NvbnMgZm9yIHRoZSBkYXRhIGN1YmUgdm9jYWJ1bGFyeSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtdm9jYWItZGF0YS1jdWJlLXVzZS1jYXNlcy0yMDEzMDgwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNlIENhc2VzIGFuZCBMZXNzb25zIGZvciB0aGUgRGF0YSBDdWJlIFZvY2FidWxhcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2UgQ2FzZXMgYW5kIExlc3NvbnMgZm9yIHRoZSBEYXRhIEN1YmUgVm9jYWJ1bGFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+R292ZXJubWVudCBMaW5rZWQgRGF0YSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDgtMDEgLSA8YSB0aXRsZT0iVXNlIENhc2VzIGFuZCBMZXNzb25zIGZvciB0aGUgRGF0YSBDdWJlIFZvY2FidWxhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvY2FiLWRhdGEtY3ViZS11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW5lZGlrdCBLYWVtcGdlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgQ3lnYW5pYWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZWdpc3RlcmVkIG9yZ2FuaXphdGlvbiB2b2NhYnVsYXJ5IiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS12b2NhYi1yZWdvcmctMjAxMzA4MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlZ2lzdGVyZWQgT3JnYW5pemF0aW9uIFZvY2FidWxhcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZWdpc3RlcmVkIE9yZ2FuaXphdGlvbiBWb2NhYnVsYXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Hb3Zlcm5tZW50IExpbmtlZCBEYXRhIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wOC0wMSAtIDxhIHRpdGxlPSJSZWdpc3RlcmVkIE9yZ2FuaXphdGlvbiBWb2NhYnVsYXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2NhYi1yZWdvcmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsIEFyY2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmlvcyBNZWltYXJpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFnaXMgUGFwYW50b25pb3UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhc3NldCBkZXNjcmlwdGlvbiBtZXRhZGF0YSBzY2hlbWEgKGFkbXMpIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS12b2NhYi1hZG1zLTIwMTMwODAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBc3NldCBEZXNjcmlwdGlvbiBNZXRhZGF0YSBTY2hlbWEgKEFETVMpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QXNzZXQgRGVzY3JpcHRpb24gTWV0YWRhdGEgU2NoZW1hIChBRE1TKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+R292ZXJubWVudCBMaW5rZWQgRGF0YSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDgtMDEgLSA8YSB0aXRsZT0iQXNzZXQgRGVzY3JpcHRpb24gTWV0YWRhdGEgU2NoZW1hIChBRE1TKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9jYWItYWRtcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWwgQXJjaGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R29mcmFuIFNodWthaXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlbW1hOiBleHRlbnNpYmxlIG11bHRpbW9kYWwgYW5ub3RhdGlvbiBtYXJrdXAgbGFuZ3VhZ2UgdmVyc2lvbiAxLjEiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtZW1tYTExLTIwMTMwNjI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFTU1BOiBFeHRlbnNpYmxlIE11bHRpTW9kYWwgQW5ub3RhdGlvbiBtYXJrdXAgbGFuZ3VhZ2UgVmVyc2lvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FTU1BOiAgRXh0ZW5zaWJsZSAgTXVsdGlNb2RhbCAgQW5ub3RhdGlvbiAgbWFya3VwICBsYW5ndWFnZSAgVmVyc2lvbiZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDYtMjcgLSA8YSB0aXRsZT0iRU1NQTogRXh0ZW5zaWJsZSBNdWx0aU1vZGFsIEFubm90YXRpb24gbWFya3VwIGxhbmd1YWdlIFZlcnNpb24gMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbW1hMTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEpvaG5zdG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsaW5rZWQgZGF0YSBnbG9zc2FyeSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtbGQtZ2xvc3NhcnktMjAxMzA2MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIExpbmtlZCBEYXRhIEdsb3NzYXJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TGlua2VkIERhdGEgR2xvc3Nhcnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkdvdmVybm1lbnQgTGlua2VkIERhdGEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA2LTI3IC0gPGEgdGl0bGU9IkxpbmtlZCBEYXRhIEdsb3NzYXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sZC1nbG9zc2FyeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcm5hZGV0dGUgSHlsYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2hpc2xhaW4gQXVndXN0ZSBBdGVtZXppbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFBlbmRsZXRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJpcGxhdiBTcml2YXN0YXZhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZXN0IGNhc2VzIGZvciBjYW5vbmljYWwgeG1sIDIuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIGVkIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWwtYzE0bjItdGVzdGNhc2VzLTIwMTMwNjE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUZXN0IGNhc2VzIGZvciBDYW5vbmljYWwgWE1MIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRlc3QgIGNhc2VzICBmb3IgIENhbm9uaWNhbCAgWE1MJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA2LTE4IC0gPGEgdGl0bGU9IlRlc3QgY2FzZXMgZm9yIENhbm9uaWNhbCBYTUwgMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtYzE0bjItdGVzdGNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy8yMDA4L3htbHNlYy9EcmFmdHMvYzE0bi0yMC90ZXN0LWNhc2VzLyIgdGl0bGU9IkxhdGVzdCBlZGl0b3IncyBkcmFmdCBvZiBUZXN0IGNhc2VzIGZvciBDYW5vbmljYWwgWE1MIDIuMCI+RWRpdG9yJ3MgRHJhZnQ8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmF0aWsgRGF0dGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2lkZ2V0IHVwZGF0ZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS13aWRnZXRzLXVwZGF0ZXMtMjAxMzA2MDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdpZGdldCBVcGRhdGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2lkZ2V0IFVwZGF0ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPihoaXN0b3JpY2FsKSBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wNi0wNiAtIDxhIHRpdGxlPSJXaWRnZXQgVXBkYXRlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2lkZ2V0cy11cGRhdGVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFRpYmJldHQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVybHMgaW4gZGF0YSBwcmltZXIiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtdXJscy1pbi1kYXRhLTIwMTMwNjA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVUkxzIGluIERhdGEgUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VVJMcyBpbiBEYXRhIFByaW1lcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGVjaG5pY2FsIEFyY2hpdGVjdHVyZSBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA2LTA0IC0gPGEgdGl0bGU9IlVSTHMgaW4gRGF0YSBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3VybHMtaW4tZGF0YSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplbmkgVGVubmlzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWw1OiBlZGl0aW9uIGZvciB3ZWIgYXV0aG9ycyIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtaHRtbDUtYXV0aG9yLTIwMTMwNTI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MNTogRWRpdGlvbiBmb3IgV2ViIEF1dGhvcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MNTogRWRpdGlvbiBmb3IgV2ViIEF1dGhvcnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDUtMjggLSA8YSB0aXRsZT0iSFRNTDU6IEVkaXRpb24gZm9yIFdlYiBBdXRob3JzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sNS1hdXRob3IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JpbiBCZXJqb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UcmF2aXMgTGVpdGhlYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaWx2aWEgUGZlaWZmZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmlrYSBEb3lsZSBOYXZhcmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGVyZXNhIE8mIzAzOTtDb25ub3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtYWluIGVsZW1lbnQgLSBhbiBodG1sNSBleHRlbnNpb24gc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtaHRtbC1tYWluLWVsZW1lbnQtMjAxMzA1MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIG1haW4gZWxlbWVudCAtIGFuIEhUTUw1IGV4dGVuc2lvbiBzcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+bWFpbiBlbGVtZW50IC0gYW4gSFRNTDUgZXh0ZW5zaW9uIHNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDUtMjggLSA8YSB0aXRsZT0ibWFpbiBlbGVtZW50IC0gYW4gSFRNTDUgZXh0ZW5zaW9uIHNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtbWFpbi1lbGVtZW50Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgRmF1bGtuZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sOiB0aGUgbWFya3VwIGxhbmd1YWdlIChhbiBodG1sIGxhbmd1YWdlIHJlZmVyZW5jZSkiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLWh0bWwtbWFya3VwLTIwMTMwNTI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MOiBUaGUgTWFya3VwIExhbmd1YWdlIChhbiBIVE1MIGxhbmd1YWdlIHJlZmVyZW5jZSkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MOiBUaGUgTWFya3VwIExhbmd1YWdlIChhbiBIVE1MIGxhbmd1YWdlIHJlZmVyZW5jZSk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkhUTUwgTWVkaWEgRXh0ZW5zaW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDUtMjggLSA8YSB0aXRsZT0iSFRNTDogVGhlIE1hcmt1cCBMYW5ndWFnZSAoYW4gSFRNTCBsYW5ndWFnZSByZWZlcmVuY2UpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLW1hcmt1cCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWxbdG1dIFNtaXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgaW50ZW50cyIgZGF0YS10YWc9IndlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXdlYi1pbnRlbnRzLTIwMTMwNTIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgSW50ZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBJbnRlbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDUtMjMgLSA8YSB0aXRsZT0iV2ViIEludGVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYi1pbnRlbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZyBCaWxsb2NrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgSGF3a2lucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgS2lubGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJqYXZhIGxhbmd1YWdlIGJpbmRpbmcgZm9yIHdlYiBpZGwiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtV2ViSURMLUphdmEtMjAxMzA1MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEphdmEgbGFuZ3VhZ2UgYmluZGluZyBmb3IgV2ViIElETCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkphdmEgbGFuZ3VhZ2UgYmluZGluZyBmb3IgV2ViIElETDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA1LTE0IC0gPGEgdGl0bGU9IkphdmEgbGFuZ3VhZ2UgYmluZGluZyBmb3IgV2ViIElETCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV2ViSURMLUphdmEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYW1lcm9uIE1jQ29ybWFjawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHVibGlzaGluZyBhbmQgbGlua2luZyBvbiB0aGUgd2ViIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXB1Ymxpc2hpbmctbGlua2luZy0yMDEzMDQzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHVibGlzaGluZyBhbmQgTGlua2luZyBvbiB0aGUgV2ViIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHVibGlzaGluZyBhbmQgTGlua2luZyBvbiB0aGUgV2ViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UZWNobmljYWwgQXJjaGl0ZWN0dXJlIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMzAgLSA8YSB0aXRsZT0iUHVibGlzaGluZyBhbmQgTGlua2luZyBvbiB0aGUgV2ViIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wdWJsaXNoaW5nLWxpbmtpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bc2hvayBNYWxob3RyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxhcnJ5IE1hc2ludGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVuaSBUZW5uaXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBBcHBlbHF1aXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm92LW86IHRoZSBwcm92IG9udG9sb2d5IiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXByb3Ytby0yMDEzMDQzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUFJPVi1POiBUaGUgUFJPViBPbnRvbG9neSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBST1YtTzogVGhlIFBST1YgT250b2xvZ3k8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3ZlbmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTMwIC0gPGEgdGl0bGU9IlBST1YtTzogVGhlIFBST1YgT250b2xvZ3kgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb3YtbyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRpbW90aHkgTGVibwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhdHlhIFNhaG9vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVib3JhaCBNY0d1aW5uZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZHVibGluIGNvcmUgdG8gcHJvdiBtYXBwaW5nIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXByb3YtZGMtMjAxMzA0MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIER1YmxpbiBDb3JlIHRvIFBST1YgTWFwcGluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkR1YmxpbiBDb3JlIHRvIFBST1YgTWFwcGluZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdmVuYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMzAgLSA8YSB0aXRsZT0iRHVibGluIENvcmUgdG8gUFJPViBNYXBwaW5nIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcm92LWRjIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEdhcmlqbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkthaSBFY2tlcnQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByb3Ytb3ZlcnZpZXciIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtcHJvdi1vdmVydmlldy0yMDEzMDQzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUFJPVi1PdmVydmlldyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBST1YtT3ZlcnZpZXc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3ZlbmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTMwIC0gPGEgdGl0bGU9IlBST1YtT3ZlcnZpZXcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb3Ytb3ZlcnZpZXciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIEdyb3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+THVjIE1vcmVhdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvdi1kaWN0aW9uYXJ5OiBtb2RlbGluZyBwcm92ZW5hbmNlIGZvciBkaWN0aW9uYXJ5IGRhdGEgc3RydWN0dXJlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS1wcm92LWRpY3Rpb25hcnktMjAxMzA0MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBST1YtRGljdGlvbmFyeTogTW9kZWxpbmcgUHJvdmVuYW5jZSBmb3IgRGljdGlvbmFyeSBEYXRhIFN0cnVjdHVyZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QUk9WLURpY3Rpb25hcnk6IE1vZGVsaW5nIFByb3ZlbmFuY2UgZm9yIERpY3Rpb25hcnkgRGF0YSBTdHJ1Y3R1cmVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Qcm92ZW5hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wNC0zMCAtIDxhIHRpdGxlPSJQUk9WLURpY3Rpb25hcnk6IE1vZGVsaW5nIFByb3ZlbmFuY2UgZm9yIERpY3Rpb25hcnkgRGF0YSBTdHJ1Y3R1cmVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcm92LWRpY3Rpb25hcnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub20gRGUgTmllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbSBDb3BwZW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm92IG1vZGVsIHByaW1lciIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS1wcm92LXByaW1lci0yMDEzMDQzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUFJPViBNb2RlbCBQcmltZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QUk9WIE1vZGVsIFByaW1lcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdmVuYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMzAgLSA8YSB0aXRsZT0iUFJPViBNb2RlbCBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb3YtcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WW9sYW5kYSBHaWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaW1vbiBNaWxlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvdi1kbTogdGhlIHByb3YgZGF0YSBtb2RlbCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1wcm92LWRtLTIwMTMwNDMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQUk9WLURNOiBUaGUgUFJPViBEYXRhIE1vZGVsIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UFJPVi1ETTogVGhlIFBST1YgRGF0YSBNb2RlbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdmVuYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMzAgLSA8YSB0aXRsZT0iUFJPVi1ETTogVGhlIFBST1YgRGF0YSBNb2RlbCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHJvdi1kbSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkx1YyBNb3JlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYW9sbyBNaXNzaWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VtYW50aWNzIG9mIHRoZSBwcm92IGRhdGEgbW9kZWwiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtcHJvdi1zZW0tMjAxMzA0MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNlbWFudGljcyBvZiB0aGUgUFJPViBEYXRhIE1vZGVsIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VtYW50aWNzIG9mIHRoZSBQUk9WIERhdGEgTW9kZWw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3ZlbmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTMwIC0gPGEgdGl0bGU9IlNlbWFudGljcyBvZiB0aGUgUFJPViBEYXRhIE1vZGVsIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcm92LXNlbSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIENoZW5leQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvdiBpbXBsZW1lbnRhdGlvbiByZXBvcnQiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtcHJvdi1pbXBsZW1lbnRhdGlvbnMtMjAxMzA0MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBST1YgSW1wbGVtZW50YXRpb24gUmVwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UFJPViBJbXBsZW1lbnRhdGlvbiBSZXBvcnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3ZlbmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTMwIC0gPGEgdGl0bGU9IlBST1YgSW1wbGVtZW50YXRpb24gUmVwb3J0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcm92LWltcGxlbWVudGF0aW9ucyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRydW5nIERvbmcgSHV5bmgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIEdyb3RoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RlcGhhbiBaZWRuaWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByb3YteG1sOiB0aGUgcHJvdiB4bWwgc2NoZW1hIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXByb3YteG1sLTIwMTMwNDMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQUk9WLVhNTDogVGhlIFBST1YgWE1MIFNjaGVtYSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBST1YtWE1MOiBUaGUgUFJPViBYTUwgU2NoZW1hPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Qcm92ZW5hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wNC0zMCAtIDxhIHRpdGxlPSJQUk9WLVhNTDogVGhlIFBST1YgWE1MIFNjaGVtYSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHJvdi14bWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ib29rIEh1YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkN1cnQgVGlsbWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RlcGhhbiBaZWRuaWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImxpbmtpbmcgYWNyb3NzIHByb3ZlbmFuY2UgYnVuZGxlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS1wcm92LWxpbmtzLTIwMTMwNDMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBMaW5raW5nIEFjcm9zcyBQcm92ZW5hbmNlIEJ1bmRsZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5MaW5raW5nIEFjcm9zcyBQcm92ZW5hbmNlIEJ1bmRsZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3ZlbmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTMwIC0gPGEgdGl0bGU9IkxpbmtpbmcgQWNyb3NzIFByb3ZlbmFuY2UgQnVuZGxlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHJvdi1saW5rcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkx1YyBNb3JlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaW1vdGh5IExlYm8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByb3YtYXE6IHByb3ZlbmFuY2UgYWNjZXNzIGFuZCBxdWVyeSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS1wcm92LWFxLTIwMTMwNDMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQUk9WLUFROiBQcm92ZW5hbmNlIEFjY2VzcyBhbmQgUXVlcnkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QUk9WLUFROiBQcm92ZW5hbmNlIEFjY2VzcyBhbmQgUXVlcnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3ZlbmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTMwIC0gPGEgdGl0bGU9IlBST1YtQVE6IFByb3ZlbmFuY2UgQWNjZXNzIGFuZCBRdWVyeSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHJvdi1hcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyYWhhbSBLbHluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgR3JvdGgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByb3YtbjogdGhlIHByb3ZlbmFuY2Ugbm90YXRpb24iIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtcHJvdi1uLTIwMTMwNDMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQUk9WLU46IFRoZSBQcm92ZW5hbmNlIE5vdGF0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UFJPVi1OOiBUaGUgUHJvdmVuYW5jZSBOb3RhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdmVuYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMzAgLSA8YSB0aXRsZT0iUFJPVi1OOiBUaGUgUHJvdmVuYW5jZSBOb3RhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcHJvdi1uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+THVjIE1vcmVhdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhb2xvIE1pc3NpZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb25zdHJhaW50cyBvZiB0aGUgcHJvdiBkYXRhIG1vZGVsIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXByb3YtY29uc3RyYWludHMtMjAxMzA0MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbnN0cmFpbnRzIG9mIHRoZSBQUk9WIERhdGEgTW9kZWwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db25zdHJhaW50cyBvZiB0aGUgUFJPViBEYXRhIE1vZGVsPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Qcm92ZW5hbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wNC0zMCAtIDxhIHRpdGxlPSJDb25zdHJhaW50cyBvZiB0aGUgUFJPViBEYXRhIE1vZGVsIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcm92LWNvbnN0cmFpbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQ2hlbmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGFvbG8gTWlzc2llcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkx1YyBNb3JlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgc2VjdXJpdHkgZ2VuZXJpYyBoeWJyaWQgY2lwaGVycyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWxzZWMtZ2VuZXJpYy1oeWJyaWQtMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTZWN1cml0eSBHZW5lcmljIEh5YnJpZCBDaXBoZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFNlY3VyaXR5IEdlbmVyaWMgSHlicmlkIENpcGhlcnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMTEgLSA8YSB0aXRsZT0iWE1MIFNlY3VyaXR5IEdlbmVyaWMgSHlicmlkIENpcGhlcnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbHNlYy1nZW5lcmljLWh5YnJpZCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hZ251cyBOeXN0csO2bQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgZW5jcnlwdGlvbiBzeW50YXggYW5kIHByb2Nlc3NpbmcgdmVyc2lvbiAxLjEiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy14bWxlbmMtY29yZTEtMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBFbmNyeXB0aW9uIFN5bnRheCBhbmQgUHJvY2Vzc2luZyBWZXJzaW9uIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCAgRW5jcnlwdGlvbiAgU3ludGF4ICBhbmQgIFByb2Nlc3NpbmcgIFZlcnNpb24mbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMTEgLSA8YSB0aXRsZT0iWE1MIEVuY3J5cHRpb24gU3ludGF4IGFuZCBQcm9jZXNzaW5nIFZlcnNpb24gMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxlbmMtY29yZTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb25hbGQgRWFzdGxha2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3NlcGggUmVhZ2xlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRob21hcyBSb2Vzc2xlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHNlY3VyaXR5IDEuMSByZXF1aXJlbWVudHMgYW5kIGRlc2lnbiBjb25zaWRlcmF0aW9ucyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWxzZWMtcmVxcy0yMDEzMDQxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFNlY3VyaXR5IDEuMSBSZXF1aXJlbWVudHMgYW5kIERlc2lnbiBDb25zaWRlcmF0aW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBTZWN1cml0eSAxLjEgUmVxdWlyZW1lbnRzIGFuZCBEZXNpZ24gQ29uc2lkZXJhdGlvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMTEgLSA8YSB0aXRsZT0iWE1MIFNlY3VyaXR5IDEuMSBSZXF1aXJlbWVudHMgYW5kIERlc2lnbiBDb25zaWRlcmF0aW9ucyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sc2VjLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhvbWFzIFJvZXNzbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZnVuY3Rpb25hbCBleHBsYW5hdGlvbiBvZiBjaGFuZ2VzIGluIHhtbCBlbmNyeXB0aW9uIDEuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWxlbmMtY29yZTEtZXhwbGFpbi0yMDEzMDQxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRnVuY3Rpb25hbCBFeHBsYW5hdGlvbiBvZiBDaGFuZ2VzIGluIFhNTCBFbmNyeXB0aW9uIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkZ1bmN0aW9uYWwgIEV4cGxhbmF0aW9uICBvZiAgQ2hhbmdlcyAgaW4gIFhNTCAgRW5jcnlwdGlvbiZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wNC0xMSAtIDxhIHRpdGxlPSJGdW5jdGlvbmFsIEV4cGxhbmF0aW9uIG9mIENoYW5nZXMgaW4gWE1MIEVuY3J5cHRpb24gMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxlbmMtY29yZTEtZXhwbGFpbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHNpZ25hdHVyZSBiZXN0IHByYWN0aWNlcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWxkc2lnLWJlc3RwcmFjdGljZXMtMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTaWduYXR1cmUgQmVzdCBQcmFjdGljZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgU2lnbmF0dXJlIEJlc3QgUHJhY3RpY2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTExIC0gPGEgdGl0bGU9IlhNTCBTaWduYXR1cmUgQmVzdCBQcmFjdGljZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbGRzaWctYmVzdHByYWN0aWNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmF0aWsgRGF0dGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHNlY3VyaXR5IDIuMCByZXF1aXJlbWVudHMgYW5kIGRlc2lnbiBjb25zaWRlcmF0aW9ucyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWxzZWMtcmVxczItMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTZWN1cml0eSAyLjAgUmVxdWlyZW1lbnRzIGFuZCBEZXNpZ24gQ29uc2lkZXJhdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgU2VjdXJpdHkgMi4wIFJlcXVpcmVtZW50cyBhbmQgRGVzaWduIENvbnNpZGVyYXRpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTExIC0gPGEgdGl0bGU9IlhNTCBTZWN1cml0eSAyLjAgUmVxdWlyZW1lbnRzIGFuZCBEZXNpZ24gQ29uc2lkZXJhdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbHNlYy1yZXFzMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmF0aWsgRGF0dGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjYW5vbmljYWwgeG1sIHZlcnNpb24gMi4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUteG1sLWMxNG4yLTIwMTMwNDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDYW5vbmljYWwgWE1MIFZlcnNpb24gMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2Fub25pY2FsICBYTUwgIFZlcnNpb24mbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMTEgLSA8YSB0aXRsZT0iQ2Fub25pY2FsIFhNTCBWZXJzaW9uIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLWMxNG4yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBCb3llcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdsZW5uIE1hcmN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UHJhdGlrIERhdHRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgc2lnbmF0dXJlIHByb3BlcnRpZXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy14bWxkc2lnLXByb3BlcnRpZXMtMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTaWduYXR1cmUgUHJvcGVydGllcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBTaWduYXR1cmUgUHJvcGVydGllczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wNC0xMSAtIDxhIHRpdGxlPSJYTUwgU2lnbmF0dXJlIFByb3BlcnRpZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbGRzaWctcHJvcGVydGllcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgc2lnbmF0dXJlIHN5bnRheCBhbmQgcHJvY2Vzc2luZyB2ZXJzaW9uIDEuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXhtbGRzaWctY29yZTEtMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTaWduYXR1cmUgU3ludGF4IGFuZCBQcm9jZXNzaW5nIFZlcnNpb24gMS4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MICBTaWduYXR1cmUgIFN5bnRheCAgYW5kICBQcm9jZXNzaW5nICBWZXJzaW9uJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTExIC0gPGEgdGl0bGU9IlhNTCBTaWduYXR1cmUgU3ludGF4IGFuZCBQcm9jZXNzaW5nIFZlcnNpb24gMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxkc2lnLWNvcmUxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uYWxkIEVhc3RsYWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZXBoIFJlYWdsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIFNvbG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFnbnVzIE55c3Ryw7ZtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhvbWFzIFJvZXNzbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2VsdmluIFlpdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgc2VjdXJpdHkgcmVsYXggbmcgc2NoZW1hcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWxzZWMtcm5nc2NoZW1hLTIwMTMwNDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgU2VjdXJpdHkgUkVMQVggTkcgU2NoZW1hcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBTZWN1cml0eSBSRUxBWCBORyBTY2hlbWFzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTExIC0gPGEgdGl0bGU9IlhNTCBTZWN1cml0eSBSRUxBWCBORyBTY2hlbWFzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzZWMtcm5nc2NoZW1hIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TXVyYXRhIE1ha290bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgZW5jcnlwdGlvbiAxLjEgY2lwaGVycmVmZXJlbmNlIHByb2Nlc3NpbmcgdXNpbmcgMi4wIHRyYW5zZm9ybXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUteG1sZW5jLXRyYW5zZm9ybTIwLTIwMTMwNDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgRW5jcnlwdGlvbiAxLjEgQ2lwaGVyUmVmZXJlbmNlIFByb2Nlc3NpbmcgdXNpbmcgMi4wIFRyYW5zZm9ybXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgRW5jcnlwdGlvbiAxLjEgQ2lwaGVyUmVmZXJlbmNlIFByb2Nlc3NpbmcgdXNpbmcgMi4wIFRyYW5zZm9ybXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDQtMTEgLSA8YSB0aXRsZT0iWE1MIEVuY3J5cHRpb24gMS4xIENpcGhlclJlZmVyZW5jZSBQcm9jZXNzaW5nIHVzaW5nIDIuMCBUcmFuc2Zvcm1zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxlbmMtdHJhbnNmb3JtMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzZWN1cml0eSBhbGdvcml0aG0gY3Jvc3MtcmVmZXJlbmNlIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXhtbHNlYy1hbGdvcml0aG1zLTIwMTMwNDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgU2VjdXJpdHkgQWxnb3JpdGhtIENyb3NzLVJlZmVyZW5jZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBTZWN1cml0eSBBbGdvcml0aG0gQ3Jvc3MtUmVmZXJlbmNlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTExIC0gPGEgdGl0bGU9IlhNTCBTZWN1cml0eSBBbGdvcml0aG0gQ3Jvc3MtUmVmZXJlbmNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzZWMtYWxnb3JpdGhtcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaG9tYXMgUm9lc3NsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZWx2aW4gWWl1CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzaWduYXR1cmUgc3RyZWFtaW5nIHByb2ZpbGUgb2YgeHBhdGggMS4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXhtbGRzaWcteHBhdGgtMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTaWduYXR1cmUgU3RyZWFtaW5nIFByb2ZpbGUgb2YgWFBhdGggMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MICBTaWduYXR1cmUgIFN0cmVhbWluZyAgUHJvZmlsZSAgb2YgIFhQYXRoJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTExIC0gPGEgdGl0bGU9IlhNTCBTaWduYXR1cmUgU3RyZWFtaW5nIFByb2ZpbGUgb2YgWFBhdGggMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxkc2lnLXhwYXRoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UHJhdGlrIERhdHRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1laWtvIEplbnNlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImZ1bmN0aW9uYWwgZXhwbGFuYXRpb24gb2YgY2hhbmdlcyBpbiB4bWwgc2lnbmF0dXJlIDEuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS14bWxkc2lnLWNvcmUxLWV4cGxhaW4tMjAxMzA0MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEZ1bmN0aW9uYWwgRXhwbGFuYXRpb24gb2YgQ2hhbmdlcyBpbiBYTUwgU2lnbmF0dXJlIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkZ1bmN0aW9uYWwgIEV4cGxhbmF0aW9uICBvZiAgQ2hhbmdlcyAgaW4gIFhNTCAgU2lnbmF0dXJlJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTA0LTExIC0gPGEgdGl0bGU9IkZ1bmN0aW9uYWwgRXhwbGFuYXRpb24gb2YgQ2hhbmdlcyBpbiBYTUwgU2lnbmF0dXJlIDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sZHNpZy1jb3JlMS1leHBsYWluIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icm9sZSBhdHRyaWJ1dGUgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXJvbGUtYXR0cmlidXRlLTIwMTMwMzI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSb2xlIEF0dHJpYnV0ZSAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Sb2xlICBBdHRyaWJ1dGUmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29scyBhbmQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDMtMjggLSA8YSB0aXRsZT0iUm9sZSBBdHRyaWJ1dGUgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yb2xlLWF0dHJpYnV0ZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIE1jQ2Fycm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIDEuMSBncmFwaCBzdG9yZSBodHRwIHByb3RvY29sIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXNwYXJxbDExLWh0dHAtcmRmLXVwZGF0ZS0yMDEzMDMyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1BBUlFMIDEuMSBHcmFwaCBTdG9yZSBIVFRQIFByb3RvY29sIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1BBUlFMIDEuMSBHcmFwaCBTdG9yZSBIVFRQIFByb3RvY29sPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TUEFSUUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAzLTIxIC0gPGEgdGl0bGU9IlNQQVJRTCAxLjEgR3JhcGggU3RvcmUgSFRUUCBQcm90b2NvbCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3BhcnFsMTEtaHR0cC1yZGYtdXBkYXRlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hpbWV6aWUgT2didWppCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIDEuMSBzZXJ2aWNlIGRlc2NyaXB0aW9uIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXNwYXJxbDExLXNlcnZpY2UtZGVzY3JpcHRpb24tMjAxMzAzMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNQQVJRTCAxLjEgU2VydmljZSBEZXNjcmlwdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCAxLjEgU2VydmljZSBEZXNjcmlwdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMy0yMSAtIDxhIHRpdGxlPSJTUEFSUUwgMS4xIFNlcnZpY2UgRGVzY3JpcHRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NwYXJxbDExLXNlcnZpY2UtZGVzY3JpcHRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnb3J5IFdpbGxpYW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIDEuMSBvdmVydmlldyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1zcGFycWwxMS1vdmVydmlldy0yMDEzMDMyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1BBUlFMIDEuMSBPdmVydmlldyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCAxLjEgT3ZlcnZpZXc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNQQVJRTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDMtMjEgLSA8YSB0aXRsZT0iU1BBUlFMIDEuMSBPdmVydmlldyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3BhcnFsMTEtb3ZlcnZpZXciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIDEuMSB1cGRhdGUiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtc3BhcnFsMTEtdXBkYXRlLTIwMTMwMzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTUEFSUUwgMS4xIFVwZGF0ZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCAxLjEgVXBkYXRlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TUEFSUUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAzLTIxIC0gPGEgdGl0bGU9IlNQQVJRTCAxLjEgVXBkYXRlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zcGFycWwxMS11cGRhdGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsYSBHZWFyb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4YW5kcmUgUGFzc2FudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkF4ZWwgUG9sbGVyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGFycWwgcXVlcnkgcmVzdWx0cyB4bWwgZm9ybWF0IChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtcmRmLXNwYXJxbC1YTUxyZXMtMjAxMzAzMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNQQVJRTCBRdWVyeSBSZXN1bHRzIFhNTCBGb3JtYXQgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCBRdWVyeSBSZXN1bHRzIFhNTCBGb3JtYXQgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMy0yMSAtIDxhIHRpdGxlPSJTUEFSUUwgUXVlcnkgUmVzdWx0cyBYTUwgRm9ybWF0IChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZi1zcGFycWwtWE1McmVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBCZWNrZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVlbiBCcm9la3N0cmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGFycWwgMS4xIHByb3RvY29sIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXNwYXJxbDExLXByb3RvY29sLTIwMTMwMzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTUEFSUUwgMS4xIFByb3RvY29sIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1BBUlFMIDEuMSBQcm90b2NvbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMy0yMSAtIDxhIHRpdGxlPSJTUEFSUUwgMS4xIFByb3RvY29sIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zcGFycWwxMS1wcm90b2NvbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxlZSBGZWlnZW5iYXVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZ29yeSBXaWxsaWFtcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlbmRhbGwgQ2xhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlhcyBUb3JyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGFycWwgMS4xIHF1ZXJ5IGxhbmd1YWdlIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXNwYXJxbDExLXF1ZXJ5LTIwMTMwMzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTUEFSUUwgMS4xIFF1ZXJ5IExhbmd1YWdlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1BBUlFMIDEuMSBRdWVyeSBMYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMy0yMSAtIDxhIHRpdGxlPSJTUEFSUUwgMS4xIFF1ZXJ5IExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zcGFycWwxMS1xdWVyeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBIYXJyaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmR5IFNlYWJvcm5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIDEuMSBlbnRhaWxtZW50IHJlZ2ltZXMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtc3BhcnFsMTEtZW50YWlsbWVudC0yMDEzMDMyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1BBUlFMIDEuMSBFbnRhaWxtZW50IFJlZ2ltZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TUEFSUUwgMS4xIEVudGFpbG1lbnQgUmVnaW1lczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMy0yMSAtIDxhIHRpdGxlPSJTUEFSUUwgMS4xIEVudGFpbG1lbnQgUmVnaW1lcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3BhcnFsMTEtZW50YWlsbWVudCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJpcnRlIEdsaW1tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hpbWV6aWUgT2didWppCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIDEuMSBxdWVyeSByZXN1bHRzIGNzdiBhbmQgdHN2IGZvcm1hdHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtc3BhcnFsMTEtcmVzdWx0cy1jc3YtdHN2LTIwMTMwMzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTUEFSUUwgMS4xIFF1ZXJ5IFJlc3VsdHMgQ1NWIGFuZCBUU1YgRm9ybWF0cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCAxLjEgUXVlcnkgUmVzdWx0cyBDU1YgYW5kIFRTViBGb3JtYXRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TUEFSUUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAzLTIxIC0gPGEgdGl0bGU9IlNQQVJRTCAxLjEgUXVlcnkgUmVzdWx0cyBDU1YgYW5kIFRTViBGb3JtYXRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zcGFycWwxMS1yZXN1bHRzLWNzdi10c3YiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmR5IFNlYWJvcm5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIDEuMSBmZWRlcmF0ZWQgcXVlcnkiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9SRUMtc3BhcnFsMTEtZmVkZXJhdGVkLXF1ZXJ5LTIwMTMwMzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTUEFSUUwgMS4xIEZlZGVyYXRlZCBRdWVyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCAxLjEgRmVkZXJhdGVkIFF1ZXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TUEFSUUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAzLTIxIC0gPGEgdGl0bGU9IlNQQVJRTCAxLjEgRmVkZXJhdGVkIFF1ZXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zcGFycWwxMS1mZWRlcmF0ZWQtcXVlcnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIFBydWQmIzAzOTtob21tZWF1eAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNhcmxvcyBCdWlsIEFyYW5kYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNwYXJxbCAxLjEgcXVlcnkgcmVzdWx0cyBqc29uIGZvcm1hdCIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1zcGFycWwxMS1yZXN1bHRzLWpzb24tMjAxMzAzMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNQQVJRTCAxLjEgUXVlcnkgUmVzdWx0cyBKU09OIEZvcm1hdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCAxLjEgUXVlcnkgUmVzdWx0cyBKU09OIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMy0yMSAtIDxhIHRpdGxlPSJTUEFSUUwgMS4xIFF1ZXJ5IFJlc3VsdHMgSlNPTiBGb3JtYXQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NwYXJxbDExLXJlc3VsdHMtanNvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHkgU2VhYm9ybmUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNzcyBwcmludCBwcm9maWxlIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtY3NzLXByaW50LTIwMTMwMzE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgUHJpbnQgUHJvZmlsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyBQcmludCBQcm9maWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMy0xNCAtIDxhIHRpdGxlPSJDU1MgUHJpbnQgUHJvZmlsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLXByaW50Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpa2EgRXRlbWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWVsaW5kYSBHcmFudAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyaWYgZGF0YXR5cGVzIGFuZCBidWlsdC1pbnMgMS4wIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1yaWYtZHRiLTIwMTMwMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSSUYgRGF0YXR5cGVzIGFuZCBCdWlsdC1JbnMgMS4wIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SSUYgRGF0YXR5cGVzIGFuZCBCdWlsdC1JbnMgMS4wIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJ1bGUgSW50ZXJjaGFuZ2UgRm9ybWF0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMi0wNSAtIDxhIHRpdGxlPSJSSUYgRGF0YXR5cGVzIGFuZCBCdWlsdC1JbnMgMS4wIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JpZi1kdGIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BeGVsIFBvbGxlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGFyb2xkIEJvbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBLaWZlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmlmIHJkZiBhbmQgb3dsIGNvbXBhdGliaWxpdHkgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1yaWYtcmRmLW93bC0yMDEzMDIwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUklGIFJERiBhbmQgT1dMIENvbXBhdGliaWxpdHkgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJJRiBSREYgYW5kIE9XTCBDb21wYXRpYmlsaXR5IChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJ1bGUgSW50ZXJjaGFuZ2UgRm9ybWF0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMi0wNSAtIDxhIHRpdGxlPSJSSUYgUkRGIGFuZCBPV0wgQ29tcGF0aWJpbGl0eSAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yaWYtcmRmLW93bCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvcyBkZSBCcnVpam4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpc3RvcGhlciBXZWx0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJpZiBmcmFtZXdvcmsgZm9yIGxvZ2ljIGRpYWxlY3RzIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1yaWYtZmxkLTIwMTMwMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSSUYgRnJhbWV3b3JrIGZvciBMb2dpYyBEaWFsZWN0cyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UklGIEZyYW1ld29yayBmb3IgTG9naWMgRGlhbGVjdHMgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UnVsZSBJbnRlcmNoYW5nZSBGb3JtYXQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAyLTA1IC0gPGEgdGl0bGU9IlJJRiBGcmFtZXdvcmsgZm9yIExvZ2ljIERpYWxlY3RzIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JpZi1mbGQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IYXJvbGQgQm9sZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtpZmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyaWYgdGVzdCBjYXNlcyAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXJpZi10ZXN0LTIwMTMwMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSSUYgVGVzdCBDYXNlcyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UklGIFRlc3QgQ2FzZXMgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UnVsZSBJbnRlcmNoYW5nZSBGb3JtYXQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAyLTA1IC0gPGEgdGl0bGU9IlJJRiBUZXN0IENhc2VzIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JpZi10ZXN0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RlbGxhIE1pdGNoZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGVvcmEgTW9yZ2Vuc3Rlcm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZHJpYW4gUGFzY2hrZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmlmIGluIHJkZiAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXJpZi1pbi1yZGYtMjAxMzAyMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJJRiBJbiBSREYgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJJRiBJbiBSREYgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UnVsZSBJbnRlcmNoYW5nZSBGb3JtYXQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAyLTA1IC0gPGEgdGl0bGU9IlJJRiBJbiBSREYgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmlmLWluLXJkZiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbmRybyBIYXdrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkF4ZWwgUG9sbGVyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJpZiB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXJpZi11Y3ItMjAxMzAyMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJJRiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UklGIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJ1bGUgSW50ZXJjaGFuZ2UgRm9ybWF0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMi0wNSAtIDxhIHRpdGxlPSJSSUYgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmlmLXVjciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkcmlhbiBQYXNjaGtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGVvcmEgTW9yZ2Vuc3Rlcm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBIaXJ0bGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGxlbiBHaW5zYmVyZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWxhLUxhdmluaWEgUGF0cmFuamFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJhbmNpcyBNY0NhYmUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJpZiBvdmVydmlldyAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXJpZi1vdmVydmlldy0yMDEzMDIwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUklGIE92ZXJ2aWV3IChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SSUYgT3ZlcnZpZXcgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UnVsZSBJbnRlcmNoYW5nZSBGb3JtYXQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAyLTA1IC0gPGEgdGl0bGU9IlJJRiBPdmVydmlldyAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yaWYtb3ZlcnZpZXciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtpZmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGFyb2xkIEJvbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgMiBybCBpbiByaWYgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtcmlmLW93bC1ybC0yMDEzMDIwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIDIgUkwgaW4gUklGIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PV0wgMiBSTCBpbiBSSUYgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UnVsZSBJbnRlcmNoYW5nZSBGb3JtYXQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAyLTA1IC0gPGEgdGl0bGU9Ik9XTCAyIFJMIGluIFJJRiAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yaWYtb3dsLXJsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBSZXlub2xkcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJpZiBjb21iaW5hdGlvbiB3aXRoIHhtbCBkYXRhIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtcmlmLXhtbC1kYXRhLTIwMTMwMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSSUYgQ29tYmluYXRpb24gd2l0aCBYTUwgZGF0YSAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UklGIENvbWJpbmF0aW9uIHdpdGggWE1MIGRhdGEgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UnVsZSBJbnRlcmNoYW5nZSBGb3JtYXQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEzLTAyLTA1IC0gPGEgdGl0bGU9IlJJRiBDb21iaW5hdGlvbiB3aXRoIFhNTCBkYXRhIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JpZi14bWwtZGF0YSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzdGlhbiBkZSBTYWludGUgTWFyaWUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InR0bWwgc2ltcGxlIGRlbGl2ZXJ5IHByb2ZpbGUgZm9yIGNsb3NlZCBjYXB0aW9ucyAodXMpIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL05PVEUtdHRtbDEwLXNkcC11cy0yMDEzMDIwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVFRNTCBTaW1wbGUgRGVsaXZlcnkgUHJvZmlsZSBmb3IgQ2xvc2VkIENhcHRpb25zIChVUykgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UVE1MIFNpbXBsZSBEZWxpdmVyeSBQcm9maWxlIGZvciBDbG9zZWQgQ2FwdGlvbnMgKFVTKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGltZWQgVGV4dCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDItMDUgLSA8YSB0aXRsZT0iVFRNTCBTaW1wbGUgRGVsaXZlcnkgUHJvZmlsZSBmb3IgQ2xvc2VkIENhcHRpb25zIChVUykgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3R0bWwxMC1zZHAtdXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HbGVubiBBZGFtcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1vbmljYSBNYXJ0aW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZWFuIEhheWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyaWYgYmFzaWMgbG9naWMgZGlhbGVjdCAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXJpZi1ibGQtMjAxMzAyMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJJRiBCYXNpYyBMb2dpYyBEaWFsZWN0IChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SSUYgQmFzaWMgTG9naWMgRGlhbGVjdCAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SdWxlIEludGVyY2hhbmdlIEZvcm1hdCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDItMDUgLSA8YSB0aXRsZT0iUklGIEJhc2ljIExvZ2ljIERpYWxlY3QgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmlmLWJsZCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhhcm9sZCBCb2xleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgS2lmZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyaWYgcHJvZHVjdGlvbiBydWxlIGRpYWxlY3QgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvUkVDLXJpZi1wcmQtMjAxMzAyMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJJRiBQcm9kdWN0aW9uIFJ1bGUgRGlhbGVjdCAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UklGIFByb2R1Y3Rpb24gUnVsZSBEaWFsZWN0IChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJ1bGUgSW50ZXJjaGFuZ2UgRm9ybWF0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMi0wNSAtIDxhIHRpdGxlPSJSSUYgUHJvZHVjdGlvbiBSdWxlIERpYWxlY3QgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmlmLXByZCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzdGlhbiBkZSBTYWludGUgTWFyaWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HYXJ5IEhhbGxtYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRyaWFuIFBhc2Noa2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJpZiBjb3JlIGRpYWxlY3QgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEzL1JFQy1yaWYtY29yZS0yMDEzMDIwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUklGIENvcmUgRGlhbGVjdCAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UklGIENvcmUgRGlhbGVjdCAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SdWxlIEludGVyY2hhbmdlIEZvcm1hdCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTMtMDItMDUgLSA8YSB0aXRsZT0iUklGIENvcmUgRGlhbGVjdCAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yaWYtY29yZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhhcm9sZCBCb2xleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdhcnkgSGFsbG1hcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtpZmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWRyaWFuIFBhc2Noa2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BeGVsIFBvbGxlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBSZXlub2xkcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJpZiBwcmltZXIgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTMvTk9URS1yaWYtcHJpbWVyLTIwMTMwMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSSUYgUHJpbWVyIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SSUYgUHJpbWVyIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJ1bGUgSW50ZXJjaGFuZ2UgRm9ybWF0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMi0wNSAtIDxhIHRpdGxlPSJSSUYgUHJpbWVyIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JpZi1wcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MZW9yYSBNb3JnZW5zdGVybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzdG9waGVyIFdlbHR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGFyb2xkIEJvbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2FyeSBIYWxsbWFyawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGF1ZGlvIHByb2Nlc3Npbmc6IHVzZSBjYXNlcyBhbmQgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ibWVkaWEgd2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMy9OT1RFLXdlYmF1ZGlvLXVzZWNhc2VzLTIwMTMwMTI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQXVkaW8gUHJvY2Vzc2luZzogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgQXVkaW8gUHJvY2Vzc2luZzogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1ZGlvIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMy0wMS0yOSAtIDxhIHRpdGxlPSJXZWIgQXVkaW8gUHJvY2Vzc2luZzogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dlYmF1ZGlvLXVzZWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9lIEJlcmtvdml0egogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9saXZpZXIgVGhlcmVhdXgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im5hdmlnYXRpb24gdGltaW5nIiBkYXRhLXRhZz0icGVyZm9ybWFuY2Ugd2ViYXBpIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtbmF2aWdhdGlvbi10aW1pbmctMjAxMjEyMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE5hdmlnYXRpb24gVGltaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TmF2aWdhdGlvbiBUaW1pbmc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBQZXJmb3JtYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMTItMTcgLSA8YSB0aXRsZT0iTmF2aWdhdGlvbiBUaW1pbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L25hdmlnYXRpb24tdGltaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WmhpaGVuZyBXYW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGVyZm9ybWFuY2UiPlBlcmZvcm1hbmNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndvZmYgZmlsZSBmb3JtYXQgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtV09GRi0yMDEyMTIxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV09GRiBGaWxlIEZvcm1hdCAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XT0ZGICBGaWxlICBGb3JtYXQmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBGb250cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMTItMTMgLSA8YSB0aXRsZT0iV09GRiBGaWxlIEZvcm1hdCAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dPRkYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBLZXcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWwgTGVtaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpayB2YW4gQmxva2xhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im93bCAyIHdlYiBvbnRvbG9neSBsYW5ndWFnZSBtYW5jaGVzdGVyIHN5bnRheCAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS1vd2wyLW1hbmNoZXN0ZXItc3ludGF4LTIwMTIxMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgTWFuY2hlc3RlciBTeW50YXggKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBNYW5jaGVzdGVyIFN5bnRheCAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5PV0wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEyLTExIC0gPGEgdGl0bGU9Ik9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBNYW5jaGVzdGVyIFN5bnRheCAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wyLW1hbmNoZXN0ZXItc3ludGF4Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dGhldyBIb3JyaWRnZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFBhdGVsLVNjaG5laWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmRmOnBsYWlubGl0ZXJhbDogYSBkYXRhdHlwZSBmb3IgcmRmIHBsYWluIGxpdGVyYWxzIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtcmRmLXBsYWluLWxpdGVyYWwtMjAxMjEyMTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIHJkZjpQbGFpbkxpdGVyYWw6IEEgRGF0YXR5cGUgZm9yIFJERiBQbGFpbiBMaXRlcmFscyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+cmRmOlBsYWluTGl0ZXJhbDogQSBEYXRhdHlwZSBmb3IgUkRGIFBsYWluIExpdGVyYWxzIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJ1bGUgSW50ZXJjaGFuZ2UgRm9ybWF0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5PV0wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEyLTExIC0gPGEgdGl0bGU9InJkZjpQbGFpbkxpdGVyYWw6IEEgRGF0YXR5cGUgZm9yIFJERiBQbGFpbiBMaXRlcmFscyAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGYtcGxhaW4tbGl0ZXJhbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppZSBCYW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW5kcm8gSGF3a2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Cb3JpcyBNb3RpawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFBhdGVsLVNjaG5laWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkF4ZWwgUG9sbGVyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgMiB3ZWIgb250b2xvZ3kgbGFuZ3VhZ2UgeG1sIHNlcmlhbGl6YXRpb24gKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1JFQy1vd2wyLXhtbC1zZXJpYWxpemF0aW9uLTIwMTIxMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgWE1MIFNlcmlhbGl6YXRpb24gKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBYTUwgU2VyaWFsaXphdGlvbiAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5PV0wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEyLTExIC0gPGEgdGl0bGU9Ik9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBYTUwgU2VyaWFsaXphdGlvbiAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wyLXhtbC1zZXJpYWxpemF0aW9uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Qm9yaXMgTW90aWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CaWphbiBQYXJzaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBQYXRlbC1TY2huZWlkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgMiB3ZWIgb250b2xvZ3kgbGFuZ3VhZ2UgbmV3IGZlYXR1cmVzIGFuZCByYXRpb25hbGUgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1JFQy1vd2wyLW5ldy1mZWF0dXJlcy0yMDEyMTIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIE5ldyBGZWF0dXJlcyBhbmQgUmF0aW9uYWxlIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgTmV3IEZlYXR1cmVzIGFuZCBSYXRpb25hbGUgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+T1dMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0xMi0xMSAtIDxhIHRpdGxlPSJPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgTmV3IEZlYXR1cmVzIGFuZCBSYXRpb25hbGUgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsMi1uZXctZmVhdHVyZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpc3RpbmUgR29sYnJlaWNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXZhbiBXYWxsYWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgMiB3ZWIgb250b2xvZ3kgbGFuZ3VhZ2UgbWFwcGluZyB0byByZGYgZ3JhcGhzIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtb3dsMi1tYXBwaW5nLXRvLXJkZi0yMDEyMTIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIE1hcHBpbmcgdG8gUkRGIEdyYXBocyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIE1hcHBpbmcgdG8gUkRGIEdyYXBocyAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5PV0wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEyLTExIC0gPGEgdGl0bGU9Ik9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBNYXBwaW5nIHRvIFJERiBHcmFwaHMgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsMi1tYXBwaW5nLXRvLXJkZiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFBhdGVsLVNjaG5laWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJvcmlzIE1vdGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIDIgd2ViIG9udG9sb2d5IGxhbmd1YWdlIGRvY3VtZW50IG92ZXJ2aWV3IChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtb3dsMi1vdmVydmlldy0yMDEyMTIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIERvY3VtZW50IE92ZXJ2aWV3IChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgRG9jdW1lbnQgT3ZlcnZpZXcgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+T1dMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0xMi0xMSAtIDxhIHRpdGxlPSJPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgRG9jdW1lbnQgT3ZlcnZpZXcgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsMi1vdmVydmlldyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgMiB3ZWIgb250b2xvZ3kgbGFuZ3VhZ2UgcHJpbWVyIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtb3dsMi1wcmltZXItMjAxMjEyMTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBQcmltZXIgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBQcmltZXIgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+T1dMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0xMi0xMSAtIDxhIHRpdGxlPSJPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUHJpbWVyIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L293bDItcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGFzY2FsIEhpdHpsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrdXMgS3LDtnR6c2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmlqYW4gUGFyc2lhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGV0ZXIgUGF0ZWwtU2NobmVpZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2ViYXN0aWFuIFJ1ZG9scGgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im93bCAyIHdlYiBvbnRvbG9neSBsYW5ndWFnZSBkaXJlY3Qgc2VtYW50aWNzIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtb3dsMi1kaXJlY3Qtc2VtYW50aWNzLTIwMTIxMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgRGlyZWN0IFNlbWFudGljcyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIERpcmVjdCBTZW1hbnRpY3MgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+T1dMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0xMi0xMSAtIDxhIHRpdGxlPSJPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgRGlyZWN0IFNlbWFudGljcyAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wyLWRpcmVjdC1zZW1hbnRpY3MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Cb3JpcyBNb3RpawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFBhdGVsLVNjaG5laWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcm5hcmRvIEN1ZW5jYSBHcmF1CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIDIgd2ViIG9udG9sb2d5IGxhbmd1YWdlIHByb2ZpbGVzIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtb3dsMi1wcm9maWxlcy0yMDEyMTIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIFByb2ZpbGVzIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUHJvZmlsZXMgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+T1dMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0xMi0xMSAtIDxhIHRpdGxlPSJPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUHJvZmlsZXMgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsMi1wcm9maWxlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJvcmlzIE1vdGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVybmFyZG8gQ3VlbmNhIEdyYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSG9ycm9ja3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5aaGUgV3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BY2hpbGxlIEZva291ZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIDIgd2ViIG9udG9sb2d5IGxhbmd1YWdlIHN0cnVjdHVyYWwgc3BlY2lmaWNhdGlvbiBhbmQgZnVuY3Rpb25hbC1zdHlsZSBzeW50YXggKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1JFQy1vd2wyLXN5bnRheC0yMDEyMTIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIFN0cnVjdHVyYWwgU3BlY2lmaWNhdGlvbiBhbmQgRnVuY3Rpb25hbC1TdHlsZSBTeW50YXggKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBTdHJ1Y3R1cmFsIFNwZWNpZmljYXRpb24gYW5kIEZ1bmN0aW9uYWwtU3R5bGUgU3ludGF4IChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk9XTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMTItMTEgLSA8YSB0aXRsZT0iT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIFN0cnVjdHVyYWwgU3BlY2lmaWNhdGlvbiBhbmQgRnVuY3Rpb25hbC1TdHlsZSBTeW50YXggKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsMi1zeW50YXgiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Cb3JpcyBNb3RpawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFBhdGVsLVNjaG5laWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJpamFuIFBhcnNpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIDIgd2ViIG9udG9sb2d5IGxhbmd1YWdlIGNvbmZvcm1hbmNlIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtb3dsMi1jb25mb3JtYW5jZS0yMDEyMTIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIENvbmZvcm1hbmNlIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgQ29uZm9ybWFuY2UgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+T1dMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0xMi0xMSAtIDxhIHRpdGxlPSJPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgQ29uZm9ybWFuY2UgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsMi1jb25mb3JtYW5jZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWxbdG1dIFNtaXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEhvcnJvY2tzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya3VzIEtyw7Z0enNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJpcnRlIEdsaW1tCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIDIgd2ViIG9udG9sb2d5IGxhbmd1YWdlIHF1aWNrIHJlZmVyZW5jZSBndWlkZSAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvUkVDLW93bDItcXVpY2stcmVmZXJlbmNlLTIwMTIxMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUXVpY2sgUmVmZXJlbmNlIEd1aWRlIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUXVpY2sgUmVmZXJlbmNlIEd1aWRlIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk9XTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMTItMTEgLSA8YSB0aXRsZT0iT1dMIDIgV2ViIE9udG9sb2d5IExhbmd1YWdlIFF1aWNrIFJlZmVyZW5jZSBHdWlkZSAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wyLXF1aWNrLXJlZmVyZW5jZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppZSBCYW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlzYSBLZW5kYWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVib3JhaCBNY0d1aW5uZXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGV0ZXIgUGF0ZWwtU2NobmVpZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIDIgd2ViIG9udG9sb2d5IGxhbmd1YWdlIGRhdGEgcmFuZ2UgZXh0ZW5zaW9uOiBsaW5lYXIgZXF1YXRpb25zIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9OT1RFLW93bDItZHItbGluZWFyLTIwMTIxMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgRGF0YSBSYW5nZSBFeHRlbnNpb246IExpbmVhciBFcXVhdGlvbnMgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBEYXRhIFJhbmdlIEV4dGVuc2lvbjogTGluZWFyIEVxdWF0aW9ucyAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5PV0wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEyLTExIC0gPGEgdGl0bGU9Ik9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBEYXRhIFJhbmdlIEV4dGVuc2lvbjogTGluZWFyIEVxdWF0aW9ucyAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wyLWRyLWxpbmVhciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJpamFuIFBhcnNpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlVsaSBTYXR0bGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIDIgd2ViIG9udG9sb2d5IGxhbmd1YWdlIHJkZi1iYXNlZCBzZW1hbnRpY3MgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1JFQy1vd2wyLXJkZi1iYXNlZC1zZW1hbnRpY3MtMjAxMjEyMTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBSREYtQmFzZWQgU2VtYW50aWNzIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5PV0wgMiBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUkRGLUJhc2VkIFNlbWFudGljcyAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5PV0wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEyLTExIC0gPGEgdGl0bGU9Ik9XTCAyIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBSREYtQmFzZWQgU2VtYW50aWNzIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L293bDItcmRmLWJhc2VkLXNlbWFudGljcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgU2NobmVpZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHNpZ25hdHVyZSAxLjEgaW50ZXJvcCB0ZXN0IHJlcG9ydCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS14bWxkc2lnLWNvcmUxLWludGVyb3AtMjAxMjExMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTaWduYXR1cmUgMS4xIEludGVyb3AgVGVzdCBSZXBvcnQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgU2lnbmF0dXJlIDEuMSBJbnRlcm9wIFRlc3QgUmVwb3J0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTExLTEzIC0gPGEgdGl0bGU9IlhNTCBTaWduYXR1cmUgMS4xIEludGVyb3AgVGVzdCBSZXBvcnQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbGRzaWctY29yZTEtaW50ZXJvcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmF0aWsgRGF0dGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGVuY3J5cHRpb24gMS4xIGludGVyb3AgdGVzdCByZXBvcnQiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUteG1sZW5jLWNvcmUxLWludGVyb3AtMjAxMjExMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBFbmNyeXB0aW9uIDEuMSBJbnRlcm9wIFRlc3QgUmVwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEVuY3J5cHRpb24gMS4xIEludGVyb3AgVGVzdCBSZXBvcnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMTEtMTMgLSA8YSB0aXRsZT0iWE1MIEVuY3J5cHRpb24gMS4xIEludGVyb3AgVGVzdCBSZXBvcnQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbGVuYy1jb3JlMS1pbnRlcm9wIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UHJhdGlrIERhdHRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJiZXN0IHByYWN0aWNlcyBmb3IgZnJhZ21lbnQgaWRlbnRpZmllcnMgYW5kIG1lZGlhIHR5cGUgZGVmaW5pdGlvbnMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtZnJhZ2lkLWJlc3QtcHJhY3RpY2VzLTIwMTIxMDI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBCZXN0IFByYWN0aWNlcyBmb3IgRnJhZ21lbnQgSWRlbnRpZmllcnMgYW5kIE1lZGlhIFR5cGUgRGVmaW5pdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5CZXN0IFByYWN0aWNlcyBmb3IgRnJhZ21lbnQgSWRlbnRpZmllcnMgYW5kIE1lZGlhIFR5cGUgRGVmaW5pdGlvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRlY2huaWNhbCBBcmNoaXRlY3R1cmUgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0xMC0yNSAtIDxhIHRpdGxlPSJCZXN0IFByYWN0aWNlcyBmb3IgRnJhZ21lbnQgSWRlbnRpZmllcnMgYW5kIE1lZGlhIFR5cGUgRGVmaW5pdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2ZyYWdpZC1iZXN0LXByYWN0aWNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplbmkgVGVubmlzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im11bHRpbW9kYWwgYXJjaGl0ZWN0dXJlIGFuZCBpbnRlcmZhY2VzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtbW1pLWFyY2gtMjAxMjEwMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE11bHRpbW9kYWwgQXJjaGl0ZWN0dXJlIGFuZCBJbnRlcmZhY2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TXVsdGltb2RhbCBBcmNoaXRlY3R1cmUgYW5kIEludGVyZmFjZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk11bHRpbW9kYWwgSW50ZXJhY3Rpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEwLTI1IC0gPGEgdGl0bGU9Ik11bHRpbW9kYWwgQXJjaGl0ZWN0dXJlIGFuZCBJbnRlcmZhY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tbWktYXJjaCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFzc29jaWF0aW5nIHNjaGVtYXMgd2l0aCB4bWwgZG9jdW1lbnRzIDEuMCAodGhpcmQgZWRpdGlvbikiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUteG1sLW1vZGVsLTIwMTIxMDA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBc3NvY2lhdGluZyBTY2hlbWFzIHdpdGggWE1MIGRvY3VtZW50cyAxLjAgKFRoaXJkIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QXNzb2NpYXRpbmcgU2NoZW1hcyB3aXRoIFhNTCBkb2N1bWVudHMgMS4wIChUaGlyZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTEwLTA5IC0gPGEgdGl0bGU9IkFzc29jaWF0aW5nIFNjaGVtYXMgd2l0aCBYTUwgZG9jdW1lbnRzIDEuMCAoVGhpcmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1tb2RlbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgR3Jvc3NvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Smlya2EgS29zZWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGFwaSBkZXNpZ24gY29va2Jvb2siIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUtYXBpLWRlc2lnbi0yMDEyMTAwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIEFQSSBEZXNpZ24gQ29va2Jvb2sgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgQVBJIERlc2lnbiBDb29rYm9vazwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMTAtMDIgLSA8YSB0aXRsZT0iV2ViIEFQSSBEZXNpZ24gQ29va2Jvb2sgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2FwaS1kZXNpZ24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JpbiBCZXJqb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KdW5na2VlIFNvbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InIycm1sOiByZGIgdG8gcmRmIG1hcHBpbmcgbGFuZ3VhZ2UiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtcjJybWwtMjAxMjA5MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFIyUk1MOiBSREIgdG8gUkRGIE1hcHBpbmcgTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SMlJNTDogUkRCIHRvIFJERiBNYXBwaW5nIExhbmd1YWdlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREIyUkRGIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wOS0yNyAtIDxhIHRpdGxlPSJSMlJNTDogUkRCIHRvIFJERiBNYXBwaW5nIExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yMnJtbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNvdXJpcHJpeWEgRGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2VlbWEgU3VuZGFyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgQ3lnYW5pYWsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhIGRpcmVjdCBtYXBwaW5nIG9mIHJlbGF0aW9uYWwgZGF0YSB0byByZGYiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtcmRiLWRpcmVjdC1tYXBwaW5nLTIwMTIwOTI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBIERpcmVjdCBNYXBwaW5nIG9mIFJlbGF0aW9uYWwgRGF0YSB0byBSREYgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BIERpcmVjdCBNYXBwaW5nIG9mIFJlbGF0aW9uYWwgRGF0YSB0byBSREY8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJEQjJSREYgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA5LTI3IC0gPGEgdGl0bGU9IkEgRGlyZWN0IE1hcHBpbmcgb2YgUmVsYXRpb25hbCBEYXRhIHRvIFJERiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRiLWRpcmVjdC1tYXBwaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY2VsbyBBcmVuYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4YW5kcmUgQmVydGFpbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIFBydWQmIzAzOTtob21tZWF1eAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1YW4gU2VxdWVkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1lZGlhIGZyYWdtZW50cyB1cmkgMS4wIChiYXNpYykiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvUkVDLW1lZGlhLWZyYWdzLTIwMTIwOTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNZWRpYSBGcmFnbWVudHMgVVJJIDEuMCAoYmFzaWMpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWEgRnJhZ21lbnRzIFVSSSAxLjAgKGJhc2ljKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWVkaWEgRnJhZ21lbnRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wOS0yNSAtIDxhIHRpdGxlPSJNZWRpYSBGcmFnbWVudHMgVVJJIDEuMCAoYmFzaWMpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYS1mcmFncyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhcGhhw6tsIFRyb25jeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWsgTWFubmVucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbHZpYSBQZmVpZmZlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdnkgVmFuIERldXJzZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlc2VhcmNoIHJlcG9ydCBvbiB3ZWIgYWNjZXNzaWJpbGl0eSBtZXRyaWNzIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1hY2Nlc3NpYmlsaXR5LW1ldHJpY3MtcmVwb3J0LTIwMTIwODMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXNlYXJjaCBSZXBvcnQgb24gV2ViIEFjY2Vzc2liaWxpdHkgTWV0cmljcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlc2VhcmNoIFJlcG9ydCBvbiBXZWIgQWNjZXNzaWJpbGl0eSBNZXRyaWNzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SZXNlYXJjaCBhbmQgRGV2ZWxvcG1lbnQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA4LTMwIC0gPGEgdGl0bGU9IlJlc2VhcmNoIFJlcG9ydCBvbiBXZWIgQWNjZXNzaWJpbGl0eSBNZXRyaWNzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hY2Nlc3NpYmlsaXR5LW1ldHJpY3MtcmVwb3J0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya2VsIFZpZ28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HaW9yZ2lvIEJyYWpuaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3NodWUgTyYjMDM5O0Nvbm5vcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkYjJyZGYgaW1wbGVtZW50YXRpb24gcmVwb3J0IiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS1yZGIycmRmLWltcGxlbWVudGF0aW9ucy0yMDEyMDgxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRCMlJERiBJbXBsZW1lbnRhdGlvbiBSZXBvcnQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREIyUkRGIEltcGxlbWVudGF0aW9uIFJlcG9ydDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRCMlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDgtMTQgLSA8YSB0aXRsZT0iUkRCMlJERiBJbXBsZW1lbnRhdGlvbiBSZXBvcnQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkYjJyZGYtaW1wbGVtZW50YXRpb25zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Qm9yaXMgVmlsbGF6w7NuLVRlcnJhemFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBIYXVzZW5ibGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icjJybWwgYW5kIGRpcmVjdCBtYXBwaW5nIHRlc3QgY2FzZXMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9OT1RFLXJkYjJyZGYtdGVzdC1jYXNlcy0yMDEyMDgxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUjJSTUwgYW5kIERpcmVjdCBNYXBwaW5nIFRlc3QgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SMlJNTCBhbmQgRGlyZWN0IE1hcHBpbmcgVGVzdCBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRCMlJERiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDgtMTQgLSA8YSB0aXRsZT0iUjJSTUwgYW5kIERpcmVjdCBNYXBwaW5nIFRlc3QgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkYjJyZGYtdGVzdC1jYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJvcmlzIFZpbGxhesOzbi1UZXJyYXphcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgSGF1c2VuYmxhcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhmb3JtcyAyLjA6IHhwYXRoIGV4cHJlc3Npb24gbW9kdWxlIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELXhmb3Jtcy14cGF0aC0yMDEyMDgwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWEZvcm1zIDIuMDogWFBhdGggZXhwcmVzc2lvbiBtb2R1bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YRm9ybXMgMi4wOiBYUGF0aCBleHByZXNzaW9uIG1vZHVsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Rm9ybXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA4LTA3IC0gPGEgdGl0bGU9IlhGb3JtcyAyLjA6IFhQYXRoIGV4cHJlc3Npb24gbW9kdWxlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94Zm9ybXMteHBhdGgiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OaWNrIFZhbiBEZW4gQmxlZWtlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gQm95ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhmb3JtcyAyLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9XRC14Zm9ybXMyMC0yMDEyMDgwNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWEZvcm1zIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhGb3JtcyZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Rm9ybXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA4LTA3IC0gPGEgdGl0bGU9IlhGb3JtcyAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hmb3JtczIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBCb3llcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkwgS2xvdHoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZW4gUGVtYmVydG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmljayBWYW4gRGVuIEJsZWVrZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgYXBpIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUtcmRmLWFwaS0yMDEyMDcwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJERiBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERmEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA3LTA1IC0gPGEgdGl0bGU9IlJERiBBUEkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZi1hcGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYXRoYW4gUml4aGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFudSBTcG9ybnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW5qYW1pbiBBZHJpYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmRmYSBhcGkiIGRhdGEtdGFnPSJkYXRhIGh0bWwgd2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUtcmRmYS1hcGktMjAxMjA3MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERmEgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGYSBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERmEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA3LTA1IC0gPGEgdGl0bGU9IlJERmEgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGZhLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbnUgU3Bvcm55CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVuamFtaW4gQWRyaWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVnaXN0cmF0aW9uICZhbXA7IGRpc2NvdmVyeSBvZiBtdWx0aW1vZGFsIG1vZGFsaXR5IGNvbXBvbmVudHMgaW4gbXVsdGltb2RhbCBzeXN0ZW1zOiB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS1tbWktZGlzY292ZXJ5LTIwMTIwNzA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZWdpc3RyYXRpb24gJmFtcDsgRGlzY292ZXJ5IG9mIE11bHRpbW9kYWwgTW9kYWxpdHkgQ29tcG9uZW50cyBpbiBNdWx0aW1vZGFsIFN5c3RlbXM6IFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVnaXN0cmF0aW9uICYgRGlzY292ZXJ5IG9mIE11bHRpbW9kYWwgTW9kYWxpdHkgQ29tcG9uZW50cyBpbiBNdWx0aW1vZGFsIFN5c3RlbXM6IFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wNy0wNSAtIDxhIHRpdGxlPSJSZWdpc3RyYXRpb24gJmFtcDsgRGlzY292ZXJ5IG9mIE11bHRpbW9kYWwgTW9kYWxpdHkgQ29tcG9uZW50cyBpbiBNdWx0aW1vZGFsIFN5c3RlbXM6IFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tbWktZGlzY292ZXJ5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QiBIZWxlbmEgUk9EUklHVUVaCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkZiBpbnRlcmZhY2VzIiBkYXRhLXRhZz0iZGF0YSB3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS1yZGYtaW50ZXJmYWNlcy0yMDEyMDcwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGIEludGVyZmFjZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgSW50ZXJmYWNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDctMDUgLSA8YSB0aXRsZT0iUkRGIEludGVyZmFjZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZi1pbnRlcmZhY2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmF0aGFuIFJpeGhhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hbnUgU3Bvcm55CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVuamFtaW4gQWRyaWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBhcHBsaWNhdGlvbiBwcml2YWN5IGJlc3QgcHJhY3RpY2VzIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9OT1RFLWFwcC1wcml2YWN5LWJwLTIwMTIwNzAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQXBwbGljYXRpb24gUHJpdmFjeSBCZXN0IFByYWN0aWNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBBcHBsaWNhdGlvbiBQcml2YWN5IEJlc3QgUHJhY3RpY2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wNy0wMyAtIDxhIHRpdGxlPSJXZWIgQXBwbGljYXRpb24gUHJpdmFjeSBCZXN0IFByYWN0aWNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvYXBwLXByaXZhY3ktYnAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYSBxdWVyaWVzIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtY3NzMy1tZWRpYXF1ZXJpZXMtMjAxMjA2MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lZGlhIFF1ZXJpZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZWRpYSBRdWVyaWVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wNi0xOSAtIDxhIHRpdGxlPSJNZWRpYSBRdWVyaWVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MzLW1lZGlhcXVlcmllcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvbWVkaWFxdWVyaWVzLTMvIiB0aXRsZT0iTGF0ZXN0IGVkaXRvcidzIGRyYWZ0IG9mIE1lZGlhIFF1ZXJpZXMiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmxvcmlhbiBSaXZvYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYXN0cmVhbSBwcm9jZXNzaW5nIGFwaSIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9OT1RFLXN0cmVhbXByb2MtMjAxMjA1MzEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1lZGlhU3RyZWFtIFByb2Nlc3NpbmcgQVBJIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWVkaWFTdHJlYW0gUHJvY2Vzc2luZyBBUEk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkF1ZGlvIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wNS0zMSAtIDxhIHRpdGxlPSJNZWRpYVN0cmVhbSBQcm9jZXNzaW5nIEFQSSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3RyZWFtcHJvYyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvYmVydCBPJiMwMzk7Q2FsbGFoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBmcm9tLW9yaWdpbiBoZWFkZXIiIGRhdGEtdGFnPSJzZWN1cml0eSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9OT1RFLWZyb20tb3JpZ2luLTIwMTIwNTI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgRnJvbS1PcmlnaW4gSGVhZGVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIEZyb20tT3JpZ2luIEhlYWRlcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA1LTI5IC0gPGEgdGl0bGU9IlRoZSBGcm9tLU9yaWdpbiBIZWFkZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2Zyb20tb3JpZ2luIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5uZSB2YW4gS2VzdGVyZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJzZWN1cml0eSI+U2VjdXJpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4YmwgMi4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUteGJsLTIwMTIwNTI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYQkwgMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WEJMJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDUtMjQgLSA8YSB0aXRsZT0iWEJMIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveGJsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEhpY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGludGVybmF0aW9uYWxpemF0aW9uICh3cy1pMThuKSIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS13cy1pMThuLTIwMTIwNTIyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgSW50ZXJuYXRpb25hbGl6YXRpb24gKFdTLUkxOE4pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIEludGVybmF0aW9uYWxpemF0aW9uIChXUy1JMThOKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA1LTIyIC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBJbnRlcm5hdGlvbmFsaXphdGlvbiAoV1MtSTE4TikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWkxOG4iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGRpc29uIFBoaWxsaXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyeSBUcnVtYmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RmVsaXggU2FzYWtpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3M2MgeG1sIHNjaGVtYSBkZWZpbml0aW9uIGxhbmd1YWdlICh4c2QpIDEuMSBwYXJ0IDE6IHN0cnVjdHVyZXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1JFQy14bWxzY2hlbWExMS0xLTIwMTIwNDA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXM0MgWE1MIFNjaGVtYSBEZWZpbml0aW9uIExhbmd1YWdlIChYU0QpIDEuMSBQYXJ0IDE6IFN0cnVjdHVyZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XM0MgWE1MIFNjaGVtYSBEZWZpbml0aW9uIExhbmd1YWdlIChYU0QpIDEuMSBQYXJ0IDE6IFN0cnVjdHVyZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTY2hlbWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA0LTA1IC0gPGEgdGl0bGU9IlczQyBYTUwgU2NoZW1hIERlZmluaXRpb24gTGFuZ3VhZ2UgKFhTRCkgMS4xIFBhcnQgMTogU3RydWN0dXJlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sc2NoZW1hMTEtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbmR5IEdhbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgU3BlcmJlcmctTWNRdWVlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJ5IFRob21wc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9haCBNZW5kZWxzb2huCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQmVlY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NdXJyYXkgTWFsb25leQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZXJtcyBmb3IgZGVzY3JpYmluZyBwZW9wbGUiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELXZvY2FiLXBlb3BsZS0yMDEyMDQwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGVybXMgZm9yIGRlc2NyaWJpbmcgcGVvcGxlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGVybXMgZm9yIGRlc2NyaWJpbmcgcGVvcGxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Hb3Zlcm5tZW50IExpbmtlZCBEYXRhIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wNC0wNSAtIDxhIHRpdGxlPSJUZXJtcyBmb3IgZGVzY3JpYmluZyBwZW9wbGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvY2FiLXBlb3BsZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgSGF1c2VuYmxhcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idzNjIHhtbCBzY2hlbWEgZGVmaW5pdGlvbiBsYW5ndWFnZSAoeHNkKSAxLjEgcGFydCAyOiBkYXRhdHlwZXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0idXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvUkVDLXhtbHNjaGVtYTExLTItMjAxMjA0MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFczQyBYTUwgU2NoZW1hIERlZmluaXRpb24gTGFuZ3VhZ2UgKFhTRCkgMS4xIFBhcnQgMjogRGF0YXR5cGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VzNDIFhNTCBTY2hlbWEgRGVmaW5pdGlvbiBMYW5ndWFnZSAoWFNEKSAxLjEgUGFydCAyOiBEYXRhdHlwZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTY2hlbWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTA0LTA1IC0gPGEgdGl0bGU9IlczQyBYTUwgU2NoZW1hIERlZmluaXRpb24gTGFuZ3VhZ2UgKFhTRCkgMS4xIFBhcnQgMjogRGF0YXR5cGVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzY2hlbWExMS0yIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgUGV0ZXJzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW5keSBHYW8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bc2hvayBNYWxob3RyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgU3BlcmJlcmctTWNRdWVlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJ5IFRob21wc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBWLiBCaXJvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzbWlsIHRpbWVzaGVldHMgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUtdGltZXNoZWV0cy0yMDEyMDMyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU01JTCBUaW1lc2hlZXRzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNNSUwgIFRpbWVzaGVldHMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNZTU0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTAzLTI4IC0gPGEgdGl0bGU9IlNNSUwgVGltZXNoZWV0cyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3RpbWVzaGVldHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRyaSBWdW9yaW1hYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpY2sgQnVsdGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGFibG8gQ2VzYXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlIG1lZGlhIGNhcHR1cmUgYXBpIiBkYXRhLXRhZz0ibWVkaWEgd2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUtbWVkaWEtY2FwdHVyZS1hcGktMjAxMjAzMjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRoZSBNZWRpYSBDYXB0dXJlIEFQSSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBNZWRpYSBDYXB0dXJlIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDMtMjIgLSA8YSB0aXRsZT0iVGhlIE1lZGlhIENhcHR1cmUgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYS1jYXB0dXJlLWFwaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkR6dW5nIFRyYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JbGtrYSBPa3NhbmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW5nbWFyIEtsaWNoZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ3ZWJhcGkiPldlYiBBUEkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndpZGdldCB1cmkgc2NoZW1lIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9OT1RFLXdpZGdldHMtdXJpLTIwMTIwMzEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXaWRnZXQgVVJJIHNjaGVtZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldpZGdldCBVUkkgc2NoZW1lPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj4oaGlzdG9yaWNhbCkgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDMtMTMgLSA8YSB0aXRsZT0iV2lkZ2V0IFVSSSBzY2hlbWUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dpZGdldHMtdXJpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwgZGF0YSBndWlkZSIgZGF0YS10YWc9ImRhdGEgaHRtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS1odG1sLWRhdGEtZ3VpZGUtMjAxMjAzMDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgRGF0YSBHdWlkZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgRGF0YSBHdWlkZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VtYW50aWMgV2ViIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDMtMDggLSA8YSB0aXRsZT0iSFRNTCBEYXRhIEd1aWRlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLWRhdGEtZ3VpZGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZW5pIFRlbm5pc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtZWRpYXN0cmVhbSBjYXB0dXJlIHNjZW5hcmlvcyIgZGF0YS10YWc9Im1lZGlhIHdlYmFwaSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1jYXB0dXJlLXNjZW5hcmlvcy0yMDEyMDMwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWVkaWFTdHJlYW0gQ2FwdHVyZSBTY2VuYXJpb3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NZWRpYVN0cmVhbSBDYXB0dXJlIFNjZW5hcmlvczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlcyBhbmQgU2Vuc29ycyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFJlYWwtVGltZSBDb21tdW5pY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDMtMDYgLSA8YSB0aXRsZT0iTWVkaWFTdHJlYW0gQ2FwdHVyZSBTY2VuYXJpb3MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NhcHR1cmUtc2NlbmFyaW9zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VHJhdmlzIExlaXRoZWFkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNvYXAgb3ZlciBqYXZhIG1lc3NhZ2Ugc2VydmljZSAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL1JFQy1zb2Fwam1zLTIwMTIwMjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTT0FQIG92ZXIgSmF2YSBNZXNzYWdlIFNlcnZpY2UgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U09BUCAgb3ZlciAgSmF2YSAgTWVzc2FnZSAgU2VydmljZSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U09BUC1KTVMgQmluZGluZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDItMTYgLSA8YSB0aXRsZT0iU09BUCBvdmVyIEphdmEgTWVzc2FnZSBTZXJ2aWNlIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc29hcGptcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWwgQWRhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBFYXN0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIEpvaG5zb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2xhbmQgTWVycmljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgUGhpbGxpcHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhpbmNsdWRlIDEuMSByZXF1aXJlbWVudCBhbmQgdXNlIGNhc2VzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9OT1RFLXhpbmNsdWRlLTExLXJlcXVpcmVtZW50cy0yMDEyMDIxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWEluY2x1ZGUgMS4xIFJlcXVpcmVtZW50IGFuZCBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YSW5jbHVkZSAxLjEgUmVxdWlyZW1lbnQgYW5kIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTAyLTE0IC0gPGEgdGl0bGU9IlhJbmNsdWRlIDEuMSBSZXF1aXJlbWVudCBhbmQgVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aW5jbHVkZS0xMS1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2FnZSBwYXR0ZXJucyBmb3IgY2xpZW50LXNpZGUgdXJpIHBhcmFtZXRlcnMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS1oYXNoLWluLXVyaS0yMDEyMDIwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNhZ2UgUGF0dGVybnMgRm9yIENsaWVudC1TaWRlIFVSSSBwYXJhbWV0ZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VXNhZ2UgUGF0dGVybnMgRm9yIENsaWVudC1TaWRlIFVSSSBwYXJhbWV0ZXJzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UZWNobmljYWwgQXJjaGl0ZWN0dXJlIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTItMDItMDkgLSA8YSB0aXRsZT0iVXNhZ2UgUGF0dGVybnMgRm9yIENsaWVudC1TaWRlIFVSSSBwYXJhbWV0ZXJzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9oYXNoLWluLXVyaSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlQuVi4gUmFtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvbnRvbG9neSBmb3IgbWVkaWEgcmVzb3VyY2VzIDEuMCIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9SRUMtbWVkaWFvbnQtMTAtMjAxMjAyMDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9udG9sb2d5IGZvciBNZWRpYSBSZXNvdXJjZXMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T250b2xvZ3kgIGZvciAgTWVkaWEgIFJlc291cmNlcyZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWVkaWEgQW5ub3RhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTAyLTA5IC0gPGEgdGl0bGU9Ik9udG9sb2d5IGZvciBNZWRpYSBSZXNvdXJjZXMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYW9udC0xMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldvbnN1ayBMZWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XZXJuZXIgQmFpbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9iaWFzIELDvHJnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaWVycmUtQW50b2luZSBDaGFtcGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbi1QaWVycmUgRVZBSU4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ww6lyb25pcXVlIE1hbGFpc8OpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhpZXJyeSBNaWNoZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GZWxpeCBTYXNha2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2FraW0gU8O2ZGVyYmVyZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZsb3JpYW4gU3RlZ21haWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBTdHJhc3NuZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwveG1sIHRhc2sgZm9yY2UgcmVwb3J0IiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTIvTk9URS1odG1sLXhtbC10Zi1yZXBvcnQtMjAxMjAyMDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwvWE1MIFRhc2sgRm9yY2UgUmVwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTC9YTUwgVGFzayBGb3JjZSBSZXBvcnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRlY2huaWNhbCBBcmNoaXRlY3R1cmUgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMi0wMi0wOSAtIDxhIHRpdGxlPSJIVE1ML1hNTCBUYXNrIEZvcmNlIFJlcG9ydCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHRtbC14bWwtdGYtcmVwb3J0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibW1pIGludGVyb3BlcmFiaWxpdHkgdGVzdCByZXBvcnQiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEyL05PVEUtbW1pLWludGVyb3AtMjAxMjAxMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1NSSBpbnRlcm9wZXJhYmlsaXR5IHRlc3QgcmVwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TU1JIGludGVyb3BlcmFiaWxpdHkgdGVzdCByZXBvcnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk11bHRpbW9kYWwgSW50ZXJhY3Rpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTAxLTI0IC0gPGEgdGl0bGU9Ik1NSSBpbnRlcm9wZXJhYmlsaXR5IHRlc3QgcmVwb3J0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tbWktaW50ZXJvcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkluZ21hciBLbGljaGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2libGUgc3R5bGVzaGVldCBsYW5ndWFnZSAoeHNsKSB2ZXJzaW9uIDIuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9XRC14c2xmbzIwLTIwMTIwMTE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFeHRlbnNpYmxlIFN0eWxlc2hlZXQgTGFuZ3VhZ2UgKFhTTCkgVmVyc2lvbiAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FeHRlbnNpYmxlICBTdHlsZXNoZWV0ICBMYW5ndWFnZSAgKFhTTCkgIFZlcnNpb24mbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBQcmludCBhbmQgUGFnZSBMYXlvdXQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEyLTAxLTE3IC0gPGEgdGl0bGU9IkV4dGVuc2libGUgU3R5bGVzaGVldCBMYW5ndWFnZSAoWFNMKSBWZXJzaW9uIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsZm8yMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUGF3c29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1ZGlvIHByb2Nlc3NpbmcgYXBpIiBkYXRhLXRhZz0ibWVkaWEgd2ViYXBpIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWF1ZGlvcHJvYy0yMDExMTIxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXVkaW8gUHJvY2Vzc2luZyBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BdWRpbyBQcm9jZXNzaW5nIEFQSTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QXVkaW8gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTEyLTE1IC0gPGEgdGl0bGU9IkF1ZGlvIFByb2Nlc3NpbmcgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hdWRpb3Byb2MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JlcnQgTyYjMDM5O0NhbGxhaGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgUm9nZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGZyYWdtZW50ICh3cy1mcmFnbWVudCkiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy13cy1mcmFnbWVudC0yMDExMTIxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEZyYWdtZW50IChXUy1GcmFnbWVudCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgRnJhZ21lbnQgKFdTLUZyYWdtZW50KTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFJlc291cmNlIEFjY2VzcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMTItMTMgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIEZyYWdtZW50IChXUy1GcmFnbWVudCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWZyYWdtZW50Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91ZyBEYXZpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F0eSBXYXJyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V3UgQ2hvdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGVudW1lcmF0aW9uICh3cy1lbnVtZXJhdGlvbikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy13cy1lbnVtZXJhdGlvbi0yMDExMTIxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEVudW1lcmF0aW9uIChXUy1FbnVtZXJhdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgRW51bWVyYXRpb24gKFdTLUVudW1lcmF0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFJlc291cmNlIEFjY2VzcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMTItMTMgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIEVudW1lcmF0aW9uIChXUy1FbnVtZXJhdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWVudW1lcmF0aW9uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91ZyBEYXZpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F0eSBXYXJyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V3UgQ2hvdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGV2ZW50IGRlc2NyaXB0aW9ucyAod3MtZXZlbnRkZXNjcmlwdGlvbnMpIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtd3MtZXZlbnQtZGVzY3JpcHRpb25zLTIwMTExMjEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgRXZlbnQgRGVzY3JpcHRpb25zIChXUy1FdmVudERlc2NyaXB0aW9ucykgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgRXZlbnQgRGVzY3JpcHRpb25zIChXUy1FdmVudERlc2NyaXB0aW9ucyk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBSZXNvdXJjZSBBY2Nlc3MgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTEyLTEzIC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBFdmVudCBEZXNjcmlwdGlvbnMgKFdTLUV2ZW50RGVzY3JpcHRpb25zKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3MtZXZlbnQtZGVzY3JpcHRpb25zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91ZyBEYXZpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F0eSBXYXJyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V3UgQ2hvdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIHNvYXAgYXNzZXJ0aW9ucyAod3Mtc29hcGFzc2VydGlvbnMpIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtd3Mtc29hcC1hc3NlcnRpb25zLTIwMTExMjEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgU09BUCBBc3NlcnRpb25zIChXUy1TT0FQQXNzZXJ0aW9ucykgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgU09BUCBBc3NlcnRpb25zIChXUy1TT0FQQXNzZXJ0aW9ucyk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBSZXNvdXJjZSBBY2Nlc3MgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTEyLTEzIC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBTT0FQIEFzc2VydGlvbnMgKFdTLVNPQVBBc3NlcnRpb25zKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3Mtc29hcC1hc3NlcnRpb25zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91ZyBEYXZpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F0eSBXYXJyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V3UgQ2hvdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGV2ZW50aW5nICh3cy1ldmVudGluZykiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy13cy1ldmVudGluZy0yMDExMTIxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEV2ZW50aW5nIChXUy1FdmVudGluZykgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgRXZlbnRpbmcgKFdTLUV2ZW50aW5nKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFJlc291cmNlIEFjY2VzcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMTItMTMgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIEV2ZW50aW5nIChXUy1FdmVudGluZykgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWV2ZW50aW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91ZyBEYXZpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F0eSBXYXJyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V3UgQ2hvdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIG1ldGFkYXRhIGV4Y2hhbmdlICh3cy1tZXRhZGF0YWV4Y2hhbmdlKSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLXdzLW1ldGFkYXRhLWV4Y2hhbmdlLTIwMTExMjEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgTWV0YWRhdGEgRXhjaGFuZ2UgKFdTLU1ldGFkYXRhRXhjaGFuZ2UpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIE1ldGFkYXRhIEV4Y2hhbmdlIChXUy1NZXRhZGF0YUV4Y2hhbmdlKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFJlc291cmNlIEFjY2VzcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMTItMTMgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIE1ldGFkYXRhIEV4Y2hhbmdlIChXUy1NZXRhZGF0YUV4Y2hhbmdlKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3MtbWV0YWRhdGEtZXhjaGFuZ2UiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb3VnIERhdmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXNob2sgTWFsaG90cmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LYXR5IFdhcnIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XdSBDaG91CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgc2VydmljZXMgdHJhbnNmZXIgKHdzLXRyYW5zZmVyKSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLXdzLXRyYW5zZmVyLTIwMTExMjEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgVHJhbnNmZXIgKFdTLVRyYW5zZmVyKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlcyBUcmFuc2ZlciAoV1MtVHJhbnNmZXIpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgUmVzb3VyY2UgQWNjZXNzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMS0xMi0xMyAtIDxhIHRpdGxlPSJXZWIgU2VydmljZXMgVHJhbnNmZXIgKFdTLVRyYW5zZmVyKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3MtdHJhbnNmZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb3VnIERhdmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXNob2sgTWFsaG90cmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LYXR5IFdhcnIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XdSBDaG91CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIGhvbWUgbmV0d29ya2luZyBzY2VuYXJpb3MiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvTk9URS1obnJlcS0yMDExMTIwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVxdWlyZW1lbnRzIGZvciBIb21lIE5ldHdvcmtpbmcgU2NlbmFyaW9zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVxdWlyZW1lbnRzIGZvciBIb21lIE5ldHdvcmtpbmcgU2NlbmFyaW9zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NZWRpYSBhbmQgRW50ZXJ0YWlubWVudCBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTEyLTAxIC0gPGEgdGl0bGU9IlJlcXVpcmVtZW50cyBmb3IgSG9tZSBOZXR3b3JraW5nIFNjZW5hcmlvcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaG5yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HaXVzZXBwZSBQYXNjYWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm90b2NvbCBmb3IgbWVkaWEgZnJhZ21lbnRzIDEuMCByZXNvbHV0aW9uIGluIGh0dHAiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9XRC1tZWRpYS1mcmFncy1yZWNpcGVzLTIwMTExMjAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcm90b2NvbCBmb3IgTWVkaWEgRnJhZ21lbnRzIDEuMCBSZXNvbHV0aW9uIGluIEhUVFAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qcm90b2NvbCBmb3IgTWVkaWEgRnJhZ21lbnRzIDEuMCBSZXNvbHV0aW9uIGluIEhUVFA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1lZGlhIEZyYWdtZW50cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMTItMDEgLSA8YSB0aXRsZT0iUHJvdG9jb2wgZm9yIE1lZGlhIEZyYWdtZW50cyAxLjAgUmVzb2x1dGlvbiBpbiBIVFRQIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tZWRpYS1mcmFncy1yZWNpcGVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFwaGHDq2wgVHJvbmN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpayBNYW5uZW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2lsdmlhIFBmZWlmZmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2eSBWYW4gRGV1cnNlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib250b2xvZ3kgb2YgcmhldG9yaWNhbCBibG9ja3MgKG9yYikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL05PVEUtaGNscy1vcmItMjAxMTEwMjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9udG9sb2d5IG9mIFJoZXRvcmljYWwgQmxvY2tzIChPUkIpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T250b2xvZ3kgb2YgUmhldG9yaWNhbCBCbG9ja3MgKE9SQik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBIZWFsdGggQ2FyZSBhbmQgTGlmZSBTY2llbmNlcyBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTEwLTIwIC0gPGEgdGl0bGU9Ik9udG9sb2d5IG9mIFJoZXRvcmljYWwgQmxvY2tzIChPUkIpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9oY2xzLW9yYiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhb2xvIENpY2NhcmVzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlR1ZG9yIEdyb3phCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlcXVpcmVtZW50IGZvciBzdGFuZGFyZGl6aW5nIHdpZGdldHMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL05PVEUtd2lkZ2V0cy1yZXFzLTIwMTEwOTI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXF1aXJlbWVudCBGb3IgU3RhbmRhcmRpemluZyBXaWRnZXRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVxdWlyZW1lbnQgRm9yIFN0YW5kYXJkaXppbmcgV2lkZ2V0czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTA5LTI3IC0gPGEgdGl0bGU9IlJlcXVpcmVtZW50IEZvciBTdGFuZGFyZGl6aW5nIFdpZGdldHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dpZGdldHMtcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmNvcyBDYWNlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbmsgbWFya3VwIGxhbmd1YWdlIChpbmttbCkiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1JbmtNTC0yMDExMDkyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW5rIE1hcmt1cCBMYW5ndWFnZSAoSW5rTUwpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SW5rIE1hcmt1cCBMYW5ndWFnZSAoSW5rTUwpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMS0wOS0yMCAtIDxhIHRpdGxlPSJJbmsgTWFya3VwIExhbmd1YWdlIChJbmtNTCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0lua01MIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RlcGhlbiBXYXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9tIFVuZGVyaGlsbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNjYWxhYmxlIHZlY3RvciBncmFwaGljcyAoc3ZnKSAxLjEgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtU1ZHMTEtMjAxMTA4MTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNjYWxhYmxlIFZlY3RvciBHcmFwaGljcyAoU1ZHKSAxLjEgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNjYWxhYmxlIFZlY3RvciBHcmFwaGljcyAoU1ZHKSAxLjEgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMS0wOC0xNiAtIDxhIHRpdGxlPSJTY2FsYWJsZSBWZWN0b3IgR3JhcGhpY3MgKFNWRykgMS4xIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWRzExIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpayBEYWhsc3Ryw7ZtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF0cmljayBEZW5nbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW50aG9ueSBHcmFzc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYW1lcm9uIE1jQ29ybWFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvdWcgU2NoZXBlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBXYXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uIEZlcnJhaW9sbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1biBGdWppc2F3YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlYW4gSmFja3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idm9pY2UgYnJvd3NlciBjYWxsIGNvbnRyb2w6IGNjeG1sIHZlcnNpb24gMS4wIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jY3htbC0yMDExMDcwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVm9pY2UgQnJvd3NlciBDYWxsIENvbnRyb2w6IENDWE1MIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Vm9pY2UgIEJyb3dzZXIgIENhbGwgIENvbnRyb2w6ICBDQ1hNTCAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Vm9pY2UgQnJvd3NlciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDctMDUgLSA8YSB0aXRsZT0iVm9pY2UgQnJvd3NlciBDYWxsIENvbnRyb2w6IENDWE1MIFZlcnNpb24gMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jY3htbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhb2xvIEJhZ2dpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgU2NvdHQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Indvcmtpbmcgd2l0aCB0aW1lIHpvbmVzIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvTk9URS10aW1lem9uZS0yMDExMDcwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV29ya2luZyB3aXRoIFRpbWUgWm9uZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Xb3JraW5nIHdpdGggVGltZSBab25lczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTA3LTA1IC0gPGEgdGl0bGU9Ildvcmtpbmcgd2l0aCBUaW1lIFpvbmVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90aW1lem9uZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkZGlzb24gUGhpbGxpcHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhbiB4c2QgZGF0YXR5cGUgZm9yIGllZWUgZmxvYXRpbmctcG9pbnQgZGVjaW1hbCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvTk9URS14c2QtcHJlY2lzaW9uRGVjaW1hbC0yMDExMDYwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQW4gWFNEIGRhdGF0eXBlIGZvciBJRUVFIGZsb2F0aW5nLXBvaW50IGRlY2ltYWwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BbiBYU0QgZGF0YXR5cGUgZm9yIElFRUUgZmxvYXRpbmctcG9pbnQgZGVjaW1hbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNjaGVtYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDYtMDkgLSA8YSB0aXRsZT0iQW4gWFNEIGRhdGF0eXBlIGZvciBJRUVFIGZsb2F0aW5nLXBvaW50IGRlY2ltYWwgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hzZC1wcmVjaXNpb25EZWNpbWFsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgUGV0ZXJzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFNwZXJiZXJnLU1jUXVlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idW5pY29kZSBibG9jayBuYW1lcyBmb3IgdXNlIGluIHhzZCByZWd1bGFyIGV4cHJlc3Npb25zIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLXhzZC11bmljb2RlLWJsb2NrbmFtZXMtMjAxMTA2MDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVuaWNvZGUgYmxvY2sgbmFtZXMgZm9yIHVzZSBpbiBYU0QgcmVndWxhciBleHByZXNzaW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVuaWNvZGUgYmxvY2sgbmFtZXMgZm9yIHVzZSBpbiBYU0QgcmVndWxhciBleHByZXNzaW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNjaGVtYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDYtMDkgLSA8YSB0aXRsZT0iVW5pY29kZSBibG9jayBuYW1lcyBmb3IgdXNlIGluIFhTRCByZWd1bGFyIGV4cHJlc3Npb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94c2QtdW5pY29kZS1ibG9ja25hbWVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBTcGVyYmVyZy1NY1F1ZWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjYXNjYWRpbmcgc3R5bGUgc2hlZXRzIGxldmVsIDIgcmV2aXNpb24gMSAoY3NzIDIuMSkgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmcgZWQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLUNTUzItMjAxMTA2MDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENhc2NhZGluZyBTdHlsZSBTaGVldHMgTGV2ZWwgMiBSZXZpc2lvbiAxIChDU1MgMi4xKSBTcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyBMZXZlbCAyIFJldmlzaW9uIDEgKENTUyAyLjEpIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTA2LTA3IC0gPGEgdGl0bGU9IkNhc2NhZGluZyBTdHlsZSBTaGVldHMgTGV2ZWwgMiBSZXZpc2lvbiAxIChDU1MgMi4xKSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9DU1MyMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgLSA8YSBocmVmPSJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzMi8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyBMZXZlbCAyIFJldmlzaW9uIDEgKENTUyAyLjEpIFNwZWNpZmljYXRpb24iPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVydCBCb3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYW50ZWsgw4dlbGlrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEhpY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Iw6Vrb24gV2l1bSBMaWUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYSBtYXRobWwgZm9yIGNzcyBwcm9maWxlIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtbWF0aG1sLWZvci1jc3MtMjAxMTA2MDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEEgTWF0aE1MIGZvciBDU1MgUHJvZmlsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkEgTWF0aE1MIGZvciBDU1MgUHJvZmlsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWF0aCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDYtMDcgLSA8YSB0aXRsZT0iQSBNYXRoTUwgZm9yIENTUyBQcm9maWxlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tYXRobWwtZm9yLWNzcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlcnQgQm9zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQ2FybGlzbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HaW9yZ2kgQ2hhdmNoYW5pZHplCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF0cmljayBEIEYgSW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnJ1Y2UgTWlsbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBvaW50cyBvZiBpbnRlcmVzdCBjb3JlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELXBvaS1jb3JlLTIwMTEwNTEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQb2ludHMgb2YgSW50ZXJlc3QgQ29yZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvaW50cyBvZiBJbnRlcmVzdCBDb3JlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Qb2ludHMgb2YgSW50ZXJlc3QgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTA1LTEyIC0gPGEgdGl0bGU9IlBvaW50cyBvZiBJbnRlcmVzdCBDb3JlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wb2ktY29yZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgV29tZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2FzY2FkaW5nIHN0eWxlIHNoZWV0cyAoY3NzKSBzbmFwc2hvdCAyMDEwIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL05PVEUtY3NzLTIwMTAtMjAxMTA1MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgU25hcHNob3QgMjAxMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgU25hcHNob3QgMjAxMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDUtMTIgLSA8YSB0aXRsZT0iQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBTbmFwc2hvdCAyMDEwIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jc3MtMjAxMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsaWthIEV0ZW1hZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNhc2NhZGluZyBzdHlsZSBzaGVldHMgKGNzcykgc25hcHNob3QgMjAwNyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLWNzcy1iZWlqaW5nLTIwMTEwNTEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFNuYXBzaG90IDIwMDcgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFNuYXBzaG90IDIwMDc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTA1LTEyIC0gPGEgdGl0bGU9IkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgU25hcHNob3QgMjAwNyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NzLWJlaWppbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlrYSBFdGVtYWQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm9ncmFtbWFibGUgaHR0cCBjYWNoaW5nIGFuZCBzZXJ2aW5nIiBkYXRhLXRhZz0id2ViYXBpIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL05PVEUtRGF0YUNhY2hlLTIwMTEwMzI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcm9ncmFtbWFibGUgSFRUUCBDYWNoaW5nIGFuZCBTZXJ2aW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvZ3JhbW1hYmxlIEhUVFAgQ2FjaGluZyBhbmQgU2VydmluZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+KGhpc3RvcmljYWwpIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTAzLTI5IC0gPGEgdGl0bGU9IlByb2dyYW1tYWJsZSBIVFRQIENhY2hpbmcgYW5kIFNlcnZpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0RhdGFDYWNoZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5pa3VuaiBNZWh0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhxdWVyeSB1cGRhdGUgZmFjaWxpdHkgMS4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMteHF1ZXJ5LXVwZGF0ZS0xMC0yMDExMDMxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFF1ZXJ5IFVwZGF0ZSBGYWNpbGl0eSAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgIFVwZGF0ZSAgRmFjaWxpdHkmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDMtMTcgLSA8YSB0aXRsZT0iWFF1ZXJ5IFVwZGF0ZSBGYWNpbGl0eSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS11cGRhdGUtMTAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb24gQ2hhbWJlcmxpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBEeWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsYSBGbG9yZXNjdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppbSBNZWx0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZXJvbWUgU2ltZW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHF1ZXJ5IGFuZCB4cGF0aCBmdWxsIHRleHQgMS4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMteHBhdGgtZnVsbC10ZXh0LTEwLTIwMTEwMzE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgYW5kIFhQYXRoIEZ1bGwgVGV4dCAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgIGFuZCAgWFBhdGggIEZ1bGwgIFRleHQmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDMtMTcgLSA8YSB0aXRsZT0iWFF1ZXJ5IGFuZCBYUGF0aCBGdWxsIFRleHQgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aC1mdWxsLXRleHQtMTAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXQgQ2FzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgRHljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnkgSG9sc3RlZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaWhlbSBBbWVyLVlhaGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhdmRhciBCb3RldgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXBoZW4gQnV4dG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9jaGVuIETDtnJyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppbSBNZWx0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFJ5cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpheWF2ZWwgU2hhbm11Z2FzdW5kYXJhbQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgYXBpIGFjY2VzcyBjb250cm9sIHVzZSBjYXNlcyBhbmQgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLWRhcC1wb2xpY3ktcmVxcy0yMDExMDMxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGV2aWNlIEFQSSBBY2Nlc3MgQ29udHJvbCBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRldmljZSBBUEkgQWNjZXNzIENvbnRyb2wgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTAzLTE3IC0gPGEgdGl0bGU9IkRldmljZSBBUEkgQWNjZXNzIENvbnRyb2wgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RhcC1wb2xpY3ktcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxhdXJhIEFycmliYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9taW5pcXVlIEhhemHDq2wtTWFzc2lldXgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRlc2NyaWJpbmcgbGlua2VkIGRhdGFzZXRzIHdpdGggdGhlIHZvaWQgdm9jYWJ1bGFyeSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL05PVEUtdm9pZC0yMDExMDMwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGVzY3JpYmluZyBMaW5rZWQgRGF0YXNldHMgd2l0aCB0aGUgVm9JRCBWb2NhYnVsYXJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGVzY3JpYmluZyBMaW5rZWQgRGF0YXNldHMgd2l0aCB0aGUgVm9JRCBWb2NhYnVsYXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMS0wMy0wMyAtIDxhIHRpdGxlPSJEZXNjcmliaW5nIExpbmtlZCBEYXRhc2V0cyB3aXRoIHRoZSBWb0lEIFZvY2FidWxhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvaWQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZWl0aCBBbGV4YW5kZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIEN5Z2FuaWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBIYXVzZW5ibGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVuIFpoYW8KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJiZXN0IHByYWN0aWNlcyBmb3IgY3JlYXRpbmcgbW1pIG1vZGFsaXR5IGNvbXBvbmVudHMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL05PVEUtbW1pLW1jYnAtMjAxMTAzMDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEJlc3QgcHJhY3RpY2VzIGZvciBjcmVhdGluZyBNTUkgTW9kYWxpdHkgQ29tcG9uZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkJlc3QgcHJhY3RpY2VzIGZvciBjcmVhdGluZyBNTUkgTW9kYWxpdHkgQ29tcG9uZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDMtMDEgLSA8YSB0aXRsZT0iQmVzdCBwcmFjdGljZXMgZm9yIGNyZWF0aW5nIE1NSSBNb2RhbGl0eSBDb21wb25lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tbWktbWNicCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkluZ21hciBLbGljaGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRvY3VtZW50IHRlbXBsYXRpbmcgc3RlcHMgZm9yIHhwcm9jIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLXhwcm9jLXRlbXBsYXRlLTIwMTEwMTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEb2N1bWVudCBUZW1wbGF0aW5nIFN0ZXBzIGZvciBYUHJvYyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRvY3VtZW50IFRlbXBsYXRpbmcgU3RlcHMgZm9yIFhQcm9jPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvY2Vzc2luZyBNb2RlbCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDEtMjUgLSA8YSB0aXRsZT0iRG9jdW1lbnQgVGVtcGxhdGluZyBTdGVwcyBmb3IgWFByb2MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwcm9jLXRlbXBsYXRlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHF1ZXJ5IHVwZGF0ZSBmYWNpbGl0eSAxLjAgdXNlIGNhc2VzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLXhxdWVyeS11cGRhdGUtMTAtdXNlLWNhc2VzLTIwMTEwMTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgVXBkYXRlIEZhY2lsaXR5IDEuMCBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgVXBkYXRlIEZhY2lsaXR5IDEuMCBVc2UgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDEtMjUgLSA8YSB0aXRsZT0iWFF1ZXJ5IFVwZGF0ZSBGYWNpbGl0eSAxLjAgVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnktdXBkYXRlLTEwLXVzZS1jYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklvYW5hIE1hbm9sZXNjdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHF1ZXJ5IHVwZGF0ZSBmYWNpbGl0eSAxLjAgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLXhxdWVyeS11cGRhdGUtMTAtcmVxdWlyZW1lbnRzLTIwMTEwMTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgVXBkYXRlIEZhY2lsaXR5IDEuMCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgVXBkYXRlIEZhY2lsaXR5IDEuMCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTEtMDEtMjUgLSA8YSB0aXRsZT0iWFF1ZXJ5IFVwZGF0ZSBGYWNpbGl0eSAxLjAgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnktdXBkYXRlLTEwLXJlcXVpcmVtZW50cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbiBDaGFtYmVybGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uYXRoYW4gUm9iaWUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgYW5kIHhwYXRoIGZ1bGwgdGV4dCAxLjAgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLXhwYXRoLWZ1bGwtdGV4dC0xMC1yZXF1aXJlbWVudHMtMjAxMTAxMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSBhbmQgWFBhdGggRnVsbCBUZXh0IDEuMCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgYW5kIFhQYXRoIEZ1bGwgVGV4dCAxLjAgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTAxLTI1IC0gPGEgdGl0bGU9IlhRdWVyeSBhbmQgWFBhdGggRnVsbCBUZXh0IDEuMCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwYXRoLWZ1bGwtdGV4dC0xMC1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGVwaGVuIEJ1eHRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdCBDYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBSeXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cXVlcnkgYW5kIHhwYXRoIGZ1bGwgdGV4dCAxLjAgdXNlIGNhc2VzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMS9OT1RFLXhwYXRoLWZ1bGwtdGV4dC0xMC11c2UtY2FzZXMtMjAxMTAxMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhRdWVyeSBhbmQgWFBhdGggRnVsbCBUZXh0IDEuMCBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUXVlcnkgYW5kIFhQYXRoIEZ1bGwgVGV4dCAxLjAgVXNlIENhc2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDExLTAxLTI1IC0gPGEgdGl0bGU9IlhRdWVyeSBhbmQgWFBhdGggRnVsbCBUZXh0IDEuMCBVc2UgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwYXRoLWZ1bGwtdGV4dC0xMC11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXQgQ2FzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpaGVtIEFtZXItWWFoaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3VyaWUgc3ludGF4IDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9OT1RFLWN1cmllLTIwMTAxMjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDVVJJRSBTeW50YXggMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q1VSSUUgIFN5bnRheCZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WEhUTUwyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMi0xNiAtIDxhIHRpdGxlPSJDVVJJRSBTeW50YXggMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jdXJpZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgQmlyYmVjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIE1jQ2Fycm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgZXZlbnRzIDIiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS14bWwtZXZlbnRzMi0yMDEwMTIxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEV2ZW50cyAyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MICBFdmVudHMmbmJzcDsyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkZvcm1zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMi0xNiAtIDxhIHRpdGxlPSJYTUwgRXZlbnRzIDIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1ldmVudHMyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEJpcmJlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2xhbmQgTWVycmljawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4ZnJhbWVzIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9OT1RFLXhmcmFtZXMtMjAxMDEyMTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhGcmFtZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YRnJhbWVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE2IC0gPGEgdGl0bGU9IlhGcmFtZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hmcmFtZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZW4gUGVtYmVydG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzYXlhc3UgSXNoaWthd2EKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImhsaW5rIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9OT1RFLWhsaW5rLTIwMTAxMjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBITGluayBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhMaW5rPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE2IC0gPGEgdGl0bGU9IkhMaW5rIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9obGluayI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBQZW1iZXJ0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXNheWFzdSBJc2hpa2F3YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InZvaWNlIGV4dGVuc2libGUgbWFya3VwIGxhbmd1YWdlICh2b2ljZXhtbCkgMy4wIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9XRC12b2ljZXhtbDMwLTIwMTAxMjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBWb2ljZSBFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoVm9pY2VYTUwpIDMuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlZvaWNlICBFeHRlbnNpYmxlICBNYXJrdXAgIExhbmd1YWdlICAoVm9pY2VYTUwpJm5ic3A7My4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMi0xNiAtIDxhIHRpdGxlPSJWb2ljZSBFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoVm9pY2VYTUwpIDMuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9pY2V4bWwzMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IE1jR2xhc2hhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBCdXJuZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFodWwgQWtvbGthcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJKIEF1YnVybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhb2xvIEJhZ2dpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQm9kZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVycnkgQ2FydGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFuZ2VzaCBEZXNobXVraAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgT3NocnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZW5uZXRoIFJlaG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WHUgWWFuZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pbGFuIFlvdW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFmYWggSG9zbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4aHRtbCByb2xlIGF0dHJpYnV0ZSBtb2R1bGUiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS14aHRtbC1yb2xlLTIwMTAxMjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTCBSb2xlIEF0dHJpYnV0ZSBNb2R1bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YSFRNTCBSb2xlIEF0dHJpYnV0ZSBNb2R1bGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhIVE1MMiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdG9jb2xzIGFuZCBGb3JtYXRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMi0xNiAtIDxhIHRpdGxlPSJYSFRNTCBSb2xlIEF0dHJpYnV0ZSBNb2R1bGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hodG1sLXJvbGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEJpcmJlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFuZSBNY0NhcnJvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBQZW1iZXJ0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ULlYuIFJhbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBTY2h3ZXJkdGZlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhodG1sIGFjY2VzcyBtb2R1bGUiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGh0bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS14aHRtbC1hY2Nlc3MtMjAxMDEyMTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhIVE1MIEFjY2VzcyBNb2R1bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YSFRNTCBBY2Nlc3MgTW9kdWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE2IC0gPGEgdGl0bGU9IlhIVE1MIEFjY2VzcyBNb2R1bGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hodG1sLWFjY2VzcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgQmlyYmVjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYW5lIE1jQ2Fycm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmVuIFBlbWJlcnRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlQuVi4gUmFtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFNjaHdlcmR0ZmVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4aHRtbOKEoiAyLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS14aHRtbDItMjAxMDEyMTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhIVE1M4oSiIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhIVE1M4oSiJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE2IC0gPGEgdGl0bGU9IlhIVE1M4oSiIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveGh0bWwyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBCaXJiZWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya3VzIEd5bGxpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TaGFuZSBNY0NhcnJvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBQZW1iZXJ0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25ueSBBeGVsc3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2FoIER1Ymlua28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXRoIEVwcGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzYXlhc3UgSXNoaWthd2EKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bbm4gTmF2YXJybwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhxdWVyeSAxLjA6IGFuIHhtbCBxdWVyeSBsYW5ndWFnZSAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMteHF1ZXJ5LTIwMTAxMjE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgMS4wOiBBbiBYTUwgUXVlcnkgTGFuZ3VhZ2UgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAxLjA6IEFuIFhNTCBRdWVyeSBMYW5ndWFnZSAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE0IC0gPGEgdGl0bGU9IlhRdWVyeSAxLjA6IEFuIFhNTCBRdWVyeSBMYW5ndWFnZSAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBCb2FnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uIENoYW1iZXJsaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ5IEZlcm5hbmRlegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbGEgRmxvcmVzY3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBSb2JpZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplcm9tZSBTaW1lb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBwYXRoIGxhbmd1YWdlICh4cGF0aCkgMi4wIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL1JFQy14cGF0aDIwLTIwMTAxMjE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgUGF0aCBMYW5ndWFnZSAoWFBhdGgpIDIuMCAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFBhdGggTGFuZ3VhZ2UgKFhQYXRoKSAyLjAgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMi0xNCAtIDxhIHRpdGxlPSJYTUwgUGF0aCBMYW5ndWFnZSAoWFBhdGgpIDIuMCAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aDIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kZXJzIEJlcmdsdW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2NvdHQgQm9hZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbiBDaGFtYmVybGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyeSBGZXJuYW5kZXoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVyb21lIFNpbWVvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHNsdCAyLjAgYW5kIHhxdWVyeSAxLjAgc2VyaWFsaXphdGlvbiAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMteHNsdC14cXVlcnktc2VyaWFsaXphdGlvbi0yMDEwMTIxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFNMVCAyLjAgYW5kIFhRdWVyeSAxLjAgU2VyaWFsaXphdGlvbiAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFNMVCAyLjAgYW5kIFhRdWVyeSAxLjAgU2VyaWFsaXphdGlvbiAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE0IC0gPGEgdGl0bGU9IlhTTFQgMi4wIGFuZCBYUXVlcnkgMS4wIFNlcmlhbGl6YXRpb24gKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsdC14cXVlcnktc2VyaWFsaXphdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IEJvYWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvYW5uZSBUb25nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVucnkgWm9uZ2FybwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtb2JpbGUgd2ViIGFwcGxpY2F0aW9uIGJlc3QgcHJhY3RpY2VzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMtbXdhYnAtMjAxMDEyMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vYmlsZSBXZWIgQXBwbGljYXRpb24gQmVzdCBQcmFjdGljZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Nb2JpbGUgV2ViIEFwcGxpY2F0aW9uIEJlc3QgUHJhY3RpY2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIEJlc3QgUHJhY3RpY2VzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMi0xNCAtIDxhIHRpdGxlPSJNb2JpbGUgV2ViIEFwcGxpY2F0aW9uIEJlc3QgUHJhY3RpY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9td2FicCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkYW0gQ29ubm9ycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyeWFuIFN1bGxpdmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhxdWVyeSAxLjAgYW5kIHhwYXRoIDIuMCBmb3JtYWwgc2VtYW50aWNzIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL1JFQy14cXVlcnktc2VtYW50aWNzLTIwMTAxMjE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgMS4wIGFuZCBYUGF0aCAyLjAgRm9ybWFsIFNlbWFudGljcyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFF1ZXJ5IDEuMCBhbmQgWFBhdGggMi4wIEZvcm1hbCBTZW1hbnRpY3MgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMi0xNCAtIDxhIHRpdGxlPSJYUXVlcnkgMS4wIGFuZCBYUGF0aCAyLjAgRm9ybWFsIFNlbWFudGljcyAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnktc2VtYW50aWNzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVuaXNlIERyYXBlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgRHljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIEZhbmtoYXVzZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ5IEZlcm5hbmRlegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S3Jpc3RvZmZlciBSb3NlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBSeXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZXJvbWUgU2ltZW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbGlwIFdhZGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHN5bnRheCBmb3IgeHF1ZXJ5IDEuMCAoeHF1ZXJ5eCkgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvUkVDLXhxdWVyeXgtMjAxMDEyMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTeW50YXggZm9yIFhRdWVyeSAxLjAgKFhRdWVyeVgpIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgU3ludGF4IGZvciBYUXVlcnkgMS4wIChYUXVlcnlYKSAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE0IC0gPGEgdGl0bGU9IlhNTCBTeW50YXggZm9yIFhRdWVyeSAxLjAgKFhRdWVyeVgpIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeXgiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KaW0gTWVsdG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3VicmFtYW5pYW4gTXVyYWxpZGhhcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHF1ZXJ5IDEuMCBhbmQgeHBhdGggMi4wIGRhdGEgbW9kZWwgKHhkbSkgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvUkVDLXhwYXRoLWRhdGFtb2RlbC0yMDEwMTIxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFF1ZXJ5IDEuMCBhbmQgWFBhdGggMi4wIERhdGEgTW9kZWwgKFhETSkgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAxLjAgYW5kIFhQYXRoIDIuMCBEYXRhIE1vZGVsIChYRE0pIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMTItMTQgLSA8YSB0aXRsZT0iWFF1ZXJ5IDEuMCBhbmQgWFBhdGggMi4wIERhdGEgTW9kZWwgKFhETSkgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHBhdGgtZGF0YW1vZGVsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kZXJzIEJlcmdsdW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyeSBGZXJuYW5kZXoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bc2hvayBNYWxob3RyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIE1hcnNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFydG9uIE5hZ3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhxdWVyeSAxLjAgYW5kIHhwYXRoIDIuMCBmdW5jdGlvbnMgYW5kIG9wZXJhdG9ycyAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMteHBhdGgtZnVuY3Rpb25zLTIwMTAxMjE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUXVlcnkgMS4wIGFuZCBYUGF0aCAyLjAgRnVuY3Rpb25zIGFuZCBPcGVyYXRvcnMgKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhRdWVyeSAxLjAgYW5kIFhQYXRoIDIuMCBGdW5jdGlvbnMgYW5kIE9wZXJhdG9ycyAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEyLTE0IC0gPGEgdGl0bGU9IlhRdWVyeSAxLjAgYW5kIFhQYXRoIDIuMCBGdW5jdGlvbnMgYW5kIE9wZXJhdG9ycyAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aC1mdW5jdGlvbnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bc2hvayBNYWxob3RyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkppbSBNZWx0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtheQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzcWwgZGF0YWJhc2UiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS13ZWJkYXRhYmFzZS0yMDEwMTExOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNRTCBEYXRhYmFzZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTUUwgRGF0YWJhc2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPihoaXN0b3JpY2FsKSBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0xMS0xOCAtIDxhIHRpdGxlPSJXZWIgU1FMIERhdGFiYXNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJkYXRhYmFzZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBIaWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFzc29jaWF0aW5nIHN0eWxlIHNoZWV0cyB3aXRoIHhtbCBkb2N1bWVudHMgMS4wIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJjc3MgeG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMteG1sLXN0eWxlc2hlZXQtMjAxMDEwMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFzc29jaWF0aW5nIFN0eWxlIFNoZWV0cyB3aXRoIFhNTCBkb2N1bWVudHMgMS4wIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Bc3NvY2lhdGluZyBTdHlsZSBTaGVldHMgd2l0aCBYTUwgZG9jdW1lbnRzIDEuMCAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMTAtMjggLSA8YSB0aXRsZT0iQXNzb2NpYXRpbmcgU3R5bGUgU2hlZXRzIHdpdGggWE1MIGRvY3VtZW50cyAxLjAgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLXN0eWxlc2hlZXQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW1lcyBDbGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNpbW9uIFBpZXRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yeSBUaG9tcHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imd1aWRlbGluZXMgZm9yIHdlYiBjb250ZW50IHRyYW5zZm9ybWF0aW9uIHByb3hpZXMgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtY3QtZ3VpZGVsaW5lcy0yMDEwMTAyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR3VpZGVsaW5lcyBmb3IgV2ViIENvbnRlbnQgVHJhbnNmb3JtYXRpb24gUHJveGllcyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HdWlkZWxpbmVzICBmb3IgIFdlYiAgQ29udGVudCAgVHJhbnNmb3JtYXRpb24gIFByb3hpZXMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1vYmlsZSBXZWIgQmVzdCBQcmFjdGljZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTEwLTI2IC0gPGEgdGl0bGU9Ikd1aWRlbGluZXMgZm9yIFdlYiBDb250ZW50IFRyYW5zZm9ybWF0aW9uIFByb3hpZXMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jdC1ndWlkZWxpbmVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm8gUmFiaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNwZWVjaCBzeW50aGVzaXMgbWFya3VwIGxhbmd1YWdlIChzc21sKSB2ZXJzaW9uIDEuMSIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMtc3BlZWNoLXN5bnRoZXNpczExLTIwMTAwOTA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTcGVlY2ggU3ludGhlc2lzIE1hcmt1cCBMYW5ndWFnZSAoU1NNTCkgVmVyc2lvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TcGVlY2ggIFN5bnRoZXNpcyAgTWFya3VwICBMYW5ndWFnZSAgKFNTTUwpICBWZXJzaW9uJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wOS0wNyAtIDxhIHRpdGxlPSJTcGVlY2ggU3ludGhlc2lzIE1hcmt1cCBMYW5ndWFnZSAoU1NNTCkgVmVyc2lvbiAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NwZWVjaC1zeW50aGVzaXMxMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBCdXJuZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WmhpIFdlaSBTaHVhbmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndpY2QgbW9iaWxlIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9OT1RFLVdJQ0RNb2JpbGUtMjAxMDA4MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdJQ0QgTW9iaWxlIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldJQ0QgIE1vYmlsZSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q29tcG91bmQgRG9jdW1lbnQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDgtMTkgLSA8YSB0aXRsZT0iV0lDRCBNb2JpbGUgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XSUNETW9iaWxlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGltdXIgTWVocnZhcnoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYXNzZSBQYWp1bmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVsaWVuIFF1aW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEFwcGVscXVpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbXBvdW5kIGRvY3VtZW50IGJ5IHJlZmVyZW5jZSBmcmFtZXdvcmsgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtQ0RSLTIwMTAwODE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDb21wb3VuZCBEb2N1bWVudCBieSBSZWZlcmVuY2UgRnJhbWV3b3JrIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbXBvdW5kICBEb2N1bWVudCAgYnkgIFJlZmVyZW5jZSAgRnJhbWV3b3JrJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Db21wb3VuZCBEb2N1bWVudCBGb3JtYXRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wOC0xOSAtIDxhIHRpdGxlPSJDb21wb3VuZCBEb2N1bWVudCBieSBSZWZlcmVuY2UgRnJhbWV3b3JrIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvQ0RSIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGltdXIgTWVocnZhcnoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYXNzZSBQYWp1bmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVsaWVuIFF1aW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEFwcGVscXVpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndpY2QgY29yZSAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS1XSUNELTIwMTAwODE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXSUNEIENvcmUgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V0lDRCAgQ29yZSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q29tcG91bmQgRG9jdW1lbnQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDgtMTkgLSA8YSB0aXRsZT0iV0lDRCBDb3JlIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0lDRCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRpbXVyIE1laHJ2YXJ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGFzc2UgUGFqdW5lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1bGllbiBRdWludAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBBcHBlbHF1aXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3aWNkIGZ1bGwgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtV0lDREZ1bGwtMjAxMDA4MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdJQ0QgRnVsbCAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XSUNEICBGdWxsJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Db21wb3VuZCBEb2N1bWVudCBGb3JtYXRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wOC0xOSAtIDxhIHRpdGxlPSJXSUNEIEZ1bGwgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XSUNERnVsbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRpbXVyIE1laHJ2YXJ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGFzc2UgUGFqdW5lbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1bGllbiBRdWludAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBBcHBlbHF1aXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZWN1cml0eSBjb250ZXh0OiB1c2VyIGludGVyZmFjZSBndWlkZWxpbmVzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMtd3NjLXVpLTIwMTAwODEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VjdXJpdHkgQ29udGV4dDogVXNlciBJbnRlcmZhY2UgR3VpZGVsaW5lcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZWN1cml0eSBDb250ZXh0OiBVc2VyIEludGVyZmFjZSBHdWlkZWxpbmVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VjdXJpdHkgQ29udGV4dCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDgtMTIgLSA8YSB0aXRsZT0iV2ViIFNlY3VyaXR5IENvbnRleHQ6IFVzZXIgSW50ZXJmYWNlIEd1aWRlbGluZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzYy11aSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRob21hcyBSb2Vzc2xlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuaWwgU2FsZGhhbmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIHJlc291cmNlIHRyYW5zZmVyICh3cy1ydCkiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS13cy1yZXNvdXJjZS10cmFuc2Zlci0yMDEwMDcxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIFJlc291cmNlIFRyYW5zZmVyIChXUy1SVCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgUmVzb3VyY2UgVHJhbnNmZXIgKFdTLVJUKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFJlc291cmNlIEFjY2VzcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDctMTMgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIFJlc291cmNlIFRyYW5zZmVyIChXUy1SVCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLXJlc291cmNlLXRyYW5zZmVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91ZyBEYXZpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2F0eSBXYXJyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V3UgQ2hvdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGVsaXZlcnkgY29udGV4dDogY2xpZW50IGludGVyZmFjZXMgKGRjY2kpIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9OT1RFLURQRi0yMDEwMDYyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGVsaXZlcnkgQ29udGV4dDogQ2xpZW50IEludGVyZmFjZXMgKERDQ0kpIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRlbGl2ZXJ5ICBDb250ZXh0OiAgQ2xpZW50ICBJbnRlcmZhY2VzICAoRENDSSkmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlViaXF1aXRvdXMgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDYtMjkgLSA8YSB0aXRsZT0iRGVsaXZlcnkgQ29udGV4dDogQ2xpZW50IEludGVyZmFjZXMgKERDQ0kpIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvRFBGIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2VpdGggV2F0ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFmYWggSG9zbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmFnZ2V0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhaWxlc2ggU2F0aGlzaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgV29tZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXggRnJvdW1lbnRpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJoeXMgTGV3aXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZWl0aCBSb3NlbmJsYXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRldmljZSBpbmRlcGVuZGVudCBhdXRob3JpbmcgbGFuZ3VhZ2UgKGRpYWwpIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtZGlhbC0yMDEwMDYyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGV2aWNlIEluZGVwZW5kZW50IEF1dGhvcmluZyBMYW5ndWFnZSAoRElBTCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZpY2UgSW5kZXBlbmRlbnQgQXV0aG9yaW5nIExhbmd1YWdlIChESUFMKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VWJpcXVpdG91cyBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wNi0yOSAtIDxhIHRpdGxlPSJEZXZpY2UgSW5kZXBlbmRlbnQgQXV0aG9yaW5nIExhbmd1YWdlIChESUFMKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGlhbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktldmluIFNtaXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRlbGl2ZXJ5IGNvbnRleHQgb250b2xvZ3kiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS1kY29udG9sb2d5LTIwMTAwNjI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEZWxpdmVyeSBDb250ZXh0IE9udG9sb2d5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGVsaXZlcnkgQ29udGV4dCBPbnRvbG9neTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VWJpcXVpdG91cyBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wNi0yOSAtIDxhIHRpdGxlPSJEZWxpdmVyeSBDb250ZXh0IE9udG9sb2d5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kY29udG9sb2d5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZSBNYW51ZWwgQ2FudGVyYSBGb25zZWNhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Umh5cyBMZXdpcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkaWFsIHBhcnQgMDogcHJpbWVyIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtZGlhbC1wcmltZXItMjAxMDA2MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERJQUwgUGFydCAwOiBQcmltZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5ESUFMIFBhcnQgMDogUHJpbWVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VYmlxdWl0b3VzIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTA2LTI5IC0gPGEgdGl0bGU9IkRJQUwgUGFydCAwOiBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RpYWwtcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2V2aW4gU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY29udGVudCBzZWxlY3Rpb24gZm9yIGRldmljZSBpbmRlcGVuZGVuY2UgKGRpc2VsZWN0KSAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS1jc2VsZWN0aW9uLTIwMTAwNjI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDb250ZW50IFNlbGVjdGlvbiBmb3IgRGV2aWNlIEluZGVwZW5kZW5jZSAoRElTZWxlY3QpIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbnRlbnQgIFNlbGVjdGlvbiAgZm9yICBEZXZpY2UgIEluZGVwZW5kZW5jZSAgKERJU2VsZWN0KSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VWJpcXVpdG91cyBXZWIgQXBwbGljYXRpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wNi0yOSAtIDxhIHRpdGxlPSJDb250ZW50IFNlbGVjdGlvbiBmb3IgRGV2aWNlIEluZGVwZW5kZW5jZSAoRElTZWxlY3QpIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3NlbGVjdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJoeXMgTGV3aXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2xhbmQgTWVycmljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1heCBGcm91bWVudGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbnRlbnQgc2VsZWN0aW9uIHByaW1lciAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvTk9URS1jc2VsZWN0aW9uLXByaW1lci0yMDEwMDYyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29udGVudCBTZWxlY3Rpb24gUHJpbWVyIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbnRlbnQgIFNlbGVjdGlvbiAgUHJpbWVyJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VYmlxdWl0b3VzIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTA2LTI5IC0gPGEgdGl0bGU9IkNvbnRlbnQgU2VsZWN0aW9uIFByaW1lciAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NzZWxlY3Rpb24tcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Umh5cyBMZXdpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvbGFuZCBNZXJyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY29tcG9zaXRlIGNhcGFiaWxpdHkvcHJlZmVyZW5jZSBwcm9maWxlcyAoY2MvcHApOiBzdHJ1Y3R1cmUgYW5kIHZvY2FidWxhcmllcyAyLjAiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtQ0NQUC1zdHJ1Y3Qtdm9jYWIyLTIwMTAwNjI5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDb21wb3NpdGUgQ2FwYWJpbGl0eS9QcmVmZXJlbmNlIFByb2ZpbGVzIChDQy9QUCk6IFN0cnVjdHVyZSBhbmQgVm9jYWJ1bGFyaWVzIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbXBvc2l0ZSAgQ2FwYWJpbGl0eS9QcmVmZXJlbmNlICBQcm9maWxlcyAgKENDL1BQKTogIFN0cnVjdHVyZSAgYW5kICBWb2NhYnVsYXJpZXMmbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlViaXF1aXRvdXMgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDYtMjkgLSA8YSB0aXRsZT0iQ29tcG9zaXRlIENhcGFiaWxpdHkvUHJlZmVyZW5jZSBQcm9maWxlcyAoQ0MvUFApOiBTdHJ1Y3R1cmUgYW5kIFZvY2FidWxhcmllcyAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NDUFAtc3RydWN0LXZvY2FiMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkPDqWRyaWMgS2lzcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRlbGl2ZXJ5IGNvbnRleHQ6IHhwYXRoIGFjY2VzcyBmdW5jdGlvbnMgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtY3NlbGVjdGlvbi14YWYtMjAxMDA2MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERlbGl2ZXJ5IENvbnRleHQ6IFhQYXRoIEFjY2VzcyBGdW5jdGlvbnMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGVsaXZlcnkgIENvbnRleHQ6ICBYUGF0aCAgQWNjZXNzICBGdW5jdGlvbnMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlViaXF1aXRvdXMgV2ViIEFwcGxpY2F0aW9ucyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDYtMjkgLSA8YSB0aXRsZT0iRGVsaXZlcnkgQ29udGV4dDogWFBhdGggQWNjZXNzIEZ1bmN0aW9ucyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NzZWxlY3Rpb24teGFmIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Umh5cyBMZXdpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvbGFuZCBNZXJyaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgYXBpIHByaXZhY3kgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9OT1RFLWRhcC1wcml2YWN5LXJlcXMtMjAxMDA2MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERldmljZSBBUEkgUHJpdmFjeSBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZpY2UgQVBJIFByaXZhY3kgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5EZXZpY2VzIGFuZCBTZW5zb3JzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wNi0yOSAtIDxhIHRpdGxlPSJEZXZpY2UgQVBJIFByaXZhY3kgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kYXAtcHJpdmFjeS1yZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxpc3NhIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIE1vcnJpcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGFuZCB1c2UgY2FzZXMgZm9yIHhzbHQgMi4xIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL1dELXhzbHQtMjEtcmVxdWlyZW1lbnRzLTIwMTAwNjEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlcyBmb3IgWFNMVCAyLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgIGFuZCAgVXNlICBDYXNlcyAgZm9yICBYU0xUJm5ic3A7Mi4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wNi0xMCAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlcyBmb3IgWFNMVCAyLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hzbHQtMjEtcmVxdWlyZW1lbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGV0ciBDaW1wcmljaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyBmb3IgbWFwcGluZyByZWxhdGlvbmFsIGRhdGFiYXNlcyB0byByZGYiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL1dELXJkYjJyZGYtdWNyLTIwMTAwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3IgTWFwcGluZyBSZWxhdGlvbmFsIERhdGFiYXNlcyB0byBSREYgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3IgTWFwcGluZyBSZWxhdGlvbmFsIERhdGFiYXNlcyB0byBSREY8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJEQjJSREYgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTA2LTA4IC0gPGEgdGl0bGU9IlVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvciBNYXBwaW5nIFJlbGF0aW9uYWwgRGF0YWJhc2VzIHRvIFJERiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRiMnJkZi11Y3IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIFBydWQmIzAzOTtob21tZWF1eAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgSGF1c2VuYmxhcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHByb2M6IGFuIHhtbCBwaXBlbGluZSBsYW5ndWFnZSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTAvUkVDLXhwcm9jLTIwMTAwNTExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUHJvYzogQW4gWE1MIFBpcGVsaW5lIExhbmd1YWdlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFByb2M6IEFuIFhNTCBQaXBlbGluZSBMYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb2Nlc3NpbmcgTW9kZWwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTA1LTExIC0gPGEgdGl0bGU9IlhQcm9jOiBBbiBYTUwgUGlwZWxpbmUgTGFuZ3VhZ2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwcm9jIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleCBNacWCb3dza2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yeSBUaG9tcHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgbGlua2luZyBsYW5ndWFnZSAoeGxpbmspIHZlcnNpb24gMS4xIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9SRUMteGxpbmsxMS0yMDEwMDUwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIExpbmtpbmcgTGFuZ3VhZ2UgKFhMaW5rKSBWZXJzaW9uIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCAgTGlua2luZyAgTGFuZ3VhZ2UgIChYTGluaykgIFZlcnNpb24mbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wNS0wNiAtIDxhIHRpdGxlPSJYTUwgTGlua2luZyBMYW5ndWFnZSAoWExpbmspIFZlcnNpb24gMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bGluazExIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmVuIERlUm9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV2ZSBNYWxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIE9yY2hhcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWJjZ20gMi4xIiBkYXRhLXRhZz0iZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL1JFQy13ZWJjZ20yMS0yMDEwMDMwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViQ0dNIDIuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYkNHTSZuYnNwOzIuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViQ0dNIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wMy0wMSAtIDxhIHRpdGxlPSJXZWJDR00gMi4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJjZ20yMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlbm9pdCBCZXphaXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TG9mdG9uIEhlbmRlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHNpZ25hdHVyZSB0cmFuc2Zvcm0gc2ltcGxpZmljYXRpb246IHJlcXVpcmVtZW50cyBhbmQgZGVzaWduIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9OT1RFLXhtbGRzaWctc2ltcGxpZnktMjAxMDAyMDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTaWduYXR1cmUgVHJhbnNmb3JtIFNpbXBsaWZpY2F0aW9uOiBSZXF1aXJlbWVudHMgYW5kIERlc2lnbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBTaWduYXR1cmUgVHJhbnNmb3JtIFNpbXBsaWZpY2F0aW9uOiBSZXF1aXJlbWVudHMgYW5kIERlc2lnbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDItMDQgLSA8YSB0aXRsZT0iWE1MIFNpZ25hdHVyZSBUcmFuc2Zvcm0gU2ltcGxpZmljYXRpb246IFJlcXVpcmVtZW50cyBhbmQgRGVzaWduIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxkc2lnLXNpbXBsaWZ5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlByYXRpayBEYXR0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhIG1ldGhvZCBmb3Igd3JpdGluZyB0ZXN0YWJsZSBjb25mb3JtYW5jZSByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDEwL05PVEUtdGVzdC1tZXRob2RvbG9neS0yMDEwMDEyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQSBNZXRob2QgZm9yIFdyaXRpbmcgVGVzdGFibGUgQ29uZm9ybWFuY2UgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QSBNZXRob2QgZm9yIFdyaXRpbmcgVGVzdGFibGUgQ29uZm9ybWFuY2UgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIFRlc3QgU3VpdGVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAxMC0wMS0yOCAtIDxhIHRpdGxlPSJBIE1ldGhvZCBmb3IgV3JpdGluZyBUZXN0YWJsZSBDb25mb3JtYW5jZSBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Rlc3QtbWV0aG9kb2xvZ3kiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb21pbmlxdWUgSGF6YcOrbC1NYXNzaWV1eAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmNvcyBDYWNlcmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGFycWwgMS4xIHByb3BlcnR5IHBhdGhzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9XRC1zcGFycWwxMS1wcm9wZXJ0eS1wYXRocy0yMDEwMDEyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1BBUlFMIDEuMSBQcm9wZXJ0eSBQYXRocyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCAxLjEgUHJvcGVydHkgUGF0aHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNQQVJRTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMTAtMDEtMjYgLSA8YSB0aXRsZT0iU1BBUlFMIDEuMSBQcm9wZXJ0eSBQYXRocyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3BhcnFsMTEtcHJvcGVydHktcGF0aHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmR5IFNlYWJvcm5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVzZSBjYXNlcyBhbmQgcmVxdWlyZW1lbnRzIGZvciBvbnRvbG9neSBhbmQgYXBpIGZvciBtZWRpYSByZXNvdXJjZSAxLjAiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9XRC1tZWRpYS1hbm5vdC1yZXFzLTIwMTAwMTIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3IgT250b2xvZ3kgYW5kIEFQSSBmb3IgTWVkaWEgUmVzb3VyY2UgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VXNlICBDYXNlcyAgYW5kICBSZXF1aXJlbWVudHMgIGZvciAgT250b2xvZ3kgIGFuZCAgQVBJICBmb3IgIE1lZGlhICBSZXNvdXJjZSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWVkaWEgQW5ub3RhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTAxLTIxIC0gPGEgdGl0bGU9IlVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvciBPbnRvbG9neSBhbmQgQVBJIGZvciBNZWRpYSBSZXNvdXJjZSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21lZGlhLWFubm90LXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Xb25zdWsgTGVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9iaWFzIELDvHJnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GZWxpeCBTYXNha2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ww6lyb25pcXVlIE1hbGFpc8OpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3M2MgeG1sIHNjaGVtYSBkZWZpbml0aW9uIGxhbmd1YWdlICh4c2QpOiBjb21wb25lbnQgZGVzaWduYXRvcnMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAxMC9DUi14bWxzY2hlbWEtcmVmLTIwMTAwMTE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXM0MgWE1MIFNjaGVtYSBEZWZpbml0aW9uIExhbmd1YWdlIChYU0QpOiBDb21wb25lbnQgRGVzaWduYXRvcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XM0MgWE1MIFNjaGVtYSBEZWZpbml0aW9uIExhbmd1YWdlIChYU0QpOiBDb21wb25lbnQgRGVzaWduYXRvcnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTY2hlbWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDEwLTAxLTE5IC0gPGEgdGl0bGU9IlczQyBYTUwgU2NoZW1hIERlZmluaXRpb24gTGFuZ3VhZ2UgKFhTRCk6IENvbXBvbmVudCBEZXNpZ25hdG9ycyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sc2NoZW1hLXJlZiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnkgSG9sc3RlZ2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bc2lyIFZlZGFtdXRodQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyBmb3IgbWVkaWEgZnJhZ21lbnRzIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvV0QtbWVkaWEtZnJhZ3MtcmVxcy0yMDA5MTIxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMgZm9yIE1lZGlhIEZyYWdtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVzZSBjYXNlcyBhbmQgcmVxdWlyZW1lbnRzIGZvciBNZWRpYSBGcmFnbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1lZGlhIEZyYWdtZW50cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMTItMTcgLSA8YSB0aXRsZT0iVXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMgZm9yIE1lZGlhIEZyYWdtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbWVkaWEtZnJhZ3MtcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhcGhhw6tsIFRyb25jeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWsgTWFubmVucwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idXNlIGNhc2VzIGZvciBwb3NzaWJsZSBmdXR1cmUgZW1tYSBmZWF0dXJlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1lbW1hLXVzZWNhc2VzLTIwMDkxMjE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVc2UgQ2FzZXMgZm9yIFBvc3NpYmxlIEZ1dHVyZSBFTU1BIEZlYXR1cmVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VXNlIENhc2VzIGZvciBQb3NzaWJsZSBGdXR1cmUgRU1NQSBGZWF0dXJlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMTItMTUgLSA8YSB0aXRsZT0iVXNlIENhc2VzIGZvciBQb3NzaWJsZSBGdXR1cmUgRU1NQSBGZWF0dXJlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZW1tYS11c2VjYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgSm9obnN0b24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1vYmlsZSB3ZWIgZm9yIHNvY2lhbCBkZXZlbG9wbWVudCByb2FkbWFwIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L05PVEUtbXc0ZC1yb2FkbWFwLTIwMDkxMjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNb2JpbGUgV2ViIGZvciBTb2NpYWwgRGV2ZWxvcG1lbnQgUm9hZG1hcCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1vYmlsZSBXZWIgZm9yIFNvY2lhbCBEZXZlbG9wbWVudCBSb2FkbWFwPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIEZvciBTb2NpYWwgRGV2ZWxvcG1lbnQgKE1XNEQpIEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMTItMDggLSA8YSB0aXRsZT0iTW9iaWxlIFdlYiBmb3IgU29jaWFsIERldmVsb3BtZW50IFJvYWRtYXAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L213NGQtcm9hZG1hcCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0w6lwaGFuZSBCb3llcmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibmFtZXNwYWNlcyBpbiB4bWwgMS4wICh0aGlyZCBlZGl0aW9uKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLXhtbC1uYW1lcy0yMDA5MTIwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTmFtZXNwYWNlcyBpbiBYTUwgMS4wIChUaGlyZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk5hbWVzcGFjZXMgaW4gWE1MIDEuMCAoVGhpcmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0xMi0wOCAtIDxhIHRpdGxlPSJOYW1lc3BhY2VzIGluIFhNTCAxLjAgKFRoaXJkIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtbmFtZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaW0gQnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgSG9sbGFuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IExheW1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgVG9iaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yeSBUaG9tcHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBpY3MgMS4xIHJhdGluZyBzZXJ2aWNlcyBhbmQgcmF0aW5nIHN5c3RlbXMgLS0gYW5kIHRoZWlyIG1hY2hpbmUgcmVhZGFibGUgZGVzY3JpcHRpb25zIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9SRUMtUElDUy1zZXJ2aWNlcy0yMDA5MTEyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUElDUyAxLjEgUmF0aW5nIFNlcnZpY2VzIGFuZCBSYXRpbmcgU3lzdGVtcyAtLSBhbmQgVGhlaXIgTWFjaGluZSBSZWFkYWJsZSBEZXNjcmlwdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QSUNTIDEuMSBSYXRpbmcgU2VydmljZXMgYW5kIFJhdGluZyBTeXN0ZW1zIC0tIGFuZCBUaGVpciBNYWNoaW5lIFJlYWRhYmxlIERlc2NyaXB0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMTEtMjQgLSA8YSB0aXRsZT0iUElDUyAxLjEgUmF0aW5nIFNlcnZpY2VzIGFuZCBSYXRpbmcgU3lzdGVtcyAtLSBhbmQgVGhlaXIgTWFjaGluZSBSZWFkYWJsZSBEZXNjcmlwdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1JFQy1QSUNTLXNlcnZpY2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIE1pbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgUmVzbmljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIFNpbmdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwaWNzcnVsZXMgMS4xIHNwZWNpZmljYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1JFQy1QSUNTUnVsZXMtMjAwOTExMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBJQ1NSdWxlcyAxLjEgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBJQ1NSdWxlcyAxLjEgU3BlY2lmaWNhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMTEtMjQgLSA8YSB0aXRsZT0iUElDU1J1bGVzIDEuMSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9SRUMtUElDU1J1bGVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXN0b3BoZXIgRXZhbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4IEhvcG1hbm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gUHJlc2xlck1hcnNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBSZXNuaWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBpY3Mgc2lnbmVkIGxhYmVscyAoZHNpZykgMS4wIHNwZWNpZmljYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1JFQy1EU2lnLWxhYmVsLTIwMDkxMTI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQSUNTIFNpZ25lZCBMYWJlbHMgKERTaWcpIDEuMCBTcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UElDUyBTaWduZWQgTGFiZWxzIChEU2lnKSAxLjAgU3BlY2lmaWNhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMTEtMjQgLSA8YSB0aXRsZT0iUElDUyBTaWduZWQgTGFiZWxzIChEU2lnKSAxLjAgU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUkVDLURTaWctbGFiZWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ZYW5naHVhIENodQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWxpcCBEZXNBdXRlbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmlhbiBMYU1hY2NoaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBMaXBwCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InBpY3MgMS4xIGxhYmVsIGRpc3RyaWJ1dGlvbiAtLSBsYWJlbCBzeW50YXggYW5kIGNvbW11bmljYXRpb24gcHJvdG9jb2xzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9SRUMtUElDUy1sYWJlbHMtMjAwOTExMjQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFBJQ1MgMS4xIExhYmVsIERpc3RyaWJ1dGlvbiAtLSBMYWJlbCBTeW50YXggYW5kIENvbW11bmljYXRpb24gUHJvdG9jb2xzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UElDUyAxLjEgTGFiZWwgRGlzdHJpYnV0aW9uIC0tIExhYmVsIFN5bnRheCBhbmQgQ29tbXVuaWNhdGlvbiBQcm90b2NvbHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTExLTI0IC0gPGEgdGl0bGU9IlBJQ1MgMS4xIExhYmVsIERpc3RyaWJ1dGlvbiAtLSBMYWJlbCBTeW50YXggYW5kIENvbW11bmljYXRpb24gUHJvdG9jb2xzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9SRUMtUElDUy1sYWJlbHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaW0gS3JhdXNrb3BmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIE1pbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgUmVzbmljawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldpbiBUcmVlc2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbnRlbnQgdHJhbnNmb3JtYXRpb24gbGFuZHNjYXBlIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1jdC1sYW5kc2NhcGUtMjAwOTEwMjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbnRlbnQgVHJhbnNmb3JtYXRpb24gTGFuZHNjYXBlIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbnRlbnQgIFRyYW5zZm9ybWF0aW9uICBMYW5kc2NhcGUmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1vYmlsZSBXZWIgQmVzdCBQcmFjdGljZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTEwLTI3IC0gPGEgdGl0bGU9IkNvbnRlbnQgVHJhbnNmb3JtYXRpb24gTGFuZHNjYXBlIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY3QtbGFuZHNjYXBlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm8gUmFiaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXcgU3dhaW5zdG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aGUgc21sIHhsaW5rIHJlZmVyZW5jZSBzY2hlbWUiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L05PVEUtc21sLXhsaW5rLXJlZi1zY2hlbWUtMjAwOTEwMjMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRoZSBTTUwgWExpbmsgUmVmZXJlbmNlIFNjaGVtZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRoZSBTTUwgWExpbmsgUmVmZXJlbmNlIFNjaGVtZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VydmljZSBNb2RlbGluZyBMYW5ndWFnZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMTAtMjMgLSA8YSB0aXRsZT0iVGhlIFNNTCBYTGluayBSZWZlcmVuY2UgU2NoZW1lIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zbWwteGxpbmstcmVmLXNjaGVtZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlByYXR1bCBEdWJsaXNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGVuIENoYXJlc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WaXJnaW5pYSBTbWl0aAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VtYW50aWMgd2ViIGFwcGxpY2F0aW9ucyBpbiBuZXVyb21lZGljaW5lIChzd2FuKSBvbnRvbG9neSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1oY2xzLXN3YW4tMjAwOTEwMjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNlbWFudGljIFdlYiBBcHBsaWNhdGlvbnMgaW4gTmV1cm9tZWRpY2luZSAoU1dBTikgT250b2xvZ3kgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TZW1hbnRpYyBXZWIgQXBwbGljYXRpb25zIGluIE5ldXJvbWVkaWNpbmUgKFNXQU4pIE9udG9sb2d5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgSGVhbHRoIENhcmUgYW5kIExpZmUgU2NpZW5jZXMgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0xMC0yMCAtIDxhIHRpdGxlPSJTZW1hbnRpYyBXZWIgQXBwbGljYXRpb25zIGluIE5ldXJvbWVkaWNpbmUgKFNXQU4pIE9udG9sb2d5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9oY2xzLXN3YW4iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYW9sbyBDaWNjYXJlc2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN3YW4vc2lvYzogYWxpZ25tZW50IGJldHdlZW4gdGhlIHN3YW4gYW5kIHNpb2Mgb250b2xvZ2llcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1oY2xzLXN3YW5zaW9jLTIwMDkxMDIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTV0FOL1NJT0M6IEFsaWdubWVudCBCZXR3ZWVuIHRoZSBTV0FOIGFuZCBTSU9DIE9udG9sb2dpZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TV0FOL1NJT0M6IEFsaWdubWVudCBCZXR3ZWVuIHRoZSBTV0FOIGFuZCBTSU9DIE9udG9sb2dpZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBIZWFsdGggQ2FyZSBhbmQgTGlmZSBTY2llbmNlcyBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTEwLTIwIC0gPGEgdGl0bGU9IlNXQU4vU0lPQzogQWxpZ25tZW50IEJldHdlZW4gdGhlIFNXQU4gYW5kIFNJT0MgT250b2xvZ2llcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaGNscy1zd2Fuc2lvYyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXhhbmRyZSBQYXNzYW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGFvbG8gQ2ljY2FyZXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieGZvcm1zIDEuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLXhmb3Jtcy0yMDA5MTAyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWEZvcm1zIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhGb3JtcyZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Rm9ybXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTEwLTIwIC0gPGEgdGl0bGU9IlhGb3JtcyAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hmb3JtczExIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBCb3llcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzaW9jLCBzaW9jIHR5cGVzIGFuZCBoZWFsdGggY2FyZSBhbmQgbGlmZSBzY2llbmNlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1oY2xzLXNpb2MtMjAwOTEwMjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNJT0MsIFNJT0MgVHlwZXMgYW5kIEhlYWx0aCBDYXJlIGFuZCBMaWZlIFNjaWVuY2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U0lPQywgU0lPQyBUeXBlcyBhbmQgSGVhbHRoIENhcmUgYW5kIExpZmUgU2NpZW5jZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBIZWFsdGggQ2FyZSBhbmQgTGlmZSBTY2llbmNlcyBJbnRlcmVzdCBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTEwLTIwIC0gPGEgdGl0bGU9IlNJT0MsIFNJT0MgVHlwZXMgYW5kIEhlYWx0aCBDYXJlIGFuZCBMaWZlIFNjaWVuY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9oY2xzLXNpb2MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4YW5kcmUgUGFzc2FudAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuZGVkIGd1aWRlbGluZXMgZm9yIG1vYmlsZSB3ZWIgYmVzdCBwcmFjdGljZXMgMS4wIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLW13YnAtZ3VpZGVsaW5lcy0yMDA5MTAyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXh0ZW5kZWQgR3VpZGVsaW5lcyBmb3IgTW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FeHRlbmRlZCAgR3VpZGVsaW5lcyAgZm9yICBNb2JpbGUgIFdlYiAgQmVzdCAgUHJhY3RpY2VzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIEJlc3QgUHJhY3RpY2VzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0xMC0yMCAtIDxhIHRpdGxlPSJFeHRlbmRlZCBHdWlkZWxpbmVzIGZvciBNb2JpbGUgV2ViIEJlc3QgUHJhY3RpY2VzIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbXdicC1ndWlkZWxpbmVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2FpIFNjaGVwcGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgYXBpcyByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ3ZWJhcGkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L05PVEUtZGFwLWFwaS1yZXFzLTIwMDkxMDE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEZXZpY2UgQVBJcyBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZpY2UgQVBJcyBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZXMgYW5kIFNlbnNvcnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTEwLTE1IC0gPGEgdGl0bGU9IkRldmljZSBBUElzIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGFwLWFwaS1yZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iaW4gQmVyam9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIENvbG9tYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1heCBGcm91bWVudGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY2luIEhhbmNsaWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZXJlIEvDpHB5YWhvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2FuZ2NoYW4gTGVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnJ5YW4gU3VsbGl2YW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EenVuZyBUcmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0id2ViYXBpIj5XZWIgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyBjb2xvciAxLjIsIHBhcnQgMjogbGFuZ3VhZ2UiIGRhdGEtdGFnPSJncmFwaGljcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1TVkdDb2xvcjEyLTIwMDkxMDAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTVkcgQ29sb3IgMS4yLCBQYXJ0IDI6IExhbmd1YWdlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1ZHIENvbG9yIDEuMiwgUGFydCAyOiBMYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0xMC0wMSAtIDxhIHRpdGxlPSJTVkcgQ29sb3IgMS4yLCBQYXJ0IDI6IExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkdDb2xvcjEyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGlsbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW50aG9ueSBHcmFzc28KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3ZnIGNvbG9yIDEuMiwgcGFydCAxOiBwcmltZXIiIGRhdGEtdGFnPSJncmFwaGljcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1TVkdDb2xvclByaW1lcjEyLTIwMDkxMDAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTVkcgQ29sb3IgMS4yLCBQYXJ0IDE6IFByaW1lciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNWRyBDb2xvciAxLjIsIFBhcnQgMTogUHJpbWVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTEwLTAxIC0gPGEgdGl0bGU9IlNWRyBDb2xvciAxLjIsIFBhcnQgMTogUHJpbWVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkdDb2xvclByaW1lcjEyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGlsbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW50aG9ueSBHcmFzc28KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlcXVpcmVtZW50cyBmb3Igc3RyaW5nIGlkZW50aXR5IG1hdGNoaW5nIGFuZCBzdHJpbmcgaW5kZXhpbmciIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLWNoYXJyZXEtMjAwOTA5MTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgU3RyaW5nIElkZW50aXR5IE1hdGNoaW5nIGFuZCBTdHJpbmcgSW5kZXhpbmcgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgZm9yIFN0cmluZyBJZGVudGl0eSBNYXRjaGluZyBhbmQgU3RyaW5nIEluZGV4aW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDktMTUgLSA8YSB0aXRsZT0iUmVxdWlyZW1lbnRzIGZvciBTdHJpbmcgSWRlbnRpdHkgTWF0Y2hpbmcgYW5kIFN0cmluZyBJbmRleGluZyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2hhcnJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnRpbiBEw7xyc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm90b2NvbCBmb3Igd2ViIGRlc2NyaXB0aW9uIHJlc291cmNlcyAocG93ZGVyKTogdGVzdCBzdWl0ZSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L05PVEUtcG93ZGVyLXRlc3QtMjAwOTA5MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpOiBUZXN0IFN1aXRlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUik6IFRlc3QgU3VpdGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wOS0xMCAtIDxhIHRpdGxlPSJQcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKTogVGVzdCBTdWl0ZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcG93ZGVyLXRlc3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRvbmlzIEt1a3VyaWtvcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWwgQXJjaGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHVibGlzaGluZyBvcGVuIGdvdmVybm1lbnQgZGF0YSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1nb3YtZGF0YS0yMDA5MDkwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHVibGlzaGluZyBPcGVuIEdvdmVybm1lbnQgRGF0YSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlB1Ymxpc2hpbmcgT3BlbiBHb3Zlcm5tZW50IERhdGE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPmVHb3Zlcm5tZW50IEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDktMDggLSA8YSB0aXRsZT0iUHVibGlzaGluZyBPcGVuIEdvdmVybm1lbnQgRGF0YSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZ292LWRhdGEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQmVubmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkYW0gSGFydmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm90b2NvbCBmb3Igd2ViIGRlc2NyaXB0aW9uIHJlc291cmNlcyAocG93ZGVyKTogZGVzY3JpcHRpb24gcmVzb3VyY2VzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLXBvd2Rlci1kci0yMDA5MDkwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUik6IERlc2NyaXB0aW9uIFJlc291cmNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpOiBEZXNjcmlwdGlvbiBSZXNvdXJjZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wOS0wMSAtIDxhIHRpdGxlPSJQcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKTogRGVzY3JpcHRpb24gUmVzb3VyY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wb3dkZXItZHIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsIEFyY2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktldmluIFNtaXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVhIFBlcmVnbwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByb3RvY29sIGZvciB3ZWIgZGVzY3JpcHRpb24gcmVzb3VyY2VzIChwb3dkZXIpOiBmb3JtYWwgc2VtYW50aWNzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLXBvd2Rlci1mb3JtYWwtMjAwOTA5MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpOiBGb3JtYWwgU2VtYW50aWNzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUik6IEZvcm1hbCBTZW1hbnRpY3M8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wOS0wMSAtIDxhIHRpdGxlPSJQcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKTogRm9ybWFsIFNlbWFudGljcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcG93ZGVyLWZvcm1hbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0YXNpbm9zIEtvbnN0YW50b3BvdWxvcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWwgQXJjaGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvdG9jb2wgZm9yIHdlYiBkZXNjcmlwdGlvbiByZXNvdXJjZXMgKHBvd2Rlcik6IGdyb3VwaW5nIG9mIHJlc291cmNlcyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1JFQy1wb3dkZXItZ3JvdXBpbmctMjAwOTA5MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpOiBHcm91cGluZyBvZiBSZXNvdXJjZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKTogR3JvdXBpbmcgb2YgUmVzb3VyY2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Qcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDktMDEgLSA8YSB0aXRsZT0iUHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUik6IEdyb3VwaW5nIG9mIFJlc291cmNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcG93ZGVyLWdyb3VwaW5nIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbCBBcmNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZWEgUGVyZWdvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2V2aW4gU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm90b2NvbCBmb3Igd2ViIGRlc2NyaXB0aW9uIHJlc291cmNlcyAocG93ZGVyKTogcHJpbWVyIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1wb3dkZXItcHJpbWVyLTIwMDkwOTAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKTogUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUik6IFByaW1lcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUikgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTA5LTAxIC0gPGEgdGl0bGU9IlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpOiBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Bvd2Rlci1wcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LYWkgU2NoZXBwZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InczYyBtb2JpbGVvayBzY2hlbWUgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLW1vYmlsZU9LLTIwMDkwODI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXM0MgbW9iaWxlT0sgU2NoZW1lIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlczQyAgbW9iaWxlT0sgIFNjaGVtZSZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDgtMjUgLSA8YSB0aXRsZT0iVzNDIG1vYmlsZU9LIFNjaGVtZSAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21vYmlsZU9LIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm8gUmFiaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsIEFyY2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2tvcyBzaW1wbGUga25vd2xlZGdlIG9yZ2FuaXphdGlvbiBzeXN0ZW0gcHJpbWVyIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1za29zLXByaW1lci0yMDA5MDgxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU0tPUyBTaW1wbGUgS25vd2xlZGdlIE9yZ2FuaXphdGlvbiBTeXN0ZW0gUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U0tPUyBTaW1wbGUgS25vd2xlZGdlIE9yZ2FuaXphdGlvbiBTeXN0ZW0gUHJpbWVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgRGVwbG95bWVudCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDgtMTggLSA8YSB0aXRsZT0iU0tPUyBTaW1wbGUgS25vd2xlZGdlIE9yZ2FuaXphdGlvbiBTeXN0ZW0gUHJpbWVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9za29zLXByaW1lciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFudG9pbmUgSXNhYWMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FZCBTdW1tZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2tvcyBzaW1wbGUga25vd2xlZGdlIG9yZ2FuaXphdGlvbiBzeXN0ZW0gcmVmZXJlbmNlIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLXNrb3MtcmVmZXJlbmNlLTIwMDkwODE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTS09TIFNpbXBsZSBLbm93bGVkZ2UgT3JnYW5pemF0aW9uIFN5c3RlbSBSZWZlcmVuY2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TS09TIFNpbXBsZSBLbm93bGVkZ2UgT3JnYW5pemF0aW9uIFN5c3RlbSBSZWZlcmVuY2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBEZXBsb3ltZW50IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wOC0xOCAtIDxhIHRpdGxlPSJTS09TIFNpbXBsZSBLbm93bGVkZ2UgT3JnYW5pemF0aW9uIFN5c3RlbSBSZWZlcmVuY2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Nrb3MtcmVmZXJlbmNlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxpc3RhaXIgTWlsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZWFuIEJlY2hob2ZlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNrb3MgdXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLXNrb3MtdWNyLTIwMDkwODE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTS09TIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U0tPUyBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VtYW50aWMgV2ViIERlcGxveW1lbnQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTA4LTE4IC0gPGEgdGl0bGU9IlNLT1MgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Nrb3MtdWNyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW50b2luZSBJc2FhYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbiBQaGlwcHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgUnViaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzZWN1cml0eSBkZXJpdmVkIGtleXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS14bWxzZWMtZGVyaXZlZGtleXMtMjAwOTA3MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTZWN1cml0eSBEZXJpdmVkIEtleXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgU2VjdXJpdHkgRGVyaXZlZCBLZXlzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wNy0zMCAtIDxhIHRpdGxlPSJYTUwgU2VjdXJpdHkgRGVyaXZlZCBLZXlzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzZWMtZGVyaXZlZGtleXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYWdudXMgTnlzdHLDtm0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVsYXRpb25zaGlwIGJldHdlZW4gbW9iaWxlIHdlYiBiZXN0IHByYWN0aWNlcyAobXdicCkgYW5kIHdlYiBjb250ZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAod2NhZykiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLW13YnAtd2NhZy0yMDA5MDcwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVsYXRpb25zaGlwIGJldHdlZW4gTW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyAoTVdCUCkgYW5kIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZWxhdGlvbnNoaXAgYmV0d2VlbiBNb2JpbGUgV2ViIEJlc3QgUHJhY3RpY2VzIChNV0JQKSBhbmQgV2ViIENvbnRlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChXQ0FHKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBFZHVjYXRpb24gYW5kIE91dHJlYWNoIFdvcmtpbmcgR3JvdXAgKEVPV0cpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDctMDkgLSA8YSB0aXRsZT0iUmVsYXRpb25zaGlwIGJldHdlZW4gTW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyAoTVdCUCkgYW5kIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L213YnAtd2NhZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsYW4gQ2h1dGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WWVsaXogWWVzaWxhZGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGFycWwgbmV3IGZlYXR1cmVzIGFuZCByYXRpb25hbGUiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELXNwYXJxbC1mZWF0dXJlcy0yMDA5MDcwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1BBUlFMIE5ldyBGZWF0dXJlcyBhbmQgUmF0aW9uYWxlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1BBUlFMIE5ldyBGZWF0dXJlcyBhbmQgUmF0aW9uYWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TUEFSUUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTA3LTAyIC0gPGEgdGl0bGU9IlNQQVJRTCBOZXcgRmVhdHVyZXMgYW5kIFJhdGlvbmFsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3BhcnFsLWZlYXR1cmVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2pldGlsIEtqZXJuc21vCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleGFuZHJlIFBhc3NhbnQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJmcmFtZXdvcmsgZm9yIHNtbCBlcHItYmFzZWQgcmVmZXJlbmNlIHNjaGVtZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L05PVEUtc21sLWVwci1yZWYtc2NoZW1lLTIwMDkwNjMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBGcmFtZXdvcmsgZm9yIFNNTCBFUFItQmFzZWQgUmVmZXJlbmNlIFNjaGVtZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5GcmFtZXdvcmsgZm9yIFNNTCBFUFItQmFzZWQgUmVmZXJlbmNlIFNjaGVtZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlcnZpY2UgTW9kZWxpbmcgTGFuZ3VhZ2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTA2LTMwIC0gPGEgdGl0bGU9IkZyYW1ld29yayBmb3IgU01MIEVQUi1CYXNlZCBSZWZlcmVuY2UgU2NoZW1lcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc21sLWVwci1yZWYtc2NoZW1lIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGVuIENoYXJlc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyBwYXJhbWV0ZXJzIDEuMCwgcGFydCAyOiBsYW5ndWFnZSIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELVNWR1BhcmFtLTIwMDkwNjE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTVkcgUGFyYW1ldGVycyAxLjAsIFBhcnQgMjogTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgUGFyYW1ldGVycyAxLjAsIFBhcnQgMjogTGFuZ3VhZ2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDYtMTYgLSA8YSB0aXRsZT0iU1ZHIFBhcmFtZXRlcnMgMS4wLCBQYXJ0IDI6IExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkdQYXJhbSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvdWcgU2NoZXBlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyBwYXJhbWV0ZXJzIDEuMCwgcGFydCAxOiBwcmltZXIiIGRhdGEtdGFnPSJncmFwaGljcyIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9XRC1TVkdQYXJhbVByaW1lci0yMDA5MDYxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1ZHIFBhcmFtZXRlcnMgMS4wLCBQYXJ0IDE6IFByaW1lciBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNWRyBQYXJhbWV0ZXJzIDEuMCwgUGFydCAxOiBQcmltZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDYtMTYgLSA8YSB0aXRsZT0iU1ZHIFBhcmFtZXRlcnMgMS4wLCBQYXJ0IDE6IFByaW1lciBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvU1ZHUGFyYW1QcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb3VnIFNjaGVwZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJndWlkZWxpbmVzIGZvciB3cml0aW5nIGRldmljZSBpbmRlcGVuZGVudCB0ZXN0cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS1kaS10ZXN0aW5nLTIwMDkwNTEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHdWlkZWxpbmVzIGZvciB3cml0aW5nIGRldmljZSBpbmRlcGVuZGVudCB0ZXN0cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkd1aWRlbGluZXMgZm9yIHdyaXRpbmcgZGV2aWNlIGluZGVwZW5kZW50IHRlc3RzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIFRlc3QgU3VpdGVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wNS0xMiAtIDxhIHRpdGxlPSJHdWlkZWxpbmVzIGZvciB3cml0aW5nIGRldmljZSBpbmRlcGVuZGVudCB0ZXN0cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGktdGVzdGluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbWluaXF1ZSBIYXphw6tsLU1hc3NpZXV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2FybWVsbyBNb250YW5legogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZXJ2aWNlIG1vZGVsaW5nIGxhbmd1YWdlLCB2ZXJzaW9uIDEuMSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLXNtbC0yMDA5MDUxMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2VydmljZSBNb2RlbGluZyBMYW5ndWFnZSwgVmVyc2lvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TZXJ2aWNlICBNb2RlbGluZyAgTGFuZ3VhZ2UsICBWZXJzaW9uJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZXJ2aWNlIE1vZGVsaW5nIExhbmd1YWdlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wNS0xMiAtIDxhIHRpdGxlPSJTZXJ2aWNlIE1vZGVsaW5nIExhbmd1YWdlLCBWZXJzaW9uIDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc21sIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmFsZW50aW5hIFBvcGVzY3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WaXJnaW5pYSBTbWl0aAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VydmljZSBtb2RlbGluZyBsYW5ndWFnZSBpbnRlcmNoYW5nZSBmb3JtYXQgdmVyc2lvbiAxLjEiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1JFQy1zbWwtaWYtMjAwOTA1MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNlcnZpY2UgTW9kZWxpbmcgTGFuZ3VhZ2UgSW50ZXJjaGFuZ2UgRm9ybWF0IFZlcnNpb24gMS4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VydmljZSAgTW9kZWxpbmcgIExhbmd1YWdlICBJbnRlcmNoYW5nZSAgRm9ybWF0ICBWZXJzaW9uJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZXJ2aWNlIE1vZGVsaW5nIExhbmd1YWdlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOS0wNS0xMiAtIDxhIHRpdGxlPSJTZXJ2aWNlIE1vZGVsaW5nIExhbmd1YWdlIEludGVyY2hhbmdlIEZvcm1hdCBWZXJzaW9uIDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc21sLWlmIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VmFsZW50aW5hIFBvcGVzY3UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WaXJnaW5pYSBTbWl0aAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW1wcm92aW5nIGFjY2VzcyB0byBnb3Zlcm5tZW50IHRocm91Z2ggYmV0dGVyIHVzZSBvZiB0aGUgd2ViIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLWVnb3YtaW1wcm92aW5nLTIwMDkwNTEyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbXByb3ZpbmcgQWNjZXNzIHRvIEdvdmVybm1lbnQgdGhyb3VnaCBCZXR0ZXIgVXNlIG9mIHRoZSBXZWIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbXByb3ZpbmcgQWNjZXNzIHRvIEdvdmVybm1lbnQgdGhyb3VnaCBCZXR0ZXIgVXNlIG9mIHRoZSBXZWI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPmVHb3Zlcm5tZW50IEludGVyZXN0IEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDUtMTIgLSA8YSB0aXRsZT0iSW1wcm92aW5nIEFjY2VzcyB0byBHb3Zlcm5tZW50IHRocm91Z2ggQmV0dGVyIFVzZSBvZiB0aGUgV2ViIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lZ292LWltcHJvdmluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN1emFubmUgQWNhcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc8OpIE1hbnVlbCBBbG9uc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZXZpbiBOb3ZhawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJiYXNpYyB4bWwgc2NoZW1hIHBhdHRlcm5zIGZvciBkYXRhYmluZGluZyB2ZXJzaW9uIDEuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvTk9URS14bWxzY2hlbWEtcGF0dGVybnMtMjAwOTA1MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEJhc2ljIFhNTCBTY2hlbWEgUGF0dGVybnMgZm9yIERhdGFiaW5kaW5nIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QmFzaWMgIFhNTCAgU2NoZW1hICBQYXR0ZXJucyAgZm9yICBEYXRhYmluZGluZyAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNjaGVtYSBQYXR0ZXJucyBmb3IgRGF0YWJpbmRpbmcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTA1LTA1IC0gPGEgdGl0bGU9IkJhc2ljIFhNTCBTY2hlbWEgUGF0dGVybnMgZm9yIERhdGFiaW5kaW5nIFZlcnNpb24gMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzY2hlbWEtcGF0dGVybnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBDYWxsYWRpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HZW9yZ2UgQ293ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgRG93bmV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXZlcyBMYWZvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFkdmFuY2VkIHhtbCBzY2hlbWEgcGF0dGVybnMgZm9yIGRhdGFiaW5kaW5nIHZlcnNpb24gMS4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLXhtbHNjaGVtYS1wYXR0ZXJucy1hZHZhbmNlZC0yMDA5MDUwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQWR2YW5jZWQgWE1MIFNjaGVtYSBQYXR0ZXJucyBmb3IgRGF0YWJpbmRpbmcgVmVyc2lvbiAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BZHZhbmNlZCAgWE1MICBTY2hlbWEgIFBhdHRlcm5zICBmb3IgIERhdGFiaW5kaW5nICBWZXJzaW9uJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2NoZW1hIFBhdHRlcm5zIGZvciBEYXRhYmluZGluZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDUtMDUgLSA8YSB0aXRsZT0iQWR2YW5jZWQgWE1MIFNjaGVtYSBQYXR0ZXJucyBmb3IgRGF0YWJpbmRpbmcgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbHNjaGVtYS1wYXR0ZXJucy1hZHZhbmNlZCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIENhbGxhZGluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdlb3JnZSBDb3dlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBEb3duZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ZdmVzIExhZm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InczYyBwZXJzb25hbGl6YXRpb24gcm9hZG1hcDogdWJpcXVpdG91cyB3ZWIgaW50ZWdyYXRpb24gb2YgYWNjZXNzZm9yYWxsIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOS9OT1RFLVVXQS1wZXJzb25hbGl6YXRpb24tcm9hZG1hcC0yMDA5MDQwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVzNDIFBlcnNvbmFsaXphdGlvbiBSb2FkbWFwOiBVYmlxdWl0b3VzIFdlYiBJbnRlZ3JhdGlvbiBvZiBBY2Nlc3NGb3JBbGwgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VzNDICBQZXJzb25hbGl6YXRpb24gIFJvYWRtYXA6ICBVYmlxdWl0b3VzICBXZWIgIEludGVncmF0aW9uICBvZiAgQWNjZXNzRm9yQWxsJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VYmlxdWl0b3VzIFdlYiBBcHBsaWNhdGlvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTA0LTA5IC0gPGEgdGl0bGU9IlczQyBQZXJzb25hbGl6YXRpb24gUm9hZG1hcDogVWJpcXVpdG91cyBXZWIgSW50ZWdyYXRpb24gb2YgQWNjZXNzRm9yQWxsIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvVVdBLXBlcnNvbmFsaXphdGlvbi1yb2FkbWFwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5keSBIZWF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgU2Nod2VyZHRmZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZWZmaWNpZW50IHhtbCBpbnRlcmNoYW5nZSBldmFsdWF0aW9uIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELWV4aS1ldmFsdWF0aW9uLTIwMDkwNDA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIEV2YWx1YXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIEV2YWx1YXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVmZmljaWVudCBFeHRlbnNpYmxlIEludGVyY2hhbmdlICBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDQtMDcgLSA8YSB0aXRsZT0iRWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSBFdmFsdWF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9leGktZXZhbHVhdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNhcmluZSBCb3VybmV6CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyB0cmFuc2Zvcm1zIDEuMCwgcGFydCAyOiBsYW5ndWFnZSIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELVNWRy1UcmFuc2Zvcm1zLTIwMDkwMzIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTVkcgVHJhbnNmb3JtcyAxLjAsIFBhcnQgMjogTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgVHJhbnNmb3JtcyAxLjAsIFBhcnQgMjogTGFuZ3VhZ2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDMtMjAgLSA8YSB0aXRsZT0iU1ZHIFRyYW5zZm9ybXMgMS4wLCBQYXJ0IDI6IExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkctVHJhbnNmb3JtcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1biBGdWppc2F3YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFudGhvbnkgR3Jhc3NvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImVtbWE6IGV4dGVuc2libGUgbXVsdGltb2RhbCBhbm5vdGF0aW9uIG1hcmt1cCBsYW5ndWFnZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLWVtbWEtMjAwOTAyMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEVNTUE6IEV4dGVuc2libGUgTXVsdGlNb2RhbCBBbm5vdGF0aW9uIG1hcmt1cCBsYW5ndWFnZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVNTUE6IEV4dGVuc2libGUgTXVsdGlNb2RhbCBBbm5vdGF0aW9uIG1hcmt1cCBsYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDItMTAgLSA8YSB0aXRsZT0iRU1NQTogRXh0ZW5zaWJsZSBNdWx0aU1vZGFsIEFubm90YXRpb24gbWFya3VwIGxhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9lbW1hIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBKb2huc3RvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGJhc2UgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvUkVDLXhtbGJhc2UtMjAwOTAxMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBCYXNlIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgQmFzZSAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDktMDEtMjggLSA8YSB0aXRsZT0iWE1MIEJhc2UgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sYmFzZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIE1hcnNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBUb2JpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieGh0bWwgbWVkaWEgdHlwZXMgLSBzZWNvbmQgZWRpdGlvbiIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA5L05PVEUteGh0bWwtbWVkaWEtdHlwZXMtMjAwOTAxMTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhIVE1MIE1lZGlhIFR5cGVzIC0gU2Vjb25kIEVkaXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YSFRNTCBNZWRpYSBUeXBlcyAtIFNlY29uZCBFZGl0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA5LTAxLTE2IC0gPGEgdGl0bGU9IlhIVE1MIE1lZGlhIFR5cGVzIC0gU2Vjb25kIEVkaXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hodG1sLW1lZGlhLXR5cGVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzY2FsYWJsZSB2ZWN0b3IgZ3JhcGhpY3MgKHN2ZykgdGlueSAxLjIgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtU1ZHVGlueTEyLTIwMDgxMjIyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTY2FsYWJsZSBWZWN0b3IgR3JhcGhpY3MgKFNWRykgVGlueSAxLjIgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNjYWxhYmxlIFZlY3RvciBHcmFwaGljcyAoU1ZHKSBUaW55IDEuMiBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTEyLTIyIC0gPGEgdGl0bGU9IlNjYWxhYmxlIFZlY3RvciBHcmFwaGljcyAoU1ZHKSBUaW55IDEuMiBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkdUaW55MTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5PbGEgQW5kZXJzc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iaW4gQmVyam9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpayBEYWhsc3Ryw7ZtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IEVtbW9ucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbiBGZXJyYWlvbG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRob255IEdyYXNzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZpbmNlbnQgSGFyZHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBIYXltYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZWFuIEphY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DYW1lcm9uIE1jQ29ybWFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHJlYXMgTmV1bWFubgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNyYWlnIE5vcnRod2F5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW50b2luZSBRdWludAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5hbmRpbmkgUmFtYW5pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG91ZyBTY2hlcGVycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHJldyBTaGVsbHNoZWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4Zm9ybXMgZm9yIGh0bWwiIGRhdGEtdGFnPSJodG1sIHhtbCIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9XRC1YRm9ybXMtZm9yLUhUTUwtMjAwODEyMTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhGb3JtcyBmb3IgSFRNTCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhGb3JtcyBmb3IgSFRNTDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Rm9ybXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTEyLTE5IC0gPGEgdGl0bGU9IlhGb3JtcyBmb3IgSFRNTCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvWEZvcm1zLWZvci1IVE1MIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBCb3llcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGNvbnRlbnQgYWNjZXNzaWJpbGl0eSBndWlkZWxpbmVzICh3Y2FnKSAyLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQ29udGVudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgKFdDQUcpIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiAgQ29udGVudCAgQWNjZXNzaWJpbGl0eSAgR3VpZGVsaW5lcyAgKFdDQUcpJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTEyLTExIC0gPGEgdGl0bGU9IldlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykgMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XQ0FHMjAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZW4gQ2FsZHdlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIENvb3BlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxvcmV0dGEgR3VhcmlubyBSZWlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZ2cgVmFuZGVyaGVpZGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3M2MgbW9iaWxlb2sgYmFzaWMgdGVzdHMgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtbW9iaWxlT0stYmFzaWMxMC10ZXN0cy0yMDA4MTIwOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVzNDIG1vYmlsZU9LIEJhc2ljIFRlc3RzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlczQyAgbW9iaWxlT0sgIEJhc2ljICBUZXN0cyZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMTItMDggLSA8YSB0aXRsZT0iVzNDIG1vYmlsZU9LIEJhc2ljIFRlc3RzIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbW9iaWxlT0stYmFzaWMxMC10ZXN0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNlYW4gT3dlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvIFJhYmluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgZGVzY3JpcHRpb24gcmVwb3NpdG9yeSBzaW1wbGUgYXBpIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtRERSLVNpbXBsZS1BUEktMjAwODEyMDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERldmljZSBEZXNjcmlwdGlvbiBSZXBvc2l0b3J5IFNpbXBsZSBBUEkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZpY2UgRGVzY3JpcHRpb24gUmVwb3NpdG9yeSBTaW1wbGUgQVBJPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIEluaXRpYXRpdmUgRGV2aWNlIERlc2NyaXB0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0xMi0wNSAtIDxhIHRpdGxlPSJEZXZpY2UgRGVzY3JpcHRpb24gUmVwb3NpdG9yeSBTaW1wbGUgQVBJIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ERFItU2ltcGxlLUFQSSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvIFJhYmluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZSBNYW51ZWwgQ2FudGVyYSBGb25zZWNhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um90YW4gSGFucmFoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JZ25hY2lvIE1hcmluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgZGVzY3JpcHRpb24gc3RydWN0dXJlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9XRC1kZC1zdHJ1Y3R1cmVzLTIwMDgxMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEZXZpY2UgRGVzY3JpcHRpb24gU3RydWN0dXJlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRldmljZSBEZXNjcmlwdGlvbiBTdHJ1Y3R1cmVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIEluaXRpYXRpdmUgRGV2aWNlIERlc2NyaXB0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0xMi0wNSAtIDxhIHRpdGxlPSJEZXZpY2UgRGVzY3JpcHRpb24gU3RydWN0dXJlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGQtc3RydWN0dXJlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2UgTWFudWVsIENhbnRlcmEgRm9uc2VjYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY29vbCB1cmlzIGZvciB0aGUgc2VtYW50aWMgd2ViIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvTk9URS1jb29sdXJpcy0yMDA4MTIwMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29vbCBVUklzIGZvciB0aGUgU2VtYW50aWMgV2ViIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29vbCBVUklzIGZvciB0aGUgU2VtYW50aWMgV2ViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UZWNobmljYWwgQXJjaGl0ZWN0dXJlIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VtYW50aWMgV2ViIERlcGxveW1lbnQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTEyLTAzIC0gPGEgdGl0bGU9IkNvb2wgVVJJcyBmb3IgdGhlIFNlbWFudGljIFdlYiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY29vbHVyaXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MZW8gU2F1ZXJtYW5uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBDeWdhbmlhawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN5bmNocm9uaXplZCBtdWx0aW1lZGlhIGludGVncmF0aW9uIGxhbmd1YWdlIChzbWlsIDMuMCkiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1TTUlMMy0yMDA4MTIwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU3luY2hyb25pemVkIE11bHRpbWVkaWEgSW50ZWdyYXRpb24gTGFuZ3VhZ2UgKFNNSUwgMy4wKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlN5bmNocm9uaXplZCBNdWx0aW1lZGlhIEludGVncmF0aW9uIExhbmd1YWdlIChTTUlMIDMuMCk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNZTU0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTEyLTAxIC0gPGEgdGl0bGU9IlN5bmNocm9uaXplZCBNdWx0aW1lZGlhIEludGVncmF0aW9uIExhbmd1YWdlIChTTUlMIDMuMCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NNSUwzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGljayBCdWx0ZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZXh0ZW5zaWJsZSBtYXJrdXAgbGFuZ3VhZ2UgKHhtbCkgMS4wIChmaWZ0aCBlZGl0aW9uKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLXhtbC0yMDA4MTEyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXh0ZW5zaWJsZSBNYXJrdXAgTGFuZ3VhZ2UgKFhNTCkgMS4wIChGaWZ0aCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkV4dGVuc2libGUgTWFya3VwIExhbmd1YWdlIChYTUwpIDEuMCAoRmlmdGggRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0xMS0yNiAtIDxhIHRpdGxlPSJFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoWE1MKSAxLjAgKEZpZnRoIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaW0gQnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplYW4gUGFvbGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIFNwZXJiZXJnLU1jUXVlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FdmUgTWFsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmFuw6dvaXMgWWVyZ2VhdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsZWdhY3kgZXh0ZW5kZWQgaXJpcyBmb3IgeG1sIHJlc291cmNlIGlkZW50aWZpY2F0aW9uIiBkYXRhLXRhZz0iaTE4biB4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L05PVEUtbGVpcmktMjAwODExMDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIExlZ2FjeSBleHRlbmRlZCBJUklzIGZvciBYTUwgcmVzb3VyY2UgaWRlbnRpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5MZWdhY3kgZXh0ZW5kZWQgSVJJcyBmb3IgWE1MIHJlc291cmNlIGlkZW50aWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMTEtMDMgLSA8YSB0aXRsZT0iTGVnYWN5IGV4dGVuZGVkIElSSXMgZm9yIFhNTCByZXNvdXJjZSBpZGVudGlmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbGVpcmkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yeSBUaG9tcHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2hhcmQgVG9iaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvbnVuY2lhdGlvbiBsZXhpY29uIHNwZWNpZmljYXRpb24gKHBscykgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLXByb251bmNpYXRpb24tbGV4aWNvbi0yMDA4MTAxNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJvbnVuY2lhdGlvbiBMZXhpY29uIFNwZWNpZmljYXRpb24gKFBMUykgVmVyc2lvbiAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qcm9udW5jaWF0aW9uICBMZXhpY29uICBTcGVjaWZpY2F0aW9uICAoUExTKSAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Vm9pY2UgQnJvd3NlciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMTAtMTQgLSA8YSB0aXRsZT0iUHJvbnVuY2lhdGlvbiBMZXhpY29uIFNwZWNpZmljYXRpb24gKFBMUykgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Byb251bmNpYXRpb24tbGV4aWNvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhb2xvIEJhZ2dpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZWZmaWNpZW50IHhtbCBpbnRlcmNoYW5nZSAoZXhpKSBpbXBhY3RzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1dELWV4aS1pbXBhY3RzLTIwMDgwOTAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIChFWEkpIEltcGFjdHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FZmZpY2llbnQgWE1MIEludGVyY2hhbmdlIChFWEkpIEltcGFjdHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVmZmljaWVudCBFeHRlbnNpYmxlIEludGVyY2hhbmdlICBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDktMDMgLSA8YSB0aXRsZT0iRWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSAoRVhJKSBJbXBhY3RzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9leGktaW1wYWN0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphYWtrbyBLYW5nYXNoYXJqdQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJiZXN0IHByYWN0aWNlIHJlY2lwZXMgZm9yIHB1Ymxpc2hpbmcgcmRmIHZvY2FidWxhcmllcyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L05PVEUtc3dicC12b2NhYi1wdWItMjAwODA4MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEJlc3QgUHJhY3RpY2UgUmVjaXBlcyBmb3IgUHVibGlzaGluZyBSREYgVm9jYWJ1bGFyaWVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QmVzdCBQcmFjdGljZSBSZWNpcGVzIGZvciBQdWJsaXNoaW5nIFJERiBWb2NhYnVsYXJpZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBEZXBsb3ltZW50IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0wOC0yOCAtIDxhIHRpdGxlPSJCZXN0IFByYWN0aWNlIFJlY2lwZXMgZm9yIFB1Ymxpc2hpbmcgUkRGIFZvY2FidWxhcmllcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3dicC12b2NhYi1wdWIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EaWVnbyBCZXJydWV0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbiBQaGlwcHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ2b2ljZSBleHRlbnNpYmxlIG1hcmt1cCBsYW5ndWFnZSAodm9pY2V4bWwpIDMuMCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9XRC12eG1sMzByZXFzLTIwMDgwODA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBWb2ljZSBFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoVm9pY2VYTUwpIDMuMCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Wb2ljZSBFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoVm9pY2VYTUwpIDMuMCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTA4LTA4IC0gPGEgdGl0bGU9IlZvaWNlIEV4dGVuc2libGUgTWFya3VwIExhbmd1YWdlIChWb2ljZVhNTCkgMy4wIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdnhtbDMwcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplZmYgSG9lcGZpbmdlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtb2JpbGUgd2ViIGJlc3QgcHJhY3RpY2VzIDEuMCIgZGF0YS10YWc9Imh0bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1tb2JpbGUtYnAtMjAwODA3MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vYmlsZSBXZWIgQmVzdCBQcmFjdGljZXMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TW9iaWxlICBXZWIgIEJlc3QgIFByYWN0aWNlcyZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDctMjkgLSA8YSB0aXRsZT0iTW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21vYmlsZS1icCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvIFJhYmluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBNY0NhdGhpZU5ldmlsZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1dGhvcmluZyBhcHBsaWNhdGlvbnMgZm9yIHRoZSBtdWx0aW1vZGFsIGFyY2hpdGVjdHVyZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvTk9URS1tbWktYXV0aC0yMDA4MDcwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXV0aG9yaW5nIEFwcGxpY2F0aW9ucyBmb3IgdGhlIE11bHRpbW9kYWwgQXJjaGl0ZWN0dXJlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QXV0aG9yaW5nIEFwcGxpY2F0aW9ucyBmb3IgdGhlIE11bHRpbW9kYWwgQXJjaGl0ZWN0dXJlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0wNy0wMiAtIDxhIHRpdGxlPSJBdXRob3JpbmcgQXBwbGljYXRpb25zIGZvciB0aGUgTXVsdGltb2RhbCBBcmNoaXRlY3R1cmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21taS1hdXRoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SW5nbWFyIEtsaWNoZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIDUgcHVibGljYXRpb24gbm90ZXMiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L05PVEUtaHRtbDUtcHVibm90ZXMtMjAwODA2MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgNSBQdWJsaWNhdGlvbiBOb3RlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgNSBQdWJsaWNhdGlvbiBOb3RlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0wNi0xMCAtIDxhIHRpdGxlPSJIVE1MIDUgUHVibGljYXRpb24gTm90ZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWw1LXB1Ym5vdGVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbFt0bV0gU21pdGgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZXN0IGNhc2VzIGZvciBjMTRuIDEuMSBhbmQgeG1sZHNpZyBpbnRlcm9wZXJhYmlsaXR5IiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9OT1RFLXhtbGRzaWcyZWQtdGVzdHMtMjAwODA2MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRlc3QgQ2FzZXMgZm9yIEMxNE4gMS4xIGFuZCBYTUxEU2lnIEludGVyb3BlcmFiaWxpdHkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UZXN0IENhc2VzIGZvciBDMTROIDEuMSBhbmQgWE1MRFNpZyBJbnRlcm9wZXJhYmlsaXR5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2VjdXJpdHkgU3BlY2lmaWNhdGlvbnMgTWFpbnRlbmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDYtMTAgLSA8YSB0aXRsZT0iVGVzdCBDYXNlcyBmb3IgQzE0TiAxLjEgYW5kIFhNTERTaWcgSW50ZXJvcGVyYWJpbGl0eSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sZHNpZzJlZC10ZXN0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1YW4gQ2FybG9zIENydWVsbGFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S29ucmFkIExhbnoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZWFuIE11bGxhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhIHByb3RvdHlwZSBrbm93bGVkZ2UgYmFzZSBmb3IgdGhlIGxpZmUgc2NpZW5jZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L05PVEUtaGNscy1rYi0yMDA4MDYwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQSBQcm90b3R5cGUgS25vd2xlZGdlIEJhc2UgZm9yIHRoZSBMaWZlIFNjaWVuY2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QSBQcm90b3R5cGUgS25vd2xlZGdlIEJhc2UgZm9yIHRoZSBMaWZlIFNjaWVuY2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgSGVhbHRoIENhcmUgYW5kIExpZmUgU2NpZW5jZXMgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0wNi0wNCAtIDxhIHRpdGxlPSJBIFByb3RvdHlwZSBLbm93bGVkZ2UgQmFzZSBmb3IgdGhlIExpZmUgU2NpZW5jZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2hjbHMta2IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NLiBTY290dCBNYXJzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWMgUHJ1ZCYjMDM5O2hvbW1lYXV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJleHBlcmllbmNlcyB3aXRoIHRoZSBjb252ZXJzaW9uIG9mIHNlbnNlbGFiIGRhdGFiYXNlcyB0byByZGYvb3dsIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9OT1RFLWhjbHMtc2Vuc2VsYWItMjAwODA2MDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEV4cGVyaWVuY2VzIHdpdGggdGhlIGNvbnZlcnNpb24gb2YgU2Vuc2VMYWIgZGF0YWJhc2VzIHRvIFJERi9PV0wgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FeHBlcmllbmNlcyB3aXRoIHRoZSBjb252ZXJzaW9uIG9mIFNlbnNlTGFiIGRhdGFiYXNlcyB0byBSREYvT1dMPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgSGVhbHRoIENhcmUgYW5kIExpZmUgU2NpZW5jZXMgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0wNi0wNCAtIDxhIHRpdGxlPSJFeHBlcmllbmNlcyB3aXRoIHRoZSBjb252ZXJzaW9uIG9mIFNlbnNlTGFiIGRhdGFiYXNlcyB0byBSREYvT1dMIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9oY2xzLXNlbnNlbGFiIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dGhpYXMgU2Ftd2FsZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlaS1Ib2kgQ2hldW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvZmZsaW5lIHdlYiBhcHBsaWNhdGlvbnMiIGRhdGEtdGFnPSJodG1sIHdlYmFwaSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvTk9URS1vZmZsaW5lLXdlYmFwcHMtMjAwODA1MzAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9mZmxpbmUgV2ViIEFwcGxpY2F0aW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9mZmxpbmUgV2ViIEFwcGxpY2F0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SFRNTCBNZWRpYSBFeHRlbnNpb25zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0wNS0zMCAtIDxhIHRpdGxlPSJPZmZsaW5lIFdlYiBBcHBsaWNhdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L29mZmxpbmUtd2ViYXBwcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFubmUgdmFuIEtlc3RlcmVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEhpY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IndlYmFwaSI+V2ViIEFQSQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIGFjY2Vzc2liaWxpdHkgZm9yIG9sZGVyIHVzZXJzOiBhIGxpdGVyYXR1cmUgcmV2aWV3IiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9XRC13YWktYWdlLWxpdGVyYXR1cmUtMjAwODA1MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBBY2Nlc3NpYmlsaXR5IGZvciBPbGRlciBVc2VyczogQSBMaXRlcmF0dXJlIFJldmlldyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBBY2Nlc3NpYmlsaXR5IGZvciBPbGRlciBVc2VyczogQSBMaXRlcmF0dXJlIFJldmlldzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBFZHVjYXRpb24gYW5kIE91dHJlYWNoIFdvcmtpbmcgR3JvdXAgKEVPV0cpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDUtMTQgLSA8YSB0aXRsZT0iV2ViIEFjY2Vzc2liaWxpdHkgZm9yIE9sZGVyIFVzZXJzOiBBIExpdGVyYXR1cmUgUmV2aWV3IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93YWktYWdlLWxpdGVyYXR1cmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXcgQXJjaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2Fub25pY2FsIHhtbCB2ZXJzaW9uIDEuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLXhtbC1jMTRuMTEtMjAwODA1MDIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENhbm9uaWNhbCBYTUwgVmVyc2lvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DYW5vbmljYWwgIFhNTCAgVmVyc2lvbiZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTA1LTAyIC0gPGEgdGl0bGU9IkNhbm9uaWNhbCBYTUwgVmVyc2lvbiAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1jMTRuMTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIEJveWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2xlbm4gTWFyY3kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGV2aWNlIGRlc2NyaXB0aW9uIHJlcG9zaXRvcnkgY29yZSB2b2NhYnVsYXJ5IiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9OT1RFLWRkci1jb3JlLXZvY2FidWxhcnktMjAwODA0MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERldmljZSBEZXNjcmlwdGlvbiBSZXBvc2l0b3J5IENvcmUgVm9jYWJ1bGFyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRldmljZSBEZXNjcmlwdGlvbiBSZXBvc2l0b3J5IENvcmUgVm9jYWJ1bGFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TW9iaWxlIFdlYiBJbml0aWF0aXZlIERldmljZSBEZXNjcmlwdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDQtMTQgLSA8YSB0aXRsZT0iRGV2aWNlIERlc2NyaXB0aW9uIFJlcG9zaXRvcnkgQ29yZSBWb2NhYnVsYXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kZHItY29yZS12b2NhYnVsYXJ5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm8gUmFiaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZWEgVHJhc2F0dGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb3RhbiBIYW5yYWhhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2lkZ2V0cyAxLjA6IHRoZSB3aWRnZXQgbGFuZHNjYXBlIChxMSAyMDA4KSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9XRC13aWRnZXRzLWxhbmQtMjAwODA0MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdpZGdldHMgMS4wOiBUaGUgV2lkZ2V0IExhbmRzY2FwZSAoUTEgMjAwOCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XaWRnZXRzIDEuMDogVGhlIFdpZGdldCBMYW5kc2NhcGUgKFExIDIwMDgpPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgQXBwbGljYXRpb24gRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDQtMTQgLSA8YSB0aXRsZT0iV2lkZ2V0cyAxLjA6IFRoZSBXaWRnZXQgTGFuZHNjYXBlIChRMSAyMDA4KSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2lkZ2V0cy1sYW5kIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyY29zIENhY2VyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2libGUgc3R5bGVzaGVldCBsYW5ndWFnZSAoeHNsKSByZXF1aXJlbWVudHMgdmVyc2lvbiAyLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvV0QteHNsZm8yMC1yZXEtMjAwODAzMjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEV4dGVuc2libGUgU3R5bGVzaGVldCBMYW5ndWFnZSAoWFNMKSBSZXF1aXJlbWVudHMgVmVyc2lvbiAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FeHRlbnNpYmxlICBTdHlsZXNoZWV0ICBMYW5ndWFnZSAgKFhTTCkgIFJlcXVpcmVtZW50cyAgVmVyc2lvbiZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDMtMjYgLSA8YSB0aXRsZT0iRXh0ZW5zaWJsZSBTdHlsZXNoZWV0IExhbmd1YWdlIChYU0wpIFJlcXVpcmVtZW50cyBWZXJzaW9uIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsZm8yMC1yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LbGFhcyBCYWxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZWN1cml0eSBleHBlcmllbmNlLCBpbmRpY2F0b3JzIGFuZCB0cnVzdDogc2NvcGUgYW5kIHVzZSBjYXNlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvTk9URS13c2MtdXNlY2FzZXMtMjAwODAzMDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZWN1cml0eSBFeHBlcmllbmNlLCBJbmRpY2F0b3JzIGFuZCBUcnVzdDogU2NvcGUgYW5kIFVzZSBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZWN1cml0eSBFeHBlcmllbmNlLCBJbmRpY2F0b3JzIGFuZCBUcnVzdDogU2NvcGUgYW5kIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlY3VyaXR5IENvbnRleHQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTAzLTA2IC0gPGEgdGl0bGU9IldlYiBTZWN1cml0eSBFeHBlcmllbmNlLCBJbmRpY2F0b3JzIGFuZCBUcnVzdDogU2NvcGUgYW5kIFVzZSBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3NjLXVzZWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VHlsZXIgQ2xvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImJlc3QgcHJhY3RpY2VzIGZvciB4bWwgaW50ZXJuYXRpb25hbGl6YXRpb24iIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9OT1RFLXhtbC1pMThuLWJwLTIwMDgwMjEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBCZXN0IFByYWN0aWNlcyBmb3IgWE1MIEludGVybmF0aW9uYWxpemF0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QmVzdCBQcmFjdGljZXMgZm9yIFhNTCBJbnRlcm5hdGlvbmFsaXphdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDItMTMgLSA8YSB0aXRsZT0iQmVzdCBQcmFjdGljZXMgZm9yIFhNTCBJbnRlcm5hdGlvbmFsaXphdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLWkxOG4tYnAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ZdmVzIFNhdm91cmVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Smlya2EgS29zZWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icm9hZG1hcCBmb3IgYWNjZXNzaWJsZSByaWNoIGludGVybmV0IGFwcGxpY2F0aW9ucyAod2FpLWFyaWEgcm9hZG1hcCkiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1dELXdhaS1hcmlhLXJvYWRtYXAtMjAwODAyMDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJvYWRtYXAgZm9yIEFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgKFdBSS1BUklBIFJvYWRtYXApIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Um9hZG1hcCBmb3IgQWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyAoV0FJLUFSSUEgUm9hZG1hcCk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29scyBhbmQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDgtMDItMDQgLSA8YSB0aXRsZT0iUm9hZG1hcCBmb3IgQWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyAoV0FJLUFSSUEgUm9hZG1hcCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dhaS1hcmlhLXJvYWRtYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFNjaHdlcmR0ZmVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGFycWwgcHJvdG9jb2wgZm9yIHJkZiIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1yZGYtc3BhcnFsLXByb3RvY29sLTIwMDgwMTE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTUEFSUUwgUHJvdG9jb2wgZm9yIFJERiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNQQVJRTCBQcm90b2NvbCBmb3IgUkRGPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TUEFSUUwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA4LTAxLTE1IC0gPGEgdGl0bGU9IlNQQVJRTCBQcm90b2NvbCBmb3IgUkRGIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGYtc3BhcnFsLXByb3RvY29sIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2VuZGFsbCBDbGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxlZSBGZWlnZW5iYXVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpYXMgVG9ycmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BhcnFsIHF1ZXJ5IGxhbmd1YWdlIGZvciByZGYiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtcmRmLXNwYXJxbC1xdWVyeS0yMDA4MDExNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1BBUlFMIFF1ZXJ5IExhbmd1YWdlIGZvciBSREYgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TUEFSUUwgUXVlcnkgTGFuZ3VhZ2UgZm9yIFJERjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwOC0wMS0xNSAtIDxhIHRpdGxlPSJTUEFSUUwgUXVlcnkgTGFuZ3VhZ2UgZm9yIFJERiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRmLXNwYXJxbC1xdWVyeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWMgUHJ1ZCYjMDM5O2hvbW1lYXV4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5keSBTZWFib3JuZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3ZnIHByaW50IDEuMiwgcGFydCAyOiBsYW5ndWFnZSIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1dELVNWR1ByaW50MTItMjAwNzEyMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNWRyBQcmludCAxLjIsIFBhcnQgMjogTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgUHJpbnQgMS4yLCBQYXJ0IDI6IExhbmd1YWdlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTEyLTIxIC0gPGEgdGl0bGU9IlNWRyBQcmludCAxLjIsIFBhcnQgMjogTGFuZ3VhZ2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWR1ByaW50MTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4IERhbmlsbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNyYWlnIE5vcnRod2F5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IFNoZWxsc2hlYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRob255IEdyYXNzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzIExpbGxleQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzdmcgcHJpbnQgMS4yLCBwYXJ0IDE6IHByaW1lciIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1dELVNWR1ByaW50UHJpbWVyMTItMjAwNzEyMjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNWRyBQcmludCAxLjIsIFBhcnQgMTogUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1ZHIFByaW50IDEuMiwgUGFydCAxOiBQcmltZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMTItMjEgLSA8YSB0aXRsZT0iU1ZHIFByaW50IDEuMiwgUGFydCAxOiBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWR1ByaW50UHJpbWVyMTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbnRob255IEdyYXNzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHJldyBTaGVsbHNoZWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGlsbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJlZmZpY2llbnQgeG1sIGludGVyY2hhbmdlIChleGkpIGJlc3QgcHJhY3RpY2VzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1dELWV4aS1iZXN0LXByYWN0aWNlcy0yMDA3MTIxOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSAoRVhJKSBCZXN0IFByYWN0aWNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVmZmljaWVudCBYTUwgSW50ZXJjaGFuZ2UgKEVYSSkgQmVzdCBQcmFjdGljZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVmZmljaWVudCBFeHRlbnNpYmxlIEludGVyY2hhbmdlICBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMTItMTkgLSA8YSB0aXRsZT0iRWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSAoRVhJKSBCZXN0IFByYWN0aWNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZXhpLWJlc3QtcHJhY3RpY2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb2t1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBWb2dlbGhlaW0KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgZGVzY3JpcHRpb24gcmVwb3NpdG9yeSByZXF1aXJlbWVudHMgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLUREUi1yZXF1aXJlbWVudHMtMjAwNzEyMTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERldmljZSBEZXNjcmlwdGlvbiBSZXBvc2l0b3J5IFJlcXVpcmVtZW50cyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZpY2UgIERlc2NyaXB0aW9uICBSZXBvc2l0b3J5ICBSZXF1aXJlbWVudHMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1vYmlsZSBXZWIgSW5pdGlhdGl2ZSBEZXZpY2UgRGVzY3JpcHRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTEyLTE3IC0gPGEgdGl0bGU9IkRldmljZSBEZXNjcmlwdGlvbiBSZXBvc2l0b3J5IFJlcXVpcmVtZW50cyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0REUi1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZXZpbiBTbWl0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIFNhbmRlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwgZGVzaWduIHByaW5jaXBsZXMiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1dELWh0bWwtZGVzaWduLXByaW5jaXBsZXMtMjAwNzExMjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgRGVzaWduIFByaW5jaXBsZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IVE1MIERlc2lnbiBQcmluY2lwbGVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IVE1MIE1lZGlhIEV4dGVuc2lvbnMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTExLTI2IC0gPGEgdGl0bGU9IkhUTUwgRGVzaWduIFByaW5jaXBsZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2h0bWwtZGVzaWduLXByaW5jaXBsZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bbm5lIHZhbiBLZXN0ZXJlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hY2llaiBTdGFjaG93aWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIHBvbGljeSAxLjUgLSBndWlkZWxpbmVzIGZvciBwb2xpY3kgYXNzZXJ0aW9uIGF1dGhvcnMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L05PVEUtd3MtcG9saWN5LWd1aWRlbGluZXMtMjAwNzExMTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBQb2xpY3kgMS41IC0gR3VpZGVsaW5lcyBmb3IgUG9saWN5IEFzc2VydGlvbiBBdXRob3JzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIFBvbGljeSAxLjUgLSBHdWlkZWxpbmVzIGZvciBQb2xpY3kgQXNzZXJ0aW9uIEF1dGhvcnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBQb2xpY3kgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTExLTEyIC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBQb2xpY3kgMS41IC0gR3VpZGVsaW5lcyBmb3IgUG9saWN5IEFzc2VydGlvbiBBdXRob3JzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93cy1wb2xpY3ktZ3VpZGVsaW5lcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaXIgVmVkYW11dGh1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgT3JjaGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ5YW5uIEhvbmRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UHJhc2FkIFllbmRsdXJpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG91ZmljIEJvdWJlegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPsOcbWl0IFlhbMOnaW5hbHAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBwb2xpY3kgMS41IC0gcHJpbWVyIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLXdzLXBvbGljeS1wcmltZXItMjAwNzExMTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBQb2xpY3kgMS41IC0gUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIFBvbGljeSAxLjUgLSBQcmltZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBQb2xpY3kgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTExLTEyIC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBQb2xpY3kgMS41IC0gUHJpbWVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93cy1wb2xpY3ktcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXNpciBWZWRhbXV0aHUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBPcmNoYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnlhbm4gSG9uZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmFzYWQgWWVuZGx1cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub3VmaWMgQm91YmV6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+w5xtaXQgWWFsw6dpbmFscAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHVzZXIgaW50ZXJhY3Rpb246IHRocmVhdCB0cmVlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvTk9URS13c2MtdGhyZWF0cy0yMDA3MTEwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFVzZXIgSW50ZXJhY3Rpb246IFRocmVhdCBUcmVlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBVc2VyIEludGVyYWN0aW9uOiBUaHJlYXQgVHJlZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZWN1cml0eSBDb250ZXh0IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0xMS0wMSAtIDxhIHRpdGxlPSJXZWIgVXNlciBJbnRlcmFjdGlvbjogVGhyZWF0IFRyZWVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93c2MtdGhyZWF0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRob21hcyBSb2Vzc2xlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icG93ZGVyOiB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L05PVEUtcG93ZGVyLXVzZS1jYXNlcy0yMDA3MTAzMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUE9XREVSOiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBPV0RFUjogVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0xMC0zMSAtIDxhIHRpdGxlPSJQT1dERVI6IFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wb3dkZXItdXNlLWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbCBBcmNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2VyIGFnZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAyLjAgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9XRC1VQUFHMjAtcmVxdWlyZW1lbnRzLTIwMDcxMDMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVc2VyIEFnZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAyLjAgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VXNlciBBZ2VudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMi4wIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VXNlciBBZ2VudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTEwLTMxIC0gPGEgdGl0bGU9IlVzZXIgQWdlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDIuMCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1VBQUcyMC1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KaW0gQWxsYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW4gUmljaGFyZHMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgZGVzY3JpcHRpb24gZWNvc3lzdGVtIDEuMCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvTk9URS1kZC1lY29zeXN0ZW0tMjAwNzEwMzEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERldmljZSBEZXNjcmlwdGlvbiBFY29zeXN0ZW0gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGV2aWNlICBEZXNjcmlwdGlvbiAgRWNvc3lzdGVtJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Nb2JpbGUgV2ViIEluaXRpYXRpdmUgRGV2aWNlIERlc2NyaXB0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0xMC0zMSAtIDxhIHRpdGxlPSJEZXZpY2UgRGVzY3JpcHRpb24gRWNvc3lzdGVtIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZGQtZWNvc3lzdGVtIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um90YW4gSGFucmFoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRldmljZSBkZXNjcmlwdGlvbiBsYW5kc2NhcGUgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLWRkLWxhbmRzY2FwZS0yMDA3MTAzMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGV2aWNlIERlc2NyaXB0aW9uIExhbmRzY2FwZSAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZXZpY2UgIERlc2NyaXB0aW9uICBMYW5kc2NhcGUmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1vYmlsZSBXZWIgSW5pdGlhdGl2ZSBEZXZpY2UgRGVzY3JpcHRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTEwLTMxIC0gPGEgdGl0bGU9IkRldmljZSBEZXNjcmlwdGlvbiBMYW5kc2NhcGUgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kZC1sYW5kc2NhcGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbW1hbnVlbCBOa2V6ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdhdmluIEphbWVzIFBlYXJjZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHQgV29tZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvdG9jb2wgZm9yIHdlYiBkZXNjcmlwdGlvbiByZXNvdXJjZXMgKHBvd2Rlcik6IHdlYiBkZXNjcmlwdGlvbiByZXNvdXJjZXMgKHdkcikgdm9jYWJ1bGFyeSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvV0QtcG93ZGVyLXZvYy0yMDA3MDkyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUik6IFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFdEUikgVm9jYWJ1bGFyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpOiBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChXRFIpIFZvY2FidWxhcnk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wOS0yNSAtIDxhIHRpdGxlPSJQcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKTogV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoV0RSKSBWb2NhYnVsYXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wb3dkZXItdm9jIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVhIFBlcmVnbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWwgQXJjaGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm90b2NvbCBmb3Igd2ViIGRlc2NyaXB0aW9uIHJlc291cmNlcyAocG93ZGVyKTogd2ViIGRlc2NyaXB0aW9uIHJlc291cmNlcyBkYXRhdHlwZXMgKHdkcmQpIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9XRC1wb3dkZXIteHNkLTIwMDcwOTI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQcm90b2NvbCBmb3IgV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyAoUE9XREVSKTogV2ViIERlc2NyaXB0aW9uIFJlc291cmNlcyBEYXRhdHlwZXMgKFdEUkQpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUik6IFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgRGF0YXR5cGVzIChXRFJEKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdG9jb2wgZm9yIFdlYiBEZXNjcmlwdGlvbiBSZXNvdXJjZXMgKFBPV0RFUikgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA5LTI1IC0gPGEgdGl0bGU9IlByb3RvY29sIGZvciBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIChQT1dERVIpOiBXZWIgRGVzY3JpcHRpb24gUmVzb3VyY2VzIERhdGF0eXBlcyAoV0RSRCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Bvd2Rlci14c2QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZWEgUGVyZWdvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbCBBcmNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZXZpbiBTbWl0aAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtdG9tIHNlcmlhbGl6YXRpb24gcG9saWN5IGFzc2VydGlvbiAxLjEiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvV0Qtc29hcDEyLW10b20tcG9saWN5LTIwMDcwOTE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNVE9NIFNlcmlhbGl6YXRpb24gUG9saWN5IEFzc2VydGlvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NVE9NICBTZXJpYWxpemF0aW9uICBQb2xpY3kgIEFzc2VydGlvbiZuYnNwOzEuMTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb3RvY29sIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wOS0xOCAtIDxhIHRpdGxlPSJNVE9NIFNlcmlhbGl6YXRpb24gUG9saWN5IEFzc2VydGlvbiAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NvYXAxMi1tdG9tLXBvbGljeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNocmlzdG9waGVyIEZlcnJpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPll2ZXMgTGFmb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGVjbGFyYXRpdmUgZm9ybWF0cyBmb3IgYXBwbGljYXRpb25zIGFuZCB1c2VyIGludGVyZmFjZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvTk9URS1kZmF1aS0yMDA3MDkxMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGVjbGFyYXRpdmUgRm9ybWF0cyBmb3IgQXBwbGljYXRpb25zIGFuZCBVc2VyIEludGVyZmFjZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EZWNsYXJhdGl2ZSBGb3JtYXRzIGZvciBBcHBsaWNhdGlvbnMgYW5kIFVzZXIgSW50ZXJmYWNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIEZvcm1hdHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA5LTEyIC0gPGEgdGl0bGU9IkRlY2xhcmF0aXZlIEZvcm1hdHMgZm9yIEFwcGxpY2F0aW9ucyBhbmQgVXNlciBJbnRlcmZhY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kZmF1aSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFydGh1ciBCYXJzdG93CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnbGVhbmluZyByZXNvdXJjZSBkZXNjcmlwdGlvbnMgZnJvbSBkaWFsZWN0cyBvZiBsYW5ndWFnZXMgKGdyZGRsKSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1JFQy1ncmRkbC0yMDA3MDkxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR2xlYW5pbmcgUmVzb3VyY2UgRGVzY3JpcHRpb25zIGZyb20gRGlhbGVjdHMgb2YgTGFuZ3VhZ2VzIChHUkRETCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HbGVhbmluZyBSZXNvdXJjZSBEZXNjcmlwdGlvbnMgZnJvbSBEaWFsZWN0cyBvZiBMYW5ndWFnZXMgKEdSRERMKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+R1JEREwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA5LTExIC0gPGEgdGl0bGU9IkdsZWFuaW5nIFJlc291cmNlIERlc2NyaXB0aW9ucyBmcm9tIERpYWxlY3RzIG9mIExhbmd1YWdlcyAoR1JEREwpIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ncmRkbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbiBDb25ub2xseQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImdyZGRsIHRlc3QgY2FzZXMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9SRUMtZ3JkZGwtdGVzdHMtMjAwNzA5MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEdSRERMIFRlc3QgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HUkRETCBUZXN0IENhc2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5HUkRETCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDktMTEgLSA8YSB0aXRsZT0iR1JEREwgVGVzdCBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZ3JkZGwtdGVzdHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGltZXppZSBPZ2J1amkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgc2VydmljZXMgcG9saWN5IDEuNSAtIGZyYW1ld29yayIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvUkVDLXdzLXBvbGljeS0yMDA3MDkwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIFBvbGljeSAxLjUgLSBGcmFtZXdvcmsgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgUG9saWN5IDEuNSAtIEZyYW1ld29yazwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFBvbGljeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDktMDQgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIFBvbGljeSAxLjUgLSBGcmFtZXdvcmsgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLXBvbGljeSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaXIgVmVkYW11dGh1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgT3JjaGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyZWRlcmljayBIaXJzY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ5YW5uIEhvbmRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UHJhc2FkIFllbmRsdXJpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG91ZmljIEJvdWJlegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPsOcbWl0IFlhbMOnaW5hbHAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGFkZHJlc3NpbmcgMS4wIC0gbWV0YWRhdGEiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1JFQy13cy1hZGRyLW1ldGFkYXRhLTIwMDcwOTA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgQWRkcmVzc2luZyAxLjAgLSBNZXRhZGF0YSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlcyBBZGRyZXNzaW5nIDEuMCAtIE1ldGFkYXRhPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgQWRkcmVzc2luZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDktMDQgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIEFkZHJlc3NpbmcgMS4wIC0gTWV0YWRhdGEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWFkZHItbWV0YWRhdGEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gR3VkZ2luCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyYyBIYWRsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub255IFJvZ2VycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPsOcbWl0IFlhbMOnaW5hbHAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBwb2xpY3kgMS41IC0gYXR0YWNobWVudCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvUkVDLXdzLXBvbGljeS1hdHRhY2gtMjAwNzA5MDQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBQb2xpY3kgMS41IC0gQXR0YWNobWVudCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlcyBQb2xpY3kgMS41IC0gQXR0YWNobWVudDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFBvbGljeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDktMDQgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIFBvbGljeSAxLjUgLSBBdHRhY2htZW50IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93cy1wb2xpY3ktYXR0YWNoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXNpciBWZWRhbXV0aHUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBPcmNoYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnlhbm4gSG9uZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmFzYWQgWWVuZGx1cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub3VmaWMgQm91YmV6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+w5xtaXQgWWFsw6dpbmFscAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2VtYW50aWMgYW5ub3RhdGlvbnMgZm9yIHdzZGwgYW5kIHhtbCBzY2hlbWEiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1JFQy1zYXdzZGwtMjAwNzA4MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNlbWFudGljIEFubm90YXRpb25zIGZvciBXU0RMIGFuZCBYTUwgU2NoZW1hIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VtYW50aWMgQW5ub3RhdGlvbnMgZm9yIFdTREwgYW5kIFhNTCBTY2hlbWE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIEFubm90YXRpb25zIGZvciBXZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA4LTI4IC0gPGEgdGl0bGU9IlNlbWFudGljIEFubm90YXRpb25zIGZvciBXU0RMIGFuZCBYTUwgU2NoZW1hIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zYXdzZGwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2VsIEZhcnJlbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ib2xnZXIgTGF1c2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZW1hbnRpYyBhbm5vdGF0aW9ucyBmb3Igd3NkbCBhbmQgeG1sIHNjaGVtYSDigJQgdXNhZ2UgZ3VpZGUiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L05PVEUtc2F3c2RsLWd1aWRlLTIwMDcwODI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZW1hbnRpYyBBbm5vdGF0aW9ucyBmb3IgV1NETCBhbmQgWE1MIFNjaGVtYSDigJQgVXNhZ2UgR3VpZGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TZW1hbnRpYyBBbm5vdGF0aW9ucyBmb3IgV1NETCBhbmQgWE1MIFNjaGVtYSDigJQgVXNhZ2UgR3VpZGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIEFubm90YXRpb25zIGZvciBXZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA4LTI4IC0gPGEgdGl0bGU9IlNlbWFudGljIEFubm90YXRpb25zIGZvciBXU0RMIGFuZCBYTUwgU2NoZW1hIOKAlCBVc2FnZSBHdWlkZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2F3c2RsLWd1aWRlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFtYSBBa2tpcmFqdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyYWhtYW5hbmRhIFNhcGtvdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImVmZmljaWVudCB4bWwgaW50ZXJjaGFuZ2UgbWVhc3VyZW1lbnRzIG5vdGUiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvV0QtZXhpLW1lYXN1cmVtZW50cy0yMDA3MDcyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSBNZWFzdXJlbWVudHMgTm90ZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkVmZmljaWVudCBYTUwgSW50ZXJjaGFuZ2UgTWVhc3VyZW1lbnRzIE5vdGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkVmZmljaWVudCBFeHRlbnNpYmxlIEludGVyY2hhbmdlICBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDctMjUgLSA8YSB0aXRsZT0iRWZmaWNpZW50IFhNTCBJbnRlcmNoYW5nZSBNZWFzdXJlbWVudHMgTm90ZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvZXhpLW1lYXN1cmVtZW50cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWcgV2hpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYWFra28gS2FuZ2FzaGFyanUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb24gQnJ1dHptYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGVwaGVuIFdpbGxpYW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imd1aWRlIHRvIHZlcnNpb25pbmcgeG1sIGxhbmd1YWdlcyB1c2luZyBuZXcgeG1sIHNjaGVtYSAxLjEgZmVhdHVyZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvV0QteG1sc2NoZW1hLWd1aWRlMnZlcnNpb25pbmctMjAwNzA3MjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEd1aWRlIHRvIFZlcnNpb25pbmcgWE1MIExhbmd1YWdlcyB1c2luZyBuZXcgWE1MIFNjaGVtYSAxLjEgZmVhdHVyZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HdWlkZSB0byBWZXJzaW9uaW5nIFhNTCBMYW5ndWFnZXMgdXNpbmcgbmV3IFhNTCBTY2hlbWEgMS4xIGZlYXR1cmVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2NoZW1hIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNy0yMCAtIDxhIHRpdGxlPSJHdWlkZSB0byBWZXJzaW9uaW5nIFhNTCBMYW5ndWFnZXMgdXNpbmcgbmV3IFhNTCBTY2hlbWEgMS4xIGZlYXR1cmVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzY2hlbWEtZ3VpZGUydmVyc2lvbmluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIE9yY2hhcmQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndzZGwgMS4xIGVsZW1lbnQgaWRlbnRpZmllcnMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L05PVEUtd3NkbDExZWxlbWVudGlkZW50aWZpZXJzLTIwMDcwNzIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXU0RMIDEuMSBFbGVtZW50IElkZW50aWZpZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V1NETCAxLjEgRWxlbWVudCBJZGVudGlmaWVyczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIFBvbGljeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDctMjAgLSA8YSB0aXRsZT0iV1NETCAxLjEgRWxlbWVudCBJZGVudGlmaWVycyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3NkbDExZWxlbWVudGlkZW50aWZpZXJzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgT3JjaGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaXIgVmVkYW11dGh1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJlZGVyaWNrIEhpcnNjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnlhbm4gSG9uZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmFzYWQgWWVuZGx1cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub3VmaWMgQm91YmV6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+w5xtaXQgWWFsw6dpbmFscAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieGJsIDIuMCBwcmltZXI6IGFuIGludHJvZHVjdGlvbiBmb3IgZGV2ZWxvcGVycyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9IndkIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPldEPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iV29ya2luZ0RyYWZ0Ij48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9XRC14YmwtcHJpbWVyLTIwMDcwNzE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYQkwgMi4wIFByaW1lcjogQW4gSW50cm9kdWN0aW9uIGZvciBEZXZlbG9wZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WEJMIDIuMCBQcmltZXI6IEFuIEludHJvZHVjdGlvbiBmb3IgRGV2ZWxvcGVyczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFwcGxpY2F0aW9uIEZvcm1hdHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA3LTE4IC0gPGEgdGl0bGU9IlhCTCAyLjAgUHJpbWVyOiBBbiBJbnRyb2R1Y3Rpb24gZm9yIERldmVsb3BlcnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hibC1wcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYWNobGFuIEh1bnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjb3MgQ2FjZXJlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzb2FwIDEuMiBwYXJ0IDM6IG9uZS13YXkgbWVwIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L05PVEUtc29hcDEyLXBhcnQzLTIwMDcwNzAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTT0FQIDEuMiBQYXJ0IDM6IE9uZS1XYXkgTUVQIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U09BUCAxLjIgUGFydCAzOiBPbmUtV2F5IE1FUDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb3RvY29sIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNy0wMiAtIDxhIHRpdGxlPSJTT0FQIDEuMiBQYXJ0IDM6IE9uZS1XYXkgTUVQIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zb2FwMTItcGFydDMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBPcmNoYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJncmRkbCBwcmltZXIiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLWdyZGRsLXByaW1lci0yMDA3MDYyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR1JEREwgUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+R1JEREwgUHJpbWVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5HUkRETCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDYtMjggLSA8YSB0aXRsZT0iR1JEREwgUHJpbWVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ncmRkbC1wcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IYXJyeSBIYWxwaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gRGF2aXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBkZXNjcmlwdGlvbiBsYW5ndWFnZSAod3NkbCkgdmVyc2lvbiAyLjAgcGFydCAyOiBhZGp1bmN0cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvUkVDLXdzZGwyMC1hZGp1bmN0cy0yMDA3MDYyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIExhbmd1YWdlIChXU0RMKSBWZXJzaW9uIDIuMCBQYXJ0IDI6IEFkanVuY3RzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIExhbmd1YWdlIChXU0RMKSBWZXJzaW9uIDIuMCBQYXJ0IDI6IEFkanVuY3RzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgRGVzY3JpcHRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA2LTI2IC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBMYW5ndWFnZSAoV1NETCkgVmVyc2lvbiAyLjAgUGFydCAyOiBBZGp1bmN0cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3NkbDIwLWFkanVuY3RzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iZXJ0byBDaGlubmljaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkh1Z28gSGFhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFtZWxpYSBMZXdpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplYW4tSmFjcXVlcyBNb3JlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBPcmNoYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2Fuaml2YSBXZWVyYXdhcmFuYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGRlc2NyaXB0aW9uIGxhbmd1YWdlICh3c2RsKSB2ZXJzaW9uIDIuMDogYWRkaXRpb25hbCBtZXBzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLXdzZGwyMC1hZGRpdGlvbmFsLW1lcHMtMjAwNzA2MjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBMYW5ndWFnZSAoV1NETCkgVmVyc2lvbiAyLjA6IEFkZGl0aW9uYWwgTUVQcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBMYW5ndWFnZSAoV1NETCkgVmVyc2lvbiAyLjA6IEFkZGl0aW9uYWwgTUVQczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNi0yNiAtIDxhIHRpdGxlPSJXZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgKFdTREwpIFZlcnNpb24gMi4wOiBBZGRpdGlvbmFsIE1FUHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzZGwyMC1hZGRpdGlvbmFsLW1lcHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbWVsaWEgTGV3aXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBkZXNjcmlwdGlvbiBsYW5ndWFnZSAod3NkbCkgdmVyc2lvbiAyLjAgcGFydCAwOiBwcmltZXIiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1JFQy13c2RsMjAtcHJpbWVyLTIwMDcwNjI2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgKFdTREwpIFZlcnNpb24gMi4wIFBhcnQgMDogUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIExhbmd1YWdlIChXU0RMKSBWZXJzaW9uIDIuMCBQYXJ0IDA6IFByaW1lcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNi0yNiAtIDxhIHRpdGxlPSJXZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgKFdTREwpIFZlcnNpb24gMi4wIFBhcnQgMDogUHJpbWVyIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93c2RsMjAtcHJpbWVyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQm9vdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZXZpbiBMaXUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBkZXNjcmlwdGlvbiBsYW5ndWFnZSAod3NkbCkgdmVyc2lvbiAyLjA6IHJkZiBtYXBwaW5nIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLXdzZGwyMC1yZGYtMjAwNzA2MjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBMYW5ndWFnZSAoV1NETCkgVmVyc2lvbiAyLjA6IFJERiBNYXBwaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIExhbmd1YWdlIChXU0RMKSBWZXJzaW9uIDIuMDogUkRGIE1hcHBpbmc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDYtMjYgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIExhbmd1YWdlIChXU0RMKSBWZXJzaW9uIDIuMDogUkRGIE1hcHBpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzZGwyMC1yZGYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYWNlayBLb3BlY2t5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgc2VydmljZXMgZGVzY3JpcHRpb24gbGFuZ3VhZ2UgKHdzZGwpIHZlcnNpb24gMi4wIHBhcnQgMTogY29yZSBsYW5ndWFnZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvUkVDLXdzZGwyMC0yMDA3MDYyNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIExhbmd1YWdlIChXU0RMKSBWZXJzaW9uIDIuMCBQYXJ0IDE6IENvcmUgTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgKFdTREwpIFZlcnNpb24gMi4wIFBhcnQgMTogQ29yZSBMYW5ndWFnZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNi0yNiAtIDxhIHRpdGxlPSJXZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgKFdTREwpIFZlcnNpb24gMi4wIFBhcnQgMTogQ29yZSBMYW5ndWFnZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3NkbDIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iZXJ0byBDaGlubmljaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplYW4tSmFjcXVlcyBNb3JlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BcnRodXIgUnltYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW5qaXZhIFdlZXJhd2FyYW5hCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgc2VydmljZXMgZGVzY3JpcHRpb24gbGFuZ3VhZ2UgKHdzZGwpIHZlcnNpb24gMi4wIHNvYXAgMS4xIGJpbmRpbmciIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L05PVEUtd3NkbDIwLXNvYXAxMS1iaW5kaW5nLTIwMDcwNjI2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgKFdTREwpIFZlcnNpb24gMi4wIFNPQVAgMS4xIEJpbmRpbmcgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgKFdTREwpIFZlcnNpb24gMi4wIFNPQVAgMS4xIEJpbmRpbmc8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDYtMjYgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIExhbmd1YWdlIChXU0RMKSBWZXJzaW9uIDIuMCBTT0FQIDEuMSBCaW5kaW5nIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93c2RsMjAtc29hcDExLWJpbmRpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bc2lyIFZlZGFtdXRodQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idm9pY2UgZXh0ZW5zaWJsZSBtYXJrdXAgbGFuZ3VhZ2UgKHZvaWNleG1sKSAyLjEiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvUkVDLXZvaWNleG1sMjEtMjAwNzA2MTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZvaWNlIEV4dGVuc2libGUgTWFya3VwIExhbmd1YWdlIChWb2ljZVhNTCkgMi4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Vm9pY2UgIEV4dGVuc2libGUgIE1hcmt1cCAgTGFuZ3VhZ2UgIChWb2ljZVhNTCkmbmJzcDsyLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA2LTE5IC0gPGEgdGl0bGU9IlZvaWNlIEV4dGVuc2libGUgTWFya3VwIExhbmd1YWdlIChWb2ljZVhNTCkgMi4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2ljZXhtbDIxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWF0dCBPc2hyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJKIEF1YnVybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhb2xvIEJhZ2dpYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgQm9kZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQnVya2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQnVybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplcnJ5IENhcnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IE1jR2xhc2hhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXggTGVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnJhbmRvbiBQb3J0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZW5uZXRoIFJlaG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZXJpYWxpemluZyBzcGFycWwgcXVlcnkgcmVzdWx0cyBpbiBqc29uIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvTk9URS1yZGYtc3BhcnFsLWpzb24tcmVzLTIwMDcwNjE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTZXJpYWxpemluZyBTUEFSUUwgUXVlcnkgUmVzdWx0cyBpbiBKU09OIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VyaWFsaXppbmcgU1BBUlFMIFF1ZXJ5IFJlc3VsdHMgaW4gSlNPTjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1BBUlFMIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNi0xOCAtIDxhIHRpdGxlPSJTZXJpYWxpemluZyBTUEFSUUwgUXVlcnkgUmVzdWx0cyBpbiBKU09OIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGYtc3BhcnFsLWpzb24tcmVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2VuZGFsbCBDbGFyawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxlZSBGZWlnZW5iYXVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWxpYXMgVG9ycmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BlZWNoIHN5bnRoZXNpcyBtYXJrdXAgbGFuZ3VhZ2UgdmVyc2lvbiAxLjEgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvV0Qtc3NtbDExcmVxcy0yMDA3MDYxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU3BlZWNoIFN5bnRoZXNpcyBNYXJrdXAgTGFuZ3VhZ2UgVmVyc2lvbiAxLjEgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U3BlZWNoIFN5bnRoZXNpcyBNYXJrdXAgTGFuZ3VhZ2UgVmVyc2lvbiAxLjEgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNi0xMSAtIDxhIHRpdGxlPSJTcGVlY2ggU3ludGhlc2lzIE1hcmt1cCBMYW5ndWFnZSBWZXJzaW9uIDEuMSBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NzbWwxMXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQnVybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlpoaSBXZWkgU2h1YW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyBmaWx0ZXJzIDEuMiwgcGFydCAyOiBsYW5ndWFnZSIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1dELVNWR0ZpbHRlcjEyLTIwMDcwNTAxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTVkcgRmlsdGVycyAxLjIsIFBhcnQgMjogTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgRmlsdGVycyAxLjIsIFBhcnQgMjogTGFuZ3VhZ2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDUtMDEgLSA8YSB0aXRsZT0iU1ZHIEZpbHRlcnMgMS4yLCBQYXJ0IDI6IExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TVkdGaWx0ZXIxMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWsgRGFobHN0csO2bQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzdmcgZmlsdGVycyAxLjIsIHBhcnQgMTogcHJpbWVyIiBkYXRhLXRhZz0iZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvV0QtU1ZHRmlsdGVyUHJpbWVyMTItMjAwNzA1MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNWRyBGaWx0ZXJzIDEuMiwgUGFydCAxOiBQcmltZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgRmlsdGVycyAxLjIsIFBhcnQgMTogUHJpbWVyPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA1LTAxIC0gPGEgdGl0bGU9IlNWRyBGaWx0ZXJzIDEuMiwgUGFydCAxOiBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWR0ZpbHRlclByaW1lcjEyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpayBEYWhsc3Ryw7ZtCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzb2FwIHZlcnNpb24gMS4yIHNwZWNpZmljYXRpb24gYXNzZXJ0aW9ucyBhbmQgdGVzdCBjb2xsZWN0aW9uIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1JFQy1zb2FwMTItdGVzdGNvbGxlY3Rpb24tMjAwNzA0MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNPQVAgVmVyc2lvbiAxLjIgU3BlY2lmaWNhdGlvbiBBc3NlcnRpb25zIGFuZCBUZXN0IENvbGxlY3Rpb24gKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNPQVAgVmVyc2lvbiAxLjIgU3BlY2lmaWNhdGlvbiBBc3NlcnRpb25zIGFuZCBUZXN0IENvbGxlY3Rpb24gKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb3RvY29sIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wNC0yNyAtIDxhIHRpdGxlPSJTT0FQIFZlcnNpb24gMS4yIFNwZWNpZmljYXRpb24gQXNzZXJ0aW9ucyBhbmQgVGVzdCBDb2xsZWN0aW9uIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NvYXAxMi10ZXN0Y29sbGVjdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkh1Z28gSGFhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9pc2luIEh1cmxleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuaXNoIEthcm1hcmthcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplZmYgTWlzY2hraW5za3kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEpvbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+THlubmUgUi4gVGhvbXBzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIEQuIE1hcnRpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNvYXAgdmVyc2lvbiAxLjIgcGFydCAxOiBtZXNzYWdpbmcgZnJhbWV3b3JrIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1JFQy1zb2FwMTItcGFydDEtMjAwNzA0MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNPQVAgVmVyc2lvbiAxLjIgUGFydCAxOiBNZXNzYWdpbmcgRnJhbWV3b3JrIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TT0FQIFZlcnNpb24gMS4yIFBhcnQgMTogTWVzc2FnaW5nIEZyYW1ld29yayAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA0LTI3IC0gPGEgdGl0bGU9IlNPQVAgVmVyc2lvbiAxLjIgUGFydCAxOiBNZXNzYWdpbmcgRnJhbWV3b3JrIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NvYXAxMi1wYXJ0MSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnRpbiBHdWRnaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjIEhhZGxleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vYWggTWVuZGVsc29obgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplYW4tSmFjcXVlcyBNb3JlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yaWsgRnJ5c3R5ayBOaWVsc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5pc2ggS2FybWFya2FyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXZlcyBMYWZvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNvYXAgdmVyc2lvbiAxLjIgcGFydCAwOiBwcmltZXIgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvUkVDLXNvYXAxMi1wYXJ0MC0yMDA3MDQyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU09BUCBWZXJzaW9uIDEuMiBQYXJ0IDA6IFByaW1lciAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U09BUCBWZXJzaW9uIDEuMiBQYXJ0IDA6IFByaW1lciAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA0LTI3IC0gPGEgdGl0bGU9IlNPQVAgVmVyc2lvbiAxLjIgUGFydCAwOiBQcmltZXIgKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc29hcDEyLXBhcnQwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmlsbyBNaXRyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPll2ZXMgTGFmb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic29hcCB2ZXJzaW9uIDEuMiBwYXJ0IDI6IGFkanVuY3RzIChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA3L1JFQy1zb2FwMTItcGFydDItMjAwNzA0MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNPQVAgVmVyc2lvbiAxLjIgUGFydCAyOiBBZGp1bmN0cyAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U09BUCBWZXJzaW9uIDEuMiBQYXJ0IDI6IEFkanVuY3RzIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBQcm90b2NvbCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDQtMjcgLSA8YSB0aXRsZT0iU09BUCBWZXJzaW9uIDEuMiBQYXJ0IDI6IEFkanVuY3RzIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NvYXAxMi1wYXJ0MiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnRpbiBHdWRnaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjIEhhZGxleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vYWggTWVuZGVsc29obgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplYW4tSmFjcXVlcyBNb3JlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yaWsgRnJ5c3R5ayBOaWVsc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5pc2ggS2FybWFya2FyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXZlcyBMYWZvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZ3JkZGwgdXNlIGNhc2VzOiBzY2VuYXJpb3Mgb2YgZXh0cmFjdGluZyByZGYgZGF0YSBmcm9tIHhtbCBkb2N1bWVudHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLWdyZGRsLXNjZW5hcmlvcy0yMDA3MDQwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR1JEREwgVXNlIENhc2VzOiBTY2VuYXJpb3Mgb2YgZXh0cmFjdGluZyBSREYgZGF0YSBmcm9tIFhNTCBkb2N1bWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HUkRETCBVc2UgQ2FzZXM6IFNjZW5hcmlvcyBvZiBleHRyYWN0aW5nIFJERiBkYXRhIGZyb20gWE1MIGRvY3VtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+R1JEREwgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTA0LTA2IC0gPGEgdGl0bGU9IkdSRERMIFVzZSBDYXNlczogU2NlbmFyaW9zIG9mIGV4dHJhY3RpbmcgUkRGIGRhdGEgZnJvbSBYTUwgZG9jdW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ncmRkbC1zY2VuYXJpb3MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GYWJpZW4gR2FuZG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZW1hbnRpYyBpbnRlcnByZXRhdGlvbiBmb3Igc3BlZWNoIHJlY29nbml0aW9uIChzaXNyKSB2ZXJzaW9uIDEuMCIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9SRUMtc2VtYW50aWMtaW50ZXJwcmV0YXRpb24tMjAwNzA0MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNlbWFudGljIEludGVycHJldGF0aW9uIGZvciBTcGVlY2ggUmVjb2duaXRpb24gKFNJU1IpIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2VtYW50aWMgIEludGVycHJldGF0aW9uICBmb3IgIFNwZWVjaCAgUmVjb2duaXRpb24gIChTSVNSKSAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Vm9pY2UgQnJvd3NlciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDQtMDUgLSA8YSB0aXRsZT0iU2VtYW50aWMgSW50ZXJwcmV0YXRpb24gZm9yIFNwZWVjaCBSZWNvZ25pdGlvbiAoU0lTUikgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NlbWFudGljLWludGVycHJldGF0aW9uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+THVjIFZhbiBUaWNoZWxlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIEJ1cmtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImludGVybmF0aW9uYWxpemF0aW9uIHRhZyBzZXQgKGl0cykgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSJpMThuIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9SRUMtaXRzLTIwMDcwNDAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbnRlcm5hdGlvbmFsaXphdGlvbiBUYWcgU2V0IChJVFMpIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SW50ZXJuYXRpb25hbGl6YXRpb24gIFRhZyAgU2V0ICAoSVRTKSAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDQtMDMgLSA8YSB0aXRsZT0iSW50ZXJuYXRpb25hbGl6YXRpb24gVGFnIFNldCAoSVRTKSBWZXJzaW9uIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaXRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXN0aWFuIExpZXNrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZlbGl4IFNhc2FraQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmRmYSB1c2UgY2FzZXM6IHNjZW5hcmlvcyBmb3IgZW1iZWRkaW5nIHJkZiBpbiBodG1sIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9XRC14aHRtbC1yZGZhLXNjZW5hcmlvcy0yMDA3MDMzMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUkRGYSBVc2UgQ2FzZXM6IFNjZW5hcmlvcyBmb3IgRW1iZWRkaW5nIFJERiBpbiBIVE1MIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGYSBVc2UgQ2FzZXM6IFNjZW5hcmlvcyBmb3IgRW1iZWRkaW5nIFJERiBpbiBIVE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgRGVwbG95bWVudCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDctMDMtMzAgLSA8YSB0aXRsZT0iUkRGYSBVc2UgQ2FzZXM6IFNjZW5hcmlvcyBmb3IgRW1iZWRkaW5nIFJERiBpbiBIVE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbC1yZGZhLXNjZW5hcmlvcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJlbiBBZGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgSGF1c2VuYmxhcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgcXVlcnkgdXNlIGNhc2VzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNy9OT1RFLXhxdWVyeS11c2UtY2FzZXMtMjAwNzAzMjMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBRdWVyeSBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgUXVlcnkgVXNlIENhc2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUXVlcnkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA3LTAzLTIzIC0gPGEgdGl0bGU9IlhNTCBRdWVyeSBVc2UgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hxdWVyeS11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Eb24gQ2hhbWJlcmxpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIEZhbmtoYXVzZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWxhIEZsb3Jlc2N1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzc2ltbyBNYXJjaGlvcmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBSb2JpZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHF1ZXJ5ICh4cXVlcnkpIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDcvTk9URS14cXVlcnktcmVxdWlyZW1lbnRzLTIwMDcwMzIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgUXVlcnkgKFhRdWVyeSkgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFF1ZXJ5IChYUXVlcnkpIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNy0wMy0yMyAtIDxhIHRpdGxlPSJYTUwgUXVlcnkgKFhRdWVyeSkgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnktcmVxdWlyZW1lbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uIENoYW1iZXJsaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBGYW5raGF1c2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzc2ltbyBNYXJjaGlvcmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBSb2JpZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1c2luZyB4bWwgZGlnaXRhbCBzaWduYXR1cmVzIGluIHRoZSAyMDA2IHhtbCBlbnZpcm9ubWVudCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS1EU2lnLXVzYWdlLTIwMDYxMjIwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVc2luZyBYTUwgRGlnaXRhbCBTaWduYXR1cmVzIGluIHRoZSAyMDA2IFhNTCBFbnZpcm9ubWVudCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVzaW5nIFhNTCBEaWdpdGFsIFNpZ25hdHVyZXMgaW4gdGhlIDIwMDYgWE1MIEVudmlyb25tZW50PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMTItMjAgLSA8YSB0aXRsZT0iVXNpbmcgWE1MIERpZ2l0YWwgU2lnbmF0dXJlcyBpbiB0aGUgMjAwNiBYTUwgRW52aXJvbm1lbnQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0RTaWctdXNhZ2UiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaG9tYXMgUm9lc3NsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ia25vd24gaXNzdWVzIHdpdGggY2Fub25pY2FsIHhtbCAxLjAgKGMxNG4vMS4wKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS1DMTROLWlzc3Vlcy0yMDA2MTIyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgS25vd24gSXNzdWVzIHdpdGggQ2Fub25pY2FsIFhNTCAxLjAgKEMxNE4vMS4wKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPktub3duIElzc3VlcyB3aXRoIENhbm9uaWNhbCBYTUwgMS4wIChDMTROLzEuMCk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNi0xMi0yMCAtIDxhIHRpdGxlPSJLbm93biBJc3N1ZXMgd2l0aCBDYW5vbmljYWwgWE1MIDEuMCAoQzE0Ti8xLjApIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9DMTROLWlzc3VlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc8OpIEthaGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S29ucmFkIExhbnoKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2libGUgc3R5bGVzaGVldCBsYW5ndWFnZSAoeHNsKSB2ZXJzaW9uIDEuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvUkVDLXhzbDExLTIwMDYxMjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFeHRlbnNpYmxlIFN0eWxlc2hlZXQgTGFuZ3VhZ2UgKFhTTCkgVmVyc2lvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FeHRlbnNpYmxlICBTdHlsZXNoZWV0ICBMYW5ndWFnZSAgKFhTTCkgIFZlcnNpb24mbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTEyLTA1IC0gPGEgdGl0bGU9IkV4dGVuc2libGUgU3R5bGVzaGVldCBMYW5ndWFnZSAoWFNMKSBWZXJzaW9uIDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsMTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRlcnMgQmVyZ2x1bmQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmljaCB3ZWIgYXBwbGljYXRpb24gYmFja3BsYW5lIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNi9OT1RFLWJhY2twbGFuZS0yMDA2MTExNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmljaCBXZWIgQXBwbGljYXRpb24gQmFja3BsYW5lIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmljaCBXZWIgQXBwbGljYXRpb24gQmFja3BsYW5lPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5IeXBlcnRleHQgQ29vcmRpbmF0aW9uIEdyb3VwIChNZW1iZXIpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMTEtMTYgLSA8YSB0aXRsZT0iUmljaCBXZWIgQXBwbGljYXRpb24gQmFja3BsYW5lIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9iYWNrcGxhbmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEJpcmJlY2sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIEJveWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxmcmVkIFMuIEdpbG1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktldmluIEtlbGx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmVuIFBlbWJlcnRvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkNoYXJsZXMgV2llY2hhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBpbmNsdXNpb25zICh4aW5jbHVkZSkgdmVyc2lvbiAxLjAgKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvUkVDLXhpbmNsdWRlLTIwMDYxMTE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgSW5jbHVzaW9ucyAoWEluY2x1ZGUpIFZlcnNpb24gMS4wIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgSW5jbHVzaW9ucyAoWEluY2x1ZGUpIFZlcnNpb24gMS4wIChTZWNvbmQgRWRpdGlvbik8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNi0xMS0xNSAtIDxhIHRpdGxlPSJYTUwgSW5jbHVzaW9ucyAoWEluY2x1ZGUpIFZlcnNpb24gMS4wIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hpbmNsdWRlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uYXRoYW4gTWFyc2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBPcmNoYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFZlaWxsYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlbW90ZSBldmVudHMgZm9yIHhtbCAocmV4KSAxLjAiIGRhdGEtdGFnPSJkb20geG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1dELXJleC0yMDA2MTAxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVtb3RlIEV2ZW50cyBmb3IgWE1MIChSRVgpIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlbW90ZSAgRXZlbnRzICBmb3IgIFhNTCAgKFJFWCkmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIEFQSSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMTAtMTMgLSA8YSB0aXRsZT0iUmVtb3RlIEV2ZW50cyBmb3IgWE1MIChSRVgpIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmV4Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iaW4gQmVyam9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbW1vbiBzZW5zZSBzdWdnZXN0aW9ucyBmb3IgZGV2ZWxvcGluZyBtdWx0aW1vZGFsIHVzZXIgaW50ZXJmYWNlcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS1tbWktc3VnZ2VzdGlvbnMtMjAwNjA5MTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbW1vbiBTZW5zZSBTdWdnZXN0aW9ucyBmb3IgRGV2ZWxvcGluZyBNdWx0aW1vZGFsIFVzZXIgSW50ZXJmYWNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbW1vbiBTZW5zZSBTdWdnZXN0aW9ucyBmb3IgRGV2ZWxvcGluZyBNdWx0aW1vZGFsIFVzZXIgSW50ZXJmYWNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDktMTEgLSA8YSB0aXRsZT0iQ29tbW9uIFNlbnNlIFN1Z2dlc3Rpb25zIGZvciBEZXZlbG9waW5nIE11bHRpbW9kYWwgVXNlciBJbnRlcmZhY2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tbWktc3VnZ2VzdGlvbnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KaW0gTGFyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im5hbWVzcGFjZXMgaW4geG1sIDEuMSAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249InVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1JFQy14bWwtbmFtZXMxMS0yMDA2MDgxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTmFtZXNwYWNlcyBpbiBYTUwgMS4xIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5OYW1lc3BhY2VzIGluIFhNTCAxLjEgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTA4LTE2IC0gPGEgdGl0bGU9Ik5hbWVzcGFjZXMgaW4gWE1MIDEuMSAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtbmFtZXMxMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRpbSBCcmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBIb2xsYW5kZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXcgTGF5bWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmljaGFyZCBUb2JpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2libGUgbWFya3VwIGxhbmd1YWdlICh4bWwpIDEuMSAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249InVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1JFQy14bWwxMS0yMDA2MDgxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXh0ZW5zaWJsZSBNYXJrdXAgTGFuZ3VhZ2UgKFhNTCkgMS4xIChTZWNvbmQgRWRpdGlvbikgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5FeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoWE1MKSAxLjEgKFNlY29uZCBFZGl0aW9uKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTA4LTE2IC0gPGEgdGl0bGU9IkV4dGVuc2libGUgTWFya3VwIExhbmd1YWdlIChYTUwpIDEuMSAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwxMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRpbSBCcmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbiBQYW9saQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgU3BlcmJlcmctTWNRdWVlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV2ZSBNYWxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyYW7Dp29pcyBZZXJnZWF1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBDb3dhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2Z3QgMS4yIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1dELVNWR1RpbnkxMlJlcXMtMjAwNjA4MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNWR1QgMS4yIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNWR1QgMS4yIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNi0wOC0xMCAtIDxhIHRpdGxlPSJTVkdUIDEuMiBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWR1RpbnkxMlJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXcgRW1tb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBjaG9yZW9ncmFwaHkgZGVzY3JpcHRpb24gbGFuZ3VhZ2U6IHByaW1lciIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNi9XRC13cy1jZGwtMTAtcHJpbWVyLTIwMDYwNjE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgQ2hvcmVvZ3JhcGh5IERlc2NyaXB0aW9uIExhbmd1YWdlOiBQcmltZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgQ2hvcmVvZ3JhcGh5IERlc2NyaXB0aW9uIExhbmd1YWdlOiBQcmltZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBDaG9yZW9ncmFwaHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTA2LTE5IC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBDaG9yZW9ncmFwaHkgRGVzY3JpcHRpb24gTGFuZ3VhZ2U6IFByaW1lciBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3MtY2RsLTEwLXByaW1lciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlIFJvc3MtVGFsYm90CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9ueSBGbGV0Y2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYvb3dsIHJlcHJlc2VudGF0aW9uIG9mIHdvcmRuZXQiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1dELXdvcmRuZXQtcmRmLTIwMDYwNjE5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSREYvT1dMIFJlcHJlc2VudGF0aW9uIG9mIFdvcmROZXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYvT1dMIFJlcHJlc2VudGF0aW9uIG9mIFdvcmROZXQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBCZXN0IFByYWN0aWNlcyBhbmQgRGVwbG95bWVudCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDYtMTkgLSA8YSB0aXRsZT0iUkRGL09XTCBSZXByZXNlbnRhdGlvbiBvZiBXb3JkTmV0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93b3JkbmV0LXJkZiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgdmFuIEFzc2VtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxkbyBHYW5nZW1pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3V1cyBTY2hyZWliZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImludGVybmF0aW9uYWxpemF0aW9uIGFuZCBsb2NhbGl6YXRpb24gbWFya3VwIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvV0QtaXRzcmVxLTIwMDYwNTE4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgTG9jYWxpemF0aW9uIE1hcmt1cCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5JbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgTG9jYWxpemF0aW9uIE1hcmt1cCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFRhZyBTZXQgKElUUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTA1LTE4IC0gPGEgdGl0bGU9IkludGVybmF0aW9uYWxpemF0aW9uIGFuZCBMb2NhbGl6YXRpb24gTWFya3VwIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaXRzcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXZlcyBTYXZvdXJlbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBhZGRyZXNzaW5nIDEuMCAtIGNvcmUiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1JFQy13cy1hZGRyLWNvcmUtMjAwNjA1MDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBBZGRyZXNzaW5nIDEuMCAtIENvcmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgQWRkcmVzc2luZyAxLjAgLSBDb3JlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgQWRkcmVzc2luZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDUtMDkgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIEFkZHJlc3NpbmcgMS4wIC0gQ29yZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3MtYWRkci1jb3JlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFydGluIEd1ZGdpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmMgSGFkbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9ueSBSb2dlcnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBhZGRyZXNzaW5nIDEuMCAtIHNvYXAgYmluZGluZyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvUkVDLXdzLWFkZHItc29hcC0yMDA2MDUwOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEFkZHJlc3NpbmcgMS4wIC0gU09BUCBCaW5kaW5nIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIEFkZHJlc3NpbmcgMS4wIC0gU09BUCBCaW5kaW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgQWRkcmVzc2luZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDUtMDkgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIEFkZHJlc3NpbmcgMS4wIC0gU09BUCBCaW5kaW5nIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93cy1hZGRyLXNvYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gR3VkZ2luCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyYyBIYWRsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ub255IFJvZ2VycwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aW1lZCB0ZXh0ICh0dCkgYXV0aG9yaW5nIGZvcm1hdCAxLjAgdXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS10dGFmMS1yZXEtMjAwNjA0MjcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRpbWVkIFRleHQgKFRUKSBBdXRob3JpbmcgRm9ybWF0IDEuMCBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRpbWVkIFRleHQgKFRUKSBBdXRob3JpbmcgRm9ybWF0IDEuMCBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VGltZWQgVGV4dCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDQtMjcgLSA8YSB0aXRsZT0iVGltZWQgVGV4dCAoVFQpIEF1dGhvcmluZyBGb3JtYXQgMS4wIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS90dGFmMS1yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HbGVubiBBZGFtcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGZvciB3Y2FnIDIuMCIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L05PVEUtd2NhZzItcmVxLTIwMDYwNDI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXF1aXJlbWVudHMgZm9yIFdDQUcgMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVxdWlyZW1lbnRzICBmb3IgIFdDQUcmbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDQtMjUgLSA8YSB0aXRsZT0iUmVxdWlyZW1lbnRzIGZvciBXQ0FHIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2NhZzItcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZ2cgVmFuZGVyaGVpZGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9obiBTbGF0aW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XZW5keSBDaGlzaG9sbQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im11bHRpbW9kYWwgYXBwbGljYXRpb24gZGV2ZWxvcGVyIGZlZWRiYWNrIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNi9OT1RFLW1taS1kZXYtZmVlZGJhY2stMjAwNjA0MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE11bHRpbW9kYWwgQXBwbGljYXRpb24gRGV2ZWxvcGVyIEZlZWRiYWNrIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TXVsdGltb2RhbCBBcHBsaWNhdGlvbiBEZXZlbG9wZXIgRmVlZGJhY2s8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk11bHRpbW9kYWwgSW50ZXJhY3Rpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTA0LTE0IC0gPGEgdGl0bGU9Ik11bHRpbW9kYWwgQXBwbGljYXRpb24gRGV2ZWxvcGVyIEZlZWRiYWNrIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tbWktZGV2LWZlZWRiYWNrIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2VyYWxkIE1jQ29iYgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktsYXVzIFJlaWZlbnJhdGgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SYWogVHVtdWx1cmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdW5pbCBLdW1hcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGVmaW5pbmcgbi1hcnkgcmVsYXRpb25zIG9uIHRoZSBzZW1hbnRpYyB3ZWIiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNi9OT1RFLXN3YnAtbi1hcnlSZWxhdGlvbnMtMjAwNjA0MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERlZmluaW5nIE4tYXJ5IFJlbGF0aW9ucyBvbiB0aGUgU2VtYW50aWMgV2ViIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGVmaW5pbmcgTi1hcnkgUmVsYXRpb25zIG9uIHRoZSBTZW1hbnRpYyBXZWI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBCZXN0IFByYWN0aWNlcyBhbmQgRGVwbG95bWVudCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDQtMTIgLSA8YSB0aXRsZT0iRGVmaW5pbmcgTi1hcnkgUmVsYXRpb25zIG9uIHRoZSBTZW1hbnRpYyBXZWIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3N3YnAtbi1hcnlSZWxhdGlvbnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYXRhc2hhIE5veQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsYW4gUmVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHByb2Nlc3NpbmcgbW9kZWwgcmVxdWlyZW1lbnRzIGFuZCB1c2UgY2FzZXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvV0QteHByb2MtcmVxdWlyZW1lbnRzLTIwMDYwNDExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgUHJvY2Vzc2luZyBNb2RlbCBSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBQcm9jZXNzaW5nIE1vZGVsIFJlcXVpcmVtZW50cyBhbmQgVXNlIENhc2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNi0wNC0xMSAtIDxhIHRpdGxlPSJYTUwgUHJvY2Vzc2luZyBNb2RlbCBSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHByb2MtcmVxdWlyZW1lbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleCBNacWCb3dza2kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlIGRpc3Bvc2l0aW9uIG9mIG5hbWVzIGluIGFuIHhtbCBuYW1lc3BhY2UiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvV0QtbmFtZXNwYWNlU3RhdGUtMjAwNjAzMjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRoZSBEaXNwb3NpdGlvbiBvZiBOYW1lcyBpbiBhbiBYTUwgTmFtZXNwYWNlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIERpc3Bvc2l0aW9uIG9mIE5hbWVzIGluIGFuIFhNTCBOYW1lc3BhY2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlRlY2huaWNhbCBBcmNoaXRlY3R1cmUgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNi0wMy0yOSAtIDxhIHRpdGxlPSJUaGUgRGlzcG9zaXRpb24gb2YgTmFtZXMgaW4gYW4gWE1MIE5hbWVzcGFjZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbmFtZXNwYWNlU3RhdGUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJpbWFnZSBhbm5vdGF0aW9uIG9uIHRoZSBzZW1hbnRpYyB3ZWIiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L1dELXN3YnAtaW1hZ2UtYW5ub3RhdGlvbi0yMDA2MDMyMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSW1hZ2UgQW5ub3RhdGlvbiBvbiB0aGUgU2VtYW50aWMgV2ViIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SW1hZ2UgQW5ub3RhdGlvbiBvbiB0aGUgU2VtYW50aWMgV2ViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgQmVzdCBQcmFjdGljZXMgYW5kIERlcGxveW1lbnQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTAzLTIyIC0gPGEgdGl0bGU9IkltYWdlIEFubm90YXRpb24gb24gdGhlIFNlbWFudGljIFdlYiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3dicC1pbWFnZS1hbm5vdGF0aW9uIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFjY28gdmFuIE9zc2VuYnJ1Z2dlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJhcGhhw6tsIFRyb25jeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdpb3Jnb3MgU3RhbW91CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVmZiBQYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzb2FwIDEuMSByZXF1ZXN0IG9wdGlvbmFsIHJlc3BvbnNlIGh0dHAgYmluZGluZyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS1zb2FwMTEtcm9yLWh0dHBiaW5kaW5nLTIwMDYwMzIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTT0FQIDEuMSBSZXF1ZXN0IE9wdGlvbmFsIFJlc3BvbnNlIEhUVFAgQmluZGluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNPQVAgMS4xIFJlcXVlc3QgT3B0aW9uYWwgUmVzcG9uc2UgSFRUUCBCaW5kaW5nPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgQWRkcmVzc2luZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDMtMjEgLSA8YSB0aXRsZT0iU09BUCAxLjEgUmVxdWVzdCBPcHRpb25hbCBSZXNwb25zZSBIVFRQIEJpbmRpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NvYXAxMS1yb3ItaHR0cGJpbmRpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBPcmNoYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZWxpdmVyeSBjb250ZXh0IG92ZXJ2aWV3IGZvciBkZXZpY2UgaW5kZXBlbmRlbmNlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNi9OT1RFLWRpLWRjby0yMDA2MDMyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGVsaXZlcnkgQ29udGV4dCBPdmVydmlldyBmb3IgRGV2aWNlIEluZGVwZW5kZW5jZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRlbGl2ZXJ5IENvbnRleHQgT3ZlcnZpZXcgZm9yIERldmljZSBJbmRlcGVuZGVuY2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZSBJbmRlcGVuZGVuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTAzLTIwIC0gPGEgdGl0bGU9IkRlbGl2ZXJ5IENvbnRleHQgT3ZlcnZpZXcgZm9yIERldmljZSBJbmRlcGVuZGVuY2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RpLWRjbyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvZ2VyIEdpbXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJoeXMgTGV3aXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYWlsZXNoIFNhdGhpc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzY2hlbWEgZGF0YXR5cGVzIGluIHJkZiBhbmQgb3dsIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS1zd2JwLXhzY2gtZGF0YXR5cGVzLTIwMDYwMzE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgU2NoZW1hIERhdGF0eXBlcyBpbiBSREYgYW5kIE9XTCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBTY2hlbWEgRGF0YXR5cGVzIGluIFJERiBhbmQgT1dMPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgQmVzdCBQcmFjdGljZXMgYW5kIERlcGxveW1lbnQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA2LTAzLTE0IC0gPGEgdGl0bGU9IlhNTCBTY2hlbWEgRGF0YXR5cGVzIGluIFJERiBhbmQgT1dMIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zd2JwLXhzY2gtZGF0YXR5cGVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVyZW15IENhcnJvbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZWZmIFBhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImEgc2VtYW50aWMgd2ViIHByaW1lciBmb3Igb2JqZWN0LW9yaWVudGVkIHNvZnR3YXJlIGRldmVsb3BlcnMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNi9OT1RFLXN3LW9vc2QtcHJpbWVyLTIwMDYwMzA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBIFNlbWFudGljIFdlYiBQcmltZXIgZm9yIE9iamVjdC1PcmllbnRlZCBTb2Z0d2FyZSBEZXZlbG9wZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QSBTZW1hbnRpYyBXZWIgUHJpbWVyIGZvciBPYmplY3QtT3JpZW50ZWQgU29mdHdhcmUgRGV2ZWxvcGVyczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U2VtYW50aWMgV2ViIEJlc3QgUHJhY3RpY2VzIGFuZCBEZXBsb3ltZW50IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNi0wMy0wOSAtIDxhIHRpdGxlPSJBIFNlbWFudGljIFdlYiBQcmltZXIgZm9yIE9iamVjdC1PcmllbnRlZCBTb2Z0d2FyZSBEZXZlbG9wZXJzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zdy1vb3NkLXByaW1lciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhvbGdlciBLbnVibGF1Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgT2JlcmxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbGlwIFRldGxvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV2YW4gV2FsbGFjZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImEgc3VydmV5IG9mIHJkZi90b3BpYyBtYXBzIGludGVyb3BlcmFiaWxpdHkgcHJvcG9zYWxzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS1yZGZ0bS1zdXJ2ZXktMjAwNjAyMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEEgU3VydmV5IG9mIFJERi9Ub3BpYyBNYXBzIEludGVyb3BlcmFiaWxpdHkgUHJvcG9zYWxzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QSBTdXJ2ZXkgb2YgUkRGL1RvcGljIE1hcHMgSW50ZXJvcGVyYWJpbGl0eSBQcm9wb3NhbHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBCZXN0IFByYWN0aWNlcyBhbmQgRGVwbG95bWVudCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDItMTAgLSA8YSB0aXRsZT0iQSBTdXJ2ZXkgb2YgUkRGL1RvcGljIE1hcHMgSW50ZXJvcGVyYWJpbGl0eSBQcm9wb3NhbHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZnRtLXN1cnZleSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlIFBlcHBlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZhYmlvIFZpdGFsaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxhcnMgTWFyaXVzIEdhcnNob2wKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OaWNvbGEgR2Vzc2EKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5WYWxlbnRpbmEgUHJlc3V0dGkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZW1vdGUgZXZlbnRzIGZvciB4bWwgKHJleCkgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iZG9tIHhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDYvTk9URS1yZXgtcmVxcy0yMDA2MDIwMi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUmVtb3RlIEV2ZW50cyBmb3IgWE1MIChSRVgpIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlbW90ZSBFdmVudHMgZm9yIFhNTCAoUkVYKSBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDYtMDItMDIgLSA8YSB0aXRsZT0iUmVtb3RlIEV2ZW50cyBmb3IgWE1MIChSRVgpIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmV4LXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2JpbiBCZXJqb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYXJhYmljIG1hdGhlbWF0aWNhbCBub3RhdGlvbiIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA2L05PVEUtYXJhYmljLW1hdGgtMjAwNjAxMzEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFyYWJpYyBtYXRoZW1hdGljYWwgbm90YXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BcmFiaWMgbWF0aGVtYXRpY2FsIG5vdGF0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NYXRoIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNi0wMS0zMSAtIDxhIHRpdGxlPSJBcmFiaWMgbWF0aGVtYXRpY2FsIG5vdGF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9hcmFiaWMtbWF0aCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkF6emVkZGluZSBMYXpyZWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcnVjZSBNaWxsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzY29wZSBvZiBtb2JpbGUgd2ViIGJlc3QgcHJhY3RpY2VzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLW1vYmlsZS1icC1zY29wZS0yMDA1MTIyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2NvcGUgb2YgTW9iaWxlIFdlYiBCZXN0IFByYWN0aWNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNjb3BlIG9mIE1vYmlsZSBXZWIgQmVzdCBQcmFjdGljZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1vYmlsZSBXZWIgQmVzdCBQcmFjdGljZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTEyLTIwIC0gPGEgdGl0bGU9IlNjb3BlIG9mIE1vYmlsZSBXZWIgQmVzdCBQcmFjdGljZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21vYmlsZS1icC1zY29wZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWwgQXJjaGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWR3YXJkIE1pdHVraWV3aWN6CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbXBvdW5kIGRvY3VtZW50IHVzZSBjYXNlcyBhbmQgcmVxdWlyZW1lbnRzIHZlcnNpb24gMi4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1dELUNERlJlcXMtMjAwNTEyMTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbXBvdW5kIERvY3VtZW50IFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIFZlcnNpb24gMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29tcG91bmQgIERvY3VtZW50ICBVc2UgIENhc2VzICBhbmQgIFJlcXVpcmVtZW50cyAgVmVyc2lvbiZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q29tcG91bmQgRG9jdW1lbnQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMTItMTkgLSA8YSB0aXRsZT0iQ29tcG91bmQgRG9jdW1lbnQgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgVmVyc2lvbiAyLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NERlJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBTcGVpY2hlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldHJpIFZ1b3JpbWFhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb21wb3VuZCBkb2N1bWVudCBieSByZWZlcmVuY2UgdXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L05PVEUtQ0RSUmVxcy0yMDA1MTIxOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29tcG91bmQgRG9jdW1lbnQgYnkgUmVmZXJlbmNlIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29tcG91bmQgIERvY3VtZW50ICBieSAgUmVmZXJlbmNlICBVc2UgIENhc2VzICBhbmQgIFJlcXVpcmVtZW50cyAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q29tcG91bmQgRG9jdW1lbnQgRm9ybWF0cyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMTItMTkgLSA8YSB0aXRsZT0iQ29tcG91bmQgRG9jdW1lbnQgYnkgUmVmZXJlbmNlIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIFZlcnNpb24gMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9DRFJSZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEFwcGVscXVpc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaW11ciBNZWhydmFyegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFudG9pbmUgUXVpbnQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVzaW5nIHhrbXMgd2l0aCBwZ3AiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L05PVEUteGttcy1wZ3AtMjAwNTEyMTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVzaW5nIFhLTVMgd2l0aCBQR1AgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Vc2luZyBYS01TIHdpdGggUEdQPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0xMi0xOSAtIDxhIHRpdGxlPSJVc2luZyBYS01TIHdpdGggUEdQIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94a21zLXBncCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvbW15IExpbmRiZXJnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zw6kgS2FoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN5bmNocm9uaXplZCBtdWx0aW1lZGlhIGludGVncmF0aW9uIGxhbmd1YWdlIChzbWlsIDIuMSkiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1JFQy1TTUlMMi0yMDA1MTIxMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU3luY2hyb25pemVkIE11bHRpbWVkaWEgSW50ZWdyYXRpb24gTGFuZ3VhZ2UgKFNNSUwgMi4xKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlN5bmNocm9uaXplZCBNdWx0aW1lZGlhIEludGVncmF0aW9uIExhbmd1YWdlIChTTUlMIDIuMSk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNZTU0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTEyLTEzIC0gPGEgdGl0bGU9IlN5bmNocm9uaXplZCBNdWx0aW1lZGlhIEludGVncmF0aW9uIExhbmd1YWdlIChTTUlMIDIuMSkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NNSUwyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGhpZXJyeSBNaWNoZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HdWlkbyBHcmFzc2VsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW50dGkgS29pdmlzdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYWJpbCBMYXlhaWRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFjayBKYW5zZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Tam9lcmQgTXVsbGVuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFp1Y2tlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpY2sgQnVsdGVybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhIHdzZGwgMS4xIGRlc2NyaXB0aW9uIGZvciB4a21zIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXhrbXMtd3NkbC0yMDA1MTExOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQSBXU0RMIDEuMSBkZXNjcmlwdGlvbiBmb3IgWEtNUyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkEgV1NETCAxLjEgZGVzY3JpcHRpb24gZm9yIFhLTVM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTExLTE4IC0gPGEgdGl0bGU9IkEgV1NETCAxLjEgZGVzY3JpcHRpb24gZm9yIFhLTVMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hrbXMtd3NkbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2ggU2FsegogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPll1bmhhbyBaaGFuZwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBjaG9yZW9ncmFwaHkgZGVzY3JpcHRpb24gbGFuZ3VhZ2UgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvQ1Itd3MtY2RsLTEwLTIwMDUxMTA5LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgQ2hvcmVvZ3JhcGh5IERlc2NyaXB0aW9uIExhbmd1YWdlIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViICBTZXJ2aWNlcyAgQ2hvcmVvZ3JhcGh5ICBEZXNjcmlwdGlvbiAgTGFuZ3VhZ2UgIFZlcnNpb24mbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBDaG9yZW9ncmFwaHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTExLTA5IC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBDaG9yZW9ncmFwaHkgRGVzY3JpcHRpb24gTGFuZ3VhZ2UgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWNkbC0xMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5pY2tvbGFzIEthdmFudHphcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIEJ1cmRldHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnIFJpdHppbmdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvbnkgRmxldGNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ZdmVzIExhZm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmx0b24gQmFycmV0bwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGFycWwgcHJvdG9jb2wgZm9yIHJkZiB1c2luZyB3c2RsIDEuMSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvV0Qtc3Byb3QxMS0yMDA1MTAyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1BBUlFMIFByb3RvY29sIGZvciBSREYgVXNpbmcgV1NETCAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TUEFSUUwgIFByb3RvY29sICBmb3IgIFJERiAgVXNpbmcgIFdTREwmbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNQQVJRTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMTAtMjQgLSA8YSB0aXRsZT0iU1BBUlFMIFByb3RvY29sIGZvciBSREYgVXNpbmcgV1NETCAxLjEgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3Nwcm90MTEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MZWUgRmVpZ2VuYmF1bQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHkgU2VhYm9ybmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FbGlhcyBUb3JyZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgY2FsZW5kYXIgLSBhbiBhcHBsaWNhdGlvbiBvZiB0aGUgcmVzb3VyY2UgZGVzY3JpcHRpb24gZnJhbWV3b3JrIHRvIGljYWxlbmRhciBkYXRhIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvTk9URS1yZGZjYWwtMjAwNTA5MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERiBDYWxlbmRhciAtIGFuIGFwcGxpY2F0aW9uIG9mIHRoZSBSZXNvdXJjZSBEZXNjcmlwdGlvbiBGcmFtZXdvcmsgdG8gaUNhbGVuZGFyIERhdGEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgQ2FsZW5kYXIgLSBhbiBhcHBsaWNhdGlvbiBvZiB0aGUgUmVzb3VyY2UgRGVzY3JpcHRpb24gRnJhbWV3b3JrIHRvIGlDYWxlbmRhciBEYXRhPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgSW50ZXJlc3QgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wOS0yOSAtIDxhIHRpdGxlPSJSREYgQ2FsZW5kYXIgLSBhbiBhcHBsaWNhdGlvbiBvZiB0aGUgUmVzb3VyY2UgRGVzY3JpcHRpb24gRnJhbWV3b3JrIHRvIGlDYWxlbmRhciBEYXRhIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGZjYWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW4gQ29ubm9sbHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MaWJieSBNaWxsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZXN0IG1ldGFkYXRhIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXRlc3QtbWV0YWRhdGEtMjAwNTA5MTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFRlc3QgTWV0YWRhdGEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UZXN0IE1ldGFkYXRhPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5RdWFsaXR5IEFzc3VyYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDktMTQgLSA8YSB0aXRsZT0iVGVzdCBNZXRhZGF0YSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdGVzdC1tZXRhZGF0YSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgQ3VycmFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2FybCBEdWJvc3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWw6aWQgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1JFQy14bWwtaWQtMjAwNTA5MDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIHhtbDppZCBWZXJzaW9uIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPnhtbDppZCAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTA5LTA5IC0gPGEgdGl0bGU9InhtbDppZCBWZXJzaW9uIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLWlkIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uYXRoYW4gTWFyc2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgVmVpbGxhcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idGhlIHFhIGhhbmRib29rIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXFhLWhhbmRib29rLTIwMDUwOTA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgUUEgSGFuZGJvb2sgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgUUEgSGFuZGJvb2s8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlF1YWxpdHkgQXNzdXJhbmNlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wOS0wNiAtIDxhIHRpdGxlPSJUaGUgUUEgSGFuZGJvb2sgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3FhLWhhbmRib29rIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TG9mdG9uIEhlbmRlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idmFyaWFiaWxpdHkgaW4gc3BlY2lmaWNhdGlvbnMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L05PVEUtc3BlYy12YXJpYWJpbGl0eS0yMDA1MDgzMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVmFyaWFiaWxpdHkgaW4gU3BlY2lmaWNhdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5WYXJpYWJpbGl0eSBpbiBTcGVjaWZpY2F0aW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UXVhbGl0eSBBc3N1cmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTA4LTMxIC0gPGEgdGl0bGU9IlZhcmlhYmlsaXR5IGluIFNwZWNpZmljYXRpb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zcGVjLXZhcmlhYmlsaXR5Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9taW5pcXVlIEhhemHDq2wtTWFzc2lldXgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MeW5uZSBSb3NlbnRoYWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InFhIGZyYW1ld29yazogc3BlY2lmaWNhdGlvbiBndWlkZWxpbmVzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9SRUMtcWFmcmFtZS1zcGVjLTIwMDUwODE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBRQSBGcmFtZXdvcms6IFNwZWNpZmljYXRpb24gR3VpZGVsaW5lcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlFBIEZyYW1ld29yazogU3BlY2lmaWNhdGlvbiBHdWlkZWxpbmVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5RdWFsaXR5IEFzc3VyYW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDgtMTcgLSA8YSB0aXRsZT0iUUEgRnJhbWV3b3JrOiBTcGVjaWZpY2F0aW9uIEd1aWRlbGluZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3FhZnJhbWUtc3BlYyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkthcmwgRHVib3N0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+THlubmUgUm9zZW50aGFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9taW5pcXVlIEhhemHDq2wtTWFzc2lldXgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Mb2Z0b24gSGVuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZGlzY3Vzc2lvbiBvZiBhbHRlcm5hdGl2ZSBzY2hlbWEgbGFuZ3VhZ2VzIGFuZCB0eXBlIHN5c3RlbSBzdXBwb3J0IGluIHdzZGwgMi4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXdzZGwyMC1hbHRzY2hlbWFsYW5ncy0yMDA1MDgxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGlzY3Vzc2lvbiBvZiBBbHRlcm5hdGl2ZSBTY2hlbWEgTGFuZ3VhZ2VzIGFuZCBUeXBlIFN5c3RlbSBTdXBwb3J0IGluIFdTREwgMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGlzY3Vzc2lvbiAgb2YgIEFsdGVybmF0aXZlICBTY2hlbWEgIExhbmd1YWdlcyAgYW5kICBUeXBlICBTeXN0ZW0gIFN1cHBvcnQgIGluICBXU0RMJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgRGVzY3JpcHRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTA4LTE3IC0gPGEgdGl0bGU9IkRpc2N1c3Npb24gb2YgQWx0ZXJuYXRpdmUgU2NoZW1hIExhbmd1YWdlcyBhbmQgVHlwZSBTeXN0ZW0gU3VwcG9ydCBpbiBXU0RMIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3NkbDIwLWFsdHNjaGVtYWxhbmdzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW1lbGlhIExld2lzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmlqYW4gUGFyc2lhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InN2ZyYjMDM5O3MgeG1sIGJpbmRpbmcgbGFuZ3VhZ2UgKHN4YmwpIiBkYXRhLXRhZz0iZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvV0Qtc1hCTC0yMDA1MDgxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1ZHJiMwMzk7cyBYTUwgQmluZGluZyBMYW5ndWFnZSAoc1hCTCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcncyBYTUwgQmluZGluZyBMYW5ndWFnZSAoc1hCTCk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDgtMTUgLSA8YSB0aXRsZT0iU1ZHJiMwMzk7cyBYTUwgQmluZGluZyBMYW5ndWFnZSAoc1hCTCkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NYQkwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb24gRmVycmFpb2xvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEhpY2tzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBIeWF0dAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGtleSBtYW5hZ2VtZW50IHNwZWNpZmljYXRpb24gKHhrbXMgMi4wKSBiaW5kaW5ncyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvUkVDLXhrbXMyLWJpbmRpbmdzLTIwMDUwNjI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgS2V5IE1hbmFnZW1lbnQgU3BlY2lmaWNhdGlvbiAoWEtNUyAyLjApIEJpbmRpbmdzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEtleSBNYW5hZ2VtZW50IFNwZWNpZmljYXRpb24gKFhLTVMgMi4wKSBCaW5kaW5nczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDYtMjggLSA8YSB0aXRsZT0iWE1MIEtleSBNYW5hZ2VtZW50IFNwZWNpZmljYXRpb24gKFhLTVMgMi4wKSBCaW5kaW5ncyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveGttczItYmluZGluZ3MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsbGlwIEhhbGxhbS1CYWtlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoaXZhcmFtIE15c29yZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwga2V5IG1hbmFnZW1lbnQgc3BlY2lmaWNhdGlvbiAoeGttcyAyLjApIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9SRUMteGttczItMjAwNTA2MjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBLZXkgTWFuYWdlbWVudCBTcGVjaWZpY2F0aW9uIChYS01TIDIuMCkgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgS2V5IE1hbmFnZW1lbnQgU3BlY2lmaWNhdGlvbiAoWEtNUyAyLjApPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wNi0yOCAtIDxhIHRpdGxlPSJYTUwgS2V5IE1hbmFnZW1lbnQgU3BlY2lmaWNhdGlvbiAoWEtNUyAyLjApIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94a21zMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWxsaXAgSGFsbGFtLUJha2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hpdmFyYW0gTXlzb3JlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHBhdGggcmVxdWlyZW1lbnRzIHZlcnNpb24gMi4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1dELXhwYXRoMjByZXEtMjAwNTA2MDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhQYXRoIFJlcXVpcmVtZW50cyBWZXJzaW9uIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhQYXRoICBSZXF1aXJlbWVudHMgIFZlcnNpb24mbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBRdWVyeSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDYtMDMgLSA8YSB0aXRsZT0iWFBhdGggUmVxdWlyZW1lbnRzIFZlcnNpb24gMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cGF0aDIwcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyeSBGZXJuYW5kZXoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LIEthcnVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBTY2FyZGluYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzc21sIDEuMCBzYXktYXMgYXR0cmlidXRlIHZhbHVlcyIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXNzbWwtc2F5YXMtMjAwNTA1MjYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNTTUwgMS4wIHNheS1hcyBhdHRyaWJ1dGUgdmFsdWVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U1NNTCAxLjAgc2F5LWFzIGF0dHJpYnV0ZSB2YWx1ZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTA1LTI2IC0gPGEgdGl0bGU9IlNTTUwgMS4wIHNheS1hcyBhdHRyaWJ1dGUgdmFsdWVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zc21sLXNheWFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEJ1cm5ldHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYW9sbyBCYWdnaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbiBCdXlsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVsbGVuIEVpZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MdWMgVmFuIFRpY2hlbGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXByZXNlbnRpbmcgc3BlY2lmaWVkIHZhbHVlcyBpbiBvd2w6ICZxdW90O3ZhbHVlIHBhcnRpdGlvbnMmcXVvdDsgYW5kICZxdW90O3ZhbHVlIHNldHMmcXVvdDsiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L05PVEUtc3dicC1zcGVjaWZpZWQtdmFsdWVzLTIwMDUwNTE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXByZXNlbnRpbmcgU3BlY2lmaWVkIFZhbHVlcyBpbiBPV0w6ICZxdW90O3ZhbHVlIHBhcnRpdGlvbnMmcXVvdDsgYW5kICZxdW90O3ZhbHVlIHNldHMmcXVvdDsgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXByZXNlbnRpbmcgU3BlY2lmaWVkIFZhbHVlcyBpbiBPV0w6ICJ2YWx1ZSBwYXJ0aXRpb25zIiBhbmQgInZhbHVlIHNldHMiPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TZW1hbnRpYyBXZWIgQmVzdCBQcmFjdGljZXMgYW5kIERlcGxveW1lbnQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTA1LTE3IC0gPGEgdGl0bGU9IlJlcHJlc2VudGluZyBTcGVjaWZpZWQgVmFsdWVzIGluIE9XTDogJnF1b3Q7dmFsdWUgcGFydGl0aW9ucyZxdW90OyBhbmQgJnF1b3Q7dmFsdWUgc2V0cyZxdW90OyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3dicC1zcGVjaWZpZWQtdmFsdWVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxhbiBSZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icXVpY2sgZ3VpZGUgdG8gcHVibGlzaGluZyBhIHRoZXNhdXJ1cyBvbiB0aGUgc2VtYW50aWMgd2ViIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1dELXN3YnAtdGhlc2F1cnVzLXB1Ymd1aWRlLTIwMDUwNTE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBRdWljayBHdWlkZSB0byBQdWJsaXNoaW5nIGEgVGhlc2F1cnVzIG9uIHRoZSBTZW1hbnRpYyBXZWIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5RdWljayBHdWlkZSB0byBQdWJsaXNoaW5nIGEgVGhlc2F1cnVzIG9uIHRoZSBTZW1hbnRpYyBXZWI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBCZXN0IFByYWN0aWNlcyBhbmQgRGVwbG95bWVudCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDUtMTcgLSA8YSB0aXRsZT0iUXVpY2sgR3VpZGUgdG8gUHVibGlzaGluZyBhIFRoZXNhdXJ1cyBvbiB0aGUgU2VtYW50aWMgV2ViIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zd2JwLXRoZXNhdXJ1cy1wdWJndWlkZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsaXN0YWlyIE1pbGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icHJvY2Vzc2luZyB4bWwgMS4xIGRvY3VtZW50cyB3aXRoIHhtbCBzY2hlbWEgMS4wIHByb2Nlc3NvcnMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L05PVEUteG1sMTFzY2hlbWExMC0yMDA1MDUxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUHJvY2Vzc2luZyBYTUwgMS4xIGRvY3VtZW50cyB3aXRoIFhNTCBTY2hlbWEgMS4wIHByb2Nlc3NvcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Qcm9jZXNzaW5nIFhNTCAxLjEgZG9jdW1lbnRzIHdpdGggWE1MIFNjaGVtYSAxLjAgcHJvY2Vzc29yczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNjaGVtYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDUtMTEgLSA8YSB0aXRsZT0iUHJvY2Vzc2luZyBYTUwgMS4xIGRvY3VtZW50cyB3aXRoIFhNTCBTY2hlbWEgMS4wIHByb2Nlc3NvcnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbDExc2NoZW1hMTAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yeSBUaG9tcHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXNjcmliaW5nIG1lZGlhIGNvbnRlbnQgb2YgYmluYXJ5IGRhdGEgaW4geG1sIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXhtbC1tZWRpYS10eXBlcy0yMDA1MDUwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGVzY3JpYmluZyBNZWRpYSBDb250ZW50IG9mIEJpbmFyeSBEYXRhIGluIFhNTCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRlc2NyaWJpbmcgTWVkaWEgQ29udGVudCBvZiBCaW5hcnkgRGF0YSBpbiBYTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBQcm90b2NvbCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIERlc2NyaXB0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wNS0wNCAtIDxhIHRpdGxlPSJEZXNjcmliaW5nIE1lZGlhIENvbnRlbnQgb2YgQmluYXJ5IERhdGEgaW4gWE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtbWVkaWEtdHlwZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmlzaCBLYXJtYXJrYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT7DnG1pdCBZYWzDp2luYWxwCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNjYWxhYmxlIHZlY3RvciBncmFwaGljcyAoc3ZnKSBmdWxsIDEuMiBzcGVjaWZpY2F0aW9uIiBkYXRhLXRhZz0iZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvV0QtU1ZHMTItMjAwNTA0MTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNjYWxhYmxlIFZlY3RvciBHcmFwaGljcyAoU1ZHKSBGdWxsIDEuMiBTcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2NhbGFibGUgVmVjdG9yIEdyYXBoaWNzIChTVkcpIEZ1bGwgMS4yIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDQtMTMgLSA8YSB0aXRsZT0iU2NhbGFibGUgVmVjdG9yIEdyYXBoaWNzIChTVkcpIEZ1bGwgMS4yIFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWRzEyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVhbiBKYWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q3JhaWcgTm9ydGh3YXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlcHJlc2VudGluZyBjbGFzc2VzIGFzIHByb3BlcnR5IHZhbHVlcyBvbiB0aGUgc2VtYW50aWMgd2ViIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXN3YnAtY2xhc3Nlcy1hcy12YWx1ZXMtMjAwNTA0MDUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcHJlc2VudGluZyBDbGFzc2VzIEFzIFByb3BlcnR5IFZhbHVlcyBvbiB0aGUgU2VtYW50aWMgV2ViIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVwcmVzZW50aW5nIENsYXNzZXMgQXMgUHJvcGVydHkgVmFsdWVzIG9uIHRoZSBTZW1hbnRpYyBXZWI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNlbWFudGljIFdlYiBCZXN0IFByYWN0aWNlcyBhbmQgRGVwbG95bWVudCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDQtMDUgLSA8YSB0aXRsZT0iUmVwcmVzZW50aW5nIENsYXNzZXMgQXMgUHJvcGVydHkgVmFsdWVzIG9uIHRoZSBTZW1hbnRpYyBXZWIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3N3YnAtY2xhc3Nlcy1hcy12YWx1ZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5OYXRhc2hhIE5veQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJidWlsZGluZyBhIHRva2VuaXplciBmb3IgeHBhdGggb3IgeHF1ZXJ5IiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1dELXhxdWVyeS14cGF0aC1wYXJzaW5nLTIwMDUwNDA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBCdWlsZGluZyBhIFRva2VuaXplciBmb3IgWFBhdGggb3IgWFF1ZXJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QnVpbGRpbmcgYSBUb2tlbml6ZXIgZm9yIFhQYXRoIG9yIFhRdWVyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFF1ZXJ5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wNC0wNCAtIDxhIHRpdGxlPSJCdWlsZGluZyBhIFRva2VuaXplciBmb3IgWFBhdGggb3IgWFF1ZXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cXVlcnkteHBhdGgtcGFyc2luZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IEJvYWcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGJpbmFyeSBjaGFyYWN0ZXJpemF0aW9uIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9OT1RFLXhiYy1jaGFyYWN0ZXJpemF0aW9uLTIwMDUwMzMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgQmluYXJ5IENoYXJhY3Rlcml6YXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgQmluYXJ5IENoYXJhY3Rlcml6YXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBCaW5hcnkgQ2hhcmFjdGVyaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDMtMzEgLSA8YSB0aXRsZT0iWE1MIEJpbmFyeSBDaGFyYWN0ZXJpemF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94YmMtY2hhcmFjdGVyaXphdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9saXZlciBHb2xkbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG1pdHJ5IExlbmtvdgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgYmluYXJ5IGNoYXJhY3Rlcml6YXRpb24gbWVhc3VyZW1lbnQgbWV0aG9kb2xvZ2llcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvTk9URS14YmMtbWVhc3VyZW1lbnQtMjAwNTAzMzEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBCaW5hcnkgQ2hhcmFjdGVyaXphdGlvbiBNZWFzdXJlbWVudCBNZXRob2RvbG9naWVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEJpbmFyeSBDaGFyYWN0ZXJpemF0aW9uIE1lYXN1cmVtZW50IE1ldGhvZG9sb2dpZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBCaW5hcnkgQ2hhcmFjdGVyaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDMtMzEgLSA8YSB0aXRsZT0iWE1MIEJpbmFyeSBDaGFyYWN0ZXJpemF0aW9uIE1lYXN1cmVtZW50IE1ldGhvZG9sb2dpZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hiYy1tZWFzdXJlbWVudCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXBoZW4gV2lsbGlhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBIYWdnYXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGJpbmFyeSBjaGFyYWN0ZXJpemF0aW9uIHByb3BlcnRpZXMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L05PVEUteGJjLXByb3BlcnRpZXMtMjAwNTAzMzEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBCaW5hcnkgQ2hhcmFjdGVyaXphdGlvbiBQcm9wZXJ0aWVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEJpbmFyeSBDaGFyYWN0ZXJpemF0aW9uIFByb3BlcnRpZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBCaW5hcnkgQ2hhcmFjdGVyaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDMtMzEgLSA8YSB0aXRsZT0iWE1MIEJpbmFyeSBDaGFyYWN0ZXJpemF0aW9uIFByb3BlcnRpZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hiYy1wcm9wZXJ0aWVzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb2t1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbnRpYWdvIFBlcmljYXMtR2VlcnRzZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGJpbmFyeSBjaGFyYWN0ZXJpemF0aW9uIHVzZSBjYXNlcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvTk9URS14YmMtdXNlLWNhc2VzLTIwMDUwMzMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgQmluYXJ5IENoYXJhY3Rlcml6YXRpb24gVXNlIENhc2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEJpbmFyeSBDaGFyYWN0ZXJpemF0aW9uIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIEJpbmFyeSBDaGFyYWN0ZXJpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wMy0zMSAtIDxhIHRpdGxlPSJYTUwgQmluYXJ5IENoYXJhY3Rlcml6YXRpb24gVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94YmMtdXNlLWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb2t1cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNhbnRpYWdvIFBlcmljYXMtR2VlcnRzZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZGYgZGF0YSBhY2Nlc3MgdXNlIGNhc2VzIGFuZCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1dELXJkZi1kYXdnLXVjLTIwMDUwMzI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSREYgRGF0YSBBY2Nlc3MgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgRGF0YSBBY2Nlc3MgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNQQVJRTCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDMtMjUgLSA8YSB0aXRsZT0iUkRGIERhdGEgQWNjZXNzIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9yZGYtZGF3Zy11YyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlbmRhbGwgQ2xhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjaGFyYWN0ZXIgbW9kZWwgZm9yIHRoZSB3b3JsZCB3aWRlIHdlYiAxLjA6IGZ1bmRhbWVudGFscyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1JFQy1jaGFybW9kLTIwMDUwMjE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDaGFyYWN0ZXIgTW9kZWwgZm9yIHRoZSBXb3JsZCBXaWRlIFdlYiAxLjA6IEZ1bmRhbWVudGFscyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViIDEuMDogRnVuZGFtZW50YWxzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5JbnRlcm5hdGlvbmFsaXphdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDItMTUgLSA8YSB0aXRsZT0iQ2hhcmFjdGVyIE1vZGVsIGZvciB0aGUgV29ybGQgV2lkZSBXZWIgMS4wOiBGdW5kYW1lbnRhbHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2NoYXJtb2QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gRMO8cnN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RnJhbsOnb2lzIFllcmdlYXUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pc2hhIFdvbGYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UZXggVGV4aW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iZXh0ZW5kaW5nIHhsaW5rIDEuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvTk9URS14bGluazEwLWV4dC0yMDA1MDEyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXh0ZW5kaW5nIFhMaW5rIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkV4dGVuZGluZyAgWExpbmsmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wMS0yNyAtIDxhIHRpdGxlPSJFeHRlbmRpbmcgWExpbmsgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bGluazEwLWV4dCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vcm1hbiBXYWxzaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzb2FwIG1lc3NhZ2UgdHJhbnNtaXNzaW9uIG9wdGltaXphdGlvbiBtZWNoYW5pc20iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA1L1JFQy1zb2FwMTItbXRvbS0yMDA1MDEyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU09BUCBNZXNzYWdlIFRyYW5zbWlzc2lvbiBPcHRpbWl6YXRpb24gTWVjaGFuaXNtIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U09BUCBNZXNzYWdlIFRyYW5zbWlzc2lvbiBPcHRpbWl6YXRpb24gTWVjaGFuaXNtPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA1LTAxLTI1IC0gPGEgdGl0bGU9IlNPQVAgTWVzc2FnZSBUcmFuc21pc3Npb24gT3B0aW1pemF0aW9uIE1lY2hhbmlzbSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc29hcDEyLW10b20iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gR3VkZ2luCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9haCBNZW5kZWxzb2huCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBOb3R0aW5naGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVydsOpIFJ1ZWxsYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sLWJpbmFyeSBvcHRpbWl6ZWQgcGFja2FnaW5nIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9SRUMteG9wMTAtMjAwNTAxMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTC1iaW5hcnkgT3B0aW1pemVkIFBhY2thZ2luZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTC1iaW5hcnkgT3B0aW1pemVkIFBhY2thZ2luZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb3RvY29sIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNS0wMS0yNSAtIDxhIHRpdGxlPSJYTUwtYmluYXJ5IE9wdGltaXplZCBQYWNrYWdpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hvcDEwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFydGluIEd1ZGdpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vYWggTWVuZGVsc29obgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgTm90dGluZ2hhbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlcnbDqSBSdWVsbGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXNvdXJjZSByZXByZXNlbnRhdGlvbiBzb2FwIGhlYWRlciBibG9jayIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDUvUkVDLXNvYXAxMi1yZXAtMjAwNTAxMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlc291cmNlIFJlcHJlc2VudGF0aW9uIFNPQVAgSGVhZGVyIEJsb2NrIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVzb3VyY2UgUmVwcmVzZW50YXRpb24gU09BUCBIZWFkZXIgQmxvY2s8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBQcm90b2NvbCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDEtMjUgLSA8YSB0aXRsZT0iUmVzb3VyY2UgUmVwcmVzZW50YXRpb24gU09BUCBIZWFkZXIgQmxvY2sgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NvYXAxMi1yZXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmlzaCBLYXJtYXJrYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gR3VkZ2luCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WXZlcyBMYWZvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJnbG9zc2FyeSBvZiB0ZXJtcyBmb3IgZGV2aWNlIGluZGVwZW5kZW5jZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNS9XRC1kaS1nbG9zcy0yMDA1MDExOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgR2xvc3Nhcnkgb2YgVGVybXMgZm9yIERldmljZSBJbmRlcGVuZGVuY2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5HbG9zc2FyeSBvZiBUZXJtcyBmb3IgRGV2aWNlIEluZGVwZW5kZW5jZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlIEluZGVwZW5kZW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDUtMDEtMTggLSA8YSB0aXRsZT0iR2xvc3Nhcnkgb2YgVGVybXMgZm9yIERldmljZSBJbmRlcGVuZGVuY2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2RpLWdsb3NzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Umh5cyBMZXdpcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYXJjaGl0ZWN0dXJlIG9mIHRoZSB3b3JsZCB3aWRlIHdlYiwgdm9sdW1lIG9uZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLXdlYmFyY2gtMjAwNDEyMTUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFyY2hpdGVjdHVyZSBvZiB0aGUgV29ybGQgV2lkZSBXZWIsIFZvbHVtZSBPbmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BcmNoaXRlY3R1cmUgb2YgdGhlIFdvcmxkIFdpZGUgV2ViLCBWb2x1bWUgT25lPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5UZWNobmljYWwgQXJjaGl0ZWN0dXJlIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMTItMTUgLSA8YSB0aXRsZT0iQXJjaGl0ZWN0dXJlIG9mIHRoZSBXb3JsZCBXaWRlIFdlYiwgVm9sdW1lIE9uZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd2ViYXJjaCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBKYWNvYnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlcXVpcmVtZW50cyBmb3IgdGhlIGludGVybmF0aW9uYWxpemF0aW9uIG9mIHdlYiBzZXJ2aWNlcyIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L05PVEUtd3MtaTE4bi1yZXEtMjAwNDExMTYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgdGhlIEludGVybmF0aW9uYWxpemF0aW9uIG9mIFdlYiBTZXJ2aWNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyBmb3IgdGhlIEludGVybmF0aW9uYWxpemF0aW9uIG9mIFdlYiBTZXJ2aWNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTExLTE2IC0gPGEgdGl0bGU9IlJlcXVpcmVtZW50cyBmb3IgdGhlIEludGVybmF0aW9uYWxpemF0aW9uIG9mIFdlYiBTZXJ2aWNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3MtaTE4bi1yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BZGRpc29uIFBoaWxsaXBzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaTE4biI+aTE4bgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm9udW5jaWF0aW9uIGxleGljb24gc3BlY2lmaWNhdGlvbiAocGxzKSB2ZXJzaW9uIDEuMCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9XRC1sZXhpY29uLXJlcXMtMjAwNDEwMjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByb251bmNpYXRpb24gTGV4aWNvbiBTcGVjaWZpY2F0aW9uIChQTFMpIFZlcnNpb24gMS4wIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlByb251bmNpYXRpb24gTGV4aWNvbiBTcGVjaWZpY2F0aW9uIChQTFMpIFZlcnNpb24gMS4wIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Vm9pY2UgQnJvd3NlciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMTAtMjkgLSA8YSB0aXRsZT0iUHJvbnVuY2lhdGlvbiBMZXhpY29uIFNwZWNpZmljYXRpb24gKFBMUykgVmVyc2lvbiAxLjAgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9sZXhpY29uLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYW9sbyBCYWdnaWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmFuayBTY2FoaWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHNjaGVtYSBwYXJ0IDI6IGRhdGF0eXBlcyBzZWNvbmQgZWRpdGlvbiIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLXhtbHNjaGVtYS0yLTIwMDQxMDI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgU2NoZW1hIFBhcnQgMjogRGF0YXR5cGVzIFNlY29uZCBFZGl0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFNjaGVtYSBQYXJ0IDI6IERhdGF0eXBlcyBTZWNvbmQgRWRpdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNjaGVtYSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMTAtMjggLSA8YSB0aXRsZT0iWE1MIFNjaGVtYSBQYXJ0IDI6IERhdGF0eXBlcyBTZWNvbmQgRWRpdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sc2NoZW1hLTIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIFYuIEJpcm9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QXNob2sgTWFsaG90cmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzY2hlbWEgcGFydCAwOiBwcmltZXIgc2Vjb25kIGVkaXRpb24iIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1JFQy14bWxzY2hlbWEtMC0yMDA0MTAyOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFNjaGVtYSBQYXJ0IDA6IFByaW1lciBTZWNvbmQgRWRpdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBTY2hlbWEgUGFydCAwOiBQcmltZXIgU2Vjb25kIEVkaXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTY2hlbWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTEwLTI4IC0gPGEgdGl0bGU9IlhNTCBTY2hlbWEgUGFydCAwOiBQcmltZXIgU2Vjb25kIEVkaXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbHNjaGVtYS0wIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgRmFsbHNpZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QcmlzY2lsbGEgV2FsbXNsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzY2hlbWEgcGFydCAxOiBzdHJ1Y3R1cmVzIHNlY29uZCBlZGl0aW9uIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9SRUMteG1sc2NoZW1hLTEtMjAwNDEwMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTY2hlbWEgUGFydCAxOiBTdHJ1Y3R1cmVzIFNlY29uZCBFZGl0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFNjaGVtYSBQYXJ0IDE6IFN0cnVjdHVyZXMgU2Vjb25kIEVkaXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTY2hlbWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTEwLTI4IC0gPGEgdGl0bGU9IlhNTCBTY2hlbWEgUGFydCAxOiBTdHJ1Y3R1cmVzIFNlY29uZCBFZGl0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzY2hlbWEtMSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJ5IFRob21wc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgQmVlY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NdXJyYXkgTWFsb25leQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vYWggTWVuZGVsc29obgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3BlZWNoIHN5bnRoZXNpcyBtYXJrdXAgbGFuZ3VhZ2UgKHNzbWwpIHZlcnNpb24gMS4wIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1JFQy1zcGVlY2gtc3ludGhlc2lzLTIwMDQwOTA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTcGVlY2ggU3ludGhlc2lzIE1hcmt1cCBMYW5ndWFnZSAoU1NNTCkgVmVyc2lvbiAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TcGVlY2ggIFN5bnRoZXNpcyAgTWFya3VwICBMYW5ndWFnZSAgKFNTTUwpICBWZXJzaW9uJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wOS0wNyAtIDxhIHRpdGxlPSJTcGVlY2ggU3ludGhlc2lzIE1hcmt1cCBMYW5ndWFnZSAoU1NNTCkgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NwZWVjaC1zeW50aGVzaXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQnVybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgV2Fsa2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IEh1bnQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhmb3JtcyAxLjEgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9OT1RFLXhmb3Jtcy0xMS1yZXEtMjAwNDA4MzEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhGb3JtcyAxLjEgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WEZvcm1zIDEuMSBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkZvcm1zIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wOC0zMSAtIDxhIHRpdGxlPSJYRm9ybXMgMS4xIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveGZvcm1zLTExLXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gQm95ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2xhbmQgTWVycmljawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InFhIGZyYW1ld29yazogdGVzdCBndWlkZWxpbmVzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1dELXFhZnJhbWUtdGVzdC0yMDA0MDgyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUUEgRnJhbWV3b3JrOiBUZXN0IEd1aWRlbGluZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5RQSBGcmFtZXdvcms6IFRlc3QgR3VpZGVsaW5lczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UXVhbGl0eSBBc3N1cmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTA4LTIwIC0gPGEgdGl0bGU9IlFBIEZyYW1ld29yazogVGVzdCBHdWlkZWxpbmVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9xYWZyYW1lLXRlc3QiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXRyaWNrIEN1cnJhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpbWl0cmlzIERpbWl0cmlhZGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgc2VydmljZXMgaW50ZXJuYXRpb25hbGl6YXRpb24gdXNhZ2Ugc2NlbmFyaW9zIiBkYXRhLXRhZz0iaTE4biIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvTk9URS13cy1pMThuLXNjZW5hcmlvcy0yMDA0MDczMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEludGVybmF0aW9uYWxpemF0aW9uIFVzYWdlIFNjZW5hcmlvcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlcyBJbnRlcm5hdGlvbmFsaXphdGlvbiBVc2FnZSBTY2VuYXJpb3M8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkludGVybmF0aW9uYWxpemF0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wNy0zMCAtIDxhIHRpdGxlPSJXZWIgU2VydmljZXMgSW50ZXJuYXRpb25hbGl6YXRpb24gVXNhZ2UgU2NlbmFyaW9zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93cy1pMThuLXNjZW5hcmlvcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlYmFzaXNoIEJhbmVyamVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFydGluIETDvHJzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgTWNLZW5uYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFkZGlzb24gUGhpbGxpcHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UYWthbyBTdXp1a2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UZXggVGV4aW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ5IFRydW1ibGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZWEgVmluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlbnRhcm8gTm9qaQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic29hcCBvcHRpbWl6ZWQgc2VyaWFsaXphdGlvbiB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9XRC1zb2FwMTItb3MtdWNyLTIwMDQwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTT0FQIE9wdGltaXplZCBTZXJpYWxpemF0aW9uIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U09BUCBPcHRpbWl6ZWQgU2VyaWFsaXphdGlvbiBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb3RvY29sIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wNi0wOCAtIDxhIHRpdGxlPSJTT0FQIE9wdGltaXplZCBTZXJpYWxpemF0aW9uIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zb2FwMTItb3MtdWNyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9ueSBHcmFoYW0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmlzaCBLYXJtYXJrYXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEpvbmVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4b3AgaW5jbHVzaW9uIG1lY2hhbmlzbSAtIGZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9OT1RFLXhvcGluYy1GQVEtMjAwNDA2MDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhPUCBJbmNsdXNpb24gTWVjaGFuaXNtIC0gRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YT1AgSW5jbHVzaW9uIE1lY2hhbmlzbSAtIEZyZXF1ZW50bHkgQXNrZWQgUXVlc3Rpb25zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTA2LTA4IC0gPGEgdGl0bGU9IlhPUCBJbmNsdXNpb24gTWVjaGFuaXNtIC0gRnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hvcGluYy1GQVEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIE1haGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzb2FwIDEuMiBhdHRhY2htZW50IGZlYXR1cmUiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L05PVEUtc29hcDEyLWFmLTIwMDQwNjA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTT0FQIDEuMiBBdHRhY2htZW50IEZlYXR1cmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TT0FQIDEuMiBBdHRhY2htZW50IEZlYXR1cmU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBQcm90b2NvbCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDYtMDggLSA8YSB0aXRsZT0iU09BUCAxLjIgQXR0YWNobWVudCBGZWF0dXJlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zb2FwMTItYWYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yaWsgRnJ5c3R5ayBOaWVsc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVydsOpIFJ1ZWxsYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1vZGFsaXR5IGNvbXBvbmVudCB0byBob3N0IGVudmlyb25tZW50IGRvbSByZXF1aXJlbWVudHMgYW5kIGNhcGFiaWxpdGllcyBhc3Nlc3NtZW50IiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9OT1RFLW1vZGFsaXR5LWludGVyZmFjZS0yMDA0MDUxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTW9kYWxpdHkgQ29tcG9uZW50IHRvIEhvc3QgRW52aXJvbm1lbnQgRE9NIFJlcXVpcmVtZW50cyBhbmQgQ2FwYWJpbGl0aWVzIEFzc2Vzc21lbnQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Nb2RhbGl0eSBDb21wb25lbnQgdG8gSG9zdCBFbnZpcm9ubWVudCBET00gUmVxdWlyZW1lbnRzIGFuZCBDYXBhYmlsaXRpZXMgQXNzZXNzbWVudDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDUtMTAgLSA8YSB0aXRsZT0iTW9kYWxpdHkgQ29tcG9uZW50IHRvIEhvc3QgRW52aXJvbm1lbnQgRE9NIFJlcXVpcmVtZW50cyBhbmQgQ2FwYWJpbGl0aWVzIEFzc2Vzc21lbnQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21vZGFsaXR5LWludGVyZmFjZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkJyYW5kb24gUG9ydGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRvY3VtZW50IG9iamVjdCBtb2RlbCAoZG9tKSBsZXZlbCAzIGxvYWQgYW5kIHNhdmUgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9ImRvbSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLURPTS1MZXZlbC0zLUxTLTIwMDQwNDA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEb2N1bWVudCBPYmplY3QgTW9kZWwgKERPTSkgTGV2ZWwgMyBMb2FkIGFuZCBTYXZlIFNwZWNpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Eb2N1bWVudCBPYmplY3QgTW9kZWwgKERPTSkgTGV2ZWwgMyBMb2FkIGFuZCBTYXZlIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRPTSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDQtMDcgLSA8YSB0aXRsZT0iRG9jdW1lbnQgT2JqZWN0IE1vZGVsIChET00pIExldmVsIDMgTG9hZCBhbmQgU2F2ZSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ET00tTGV2ZWwtMy1MUyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG5ueSBTdGVuYmFjawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHkgSGVuaW5nZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRvY3VtZW50IG9iamVjdCBtb2RlbCAoZG9tKSBsZXZlbCAzIGNvcmUgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9ImRvbSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLURPTS1MZXZlbC0zLUNvcmUtMjAwNDA0MDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIENvcmUgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIENvcmUgU3BlY2lmaWNhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RE9NIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wNC0wNyAtIDxhIHRpdGxlPSJEb2N1bWVudCBPYmplY3QgTW9kZWwgKERPTSkgTGV2ZWwgMyBDb3JlIFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0RPTS1MZXZlbC0zLUNvcmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Bcm5hdWQgTGUgSG9ycwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWxpcHBlIExlIEjDqWdhcmV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGF1cmVuIFdvb2QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HYXZpbiBOaWNvbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIFJvYmllCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBDaGFtcGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBCIEJ5cm5lCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZG9tIj5ET00KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBwcm9jZXNzaW5nIG1vZGVsIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvTk9URS1wcm9jLW1vZGVsLXJlcS0yMDA0MDQwNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFByb2Nlc3NpbmcgTW9kZWwgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFByb2Nlc3NpbmcgTW9kZWwgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDQtMDUgLSA8YSB0aXRsZT0iWE1MIFByb2Nlc3NpbmcgTW9kZWwgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9wcm9jLW1vZGVsLXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRtaXRyeSBMZW5rb3YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3cyBjaG9yZW9ncmFwaHkgbW9kZWwgb3ZlcnZpZXciIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvV0Qtd3MtY2hvci1tb2RlbC0yMDA0MDMyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV1MgQ2hvcmVvZ3JhcGh5IE1vZGVsIE92ZXJ2aWV3IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V1MgQ2hvcmVvZ3JhcGh5IE1vZGVsIE92ZXJ2aWV3PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgQ2hvcmVvZ3JhcGh5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMy0yNCAtIDxhIHRpdGxlPSJXUyBDaG9yZW9ncmFwaHkgTW9kZWwgT3ZlcnZpZXcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWNob3ItbW9kZWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCdXJkZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tmlja29sYXMgS2F2YW50emFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idm9pY2UgZXh0ZW5zaWJsZSBtYXJrdXAgbGFuZ3VhZ2UgKHZvaWNleG1sKSB2ZXJzaW9uIDIuMCIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9SRUMtdm9pY2V4bWwyMC0yMDA0MDMxNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVm9pY2UgRXh0ZW5zaWJsZSBNYXJrdXAgTGFuZ3VhZ2UgKFZvaWNlWE1MKSBWZXJzaW9uIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlZvaWNlICBFeHRlbnNpYmxlICBNYXJrdXAgIExhbmd1YWdlICAoVm9pY2VYTUwpICBWZXJzaW9uJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMy0xNiAtIDxhIHRpdGxlPSJWb2ljZSBFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoVm9pY2VYTUwpIFZlcnNpb24gMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2ljZXhtbDIwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2NvdHQgTWNHbGFzaGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIEJ1cm5ldHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KZXJyeSBDYXJ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBEYW5pZWxzZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KaW0gRmVycmFucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZHJldyBIdW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QnJ1Y2UgTHVjYXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmFuZG9uIFBvcnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktlbm5ldGggUmVob3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGVwaCBUcnlwaG9uYXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNwZWVjaCByZWNvZ25pdGlvbiBncmFtbWFyIHNwZWNpZmljYXRpb24gdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLXNwZWVjaC1ncmFtbWFyLTIwMDQwMzE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTcGVlY2ggUmVjb2duaXRpb24gR3JhbW1hciBTcGVjaWZpY2F0aW9uIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U3BlZWNoICBSZWNvZ25pdGlvbiAgR3JhbW1hciAgU3BlY2lmaWNhdGlvbiAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Vm9pY2UgQnJvd3NlciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDMtMTYgLSA8YSB0aXRsZT0iU3BlZWNoIFJlY29nbml0aW9uIEdyYW1tYXIgU3BlY2lmaWNhdGlvbiBWZXJzaW9uIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc3BlZWNoLWdyYW1tYXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmRyZXcgSHVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNjb3R0IE1jR2xhc2hhbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgc2VydmljZXMgY2hvcmVvZ3JhcGh5IHJlcXVpcmVtZW50cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9XRC13cy1jaG9yLXJlcXMtMjAwNDAzMTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBDaG9yZW9ncmFwaHkgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIENob3Jlb2dyYXBoeSBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBDaG9yZW9ncmFwaHkgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAzLTExIC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBDaG9yZW9ncmFwaHkgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93cy1jaG9yLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQXVzdGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWJiaWUgQmFyYmlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RWQgUGV0ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgUm9zcy1UYWxib3QKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1dGhvcmluZyB0ZWNobmlxdWVzIGZvciBkZXZpY2UgaW5kZXBlbmRlbmNlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9OT1RFLWRpLWF0ZGktMjAwNDAyMTgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEF1dGhvcmluZyBUZWNobmlxdWVzIGZvciBEZXZpY2UgSW5kZXBlbmRlbmNlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QXV0aG9yaW5nIFRlY2huaXF1ZXMgZm9yIERldmljZSBJbmRlcGVuZGVuY2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZSBJbmRlcGVuZGVuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAyLTE4IC0gPGEgdGl0bGU9IkF1dGhvcmluZyBUZWNobmlxdWVzIGZvciBEZXZpY2UgSW5kZXBlbmRlbmNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kaS1hdGRpIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um90YW4gSGFucmFoYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb2xhbmQgTWVycmljawogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2UgbWFuYWdlbWVudDogc2VydmljZSBsaWZlIGN5Y2xlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9OT1RFLXdzbGMtMjAwNDAyMTEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlIE1hbmFnZW1lbnQ6IFNlcnZpY2UgTGlmZSBDeWNsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlIE1hbmFnZW1lbnQ6IFNlcnZpY2UgTGlmZSBDeWNsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIEFyY2hpdGVjdHVyZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDItMTEgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2UgTWFuYWdlbWVudDogU2VydmljZSBMaWZlIEN5Y2xlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93c2xjIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGFvIEhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBQb3R0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklnb3IgU2VkdWtoaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBhcmNoaXRlY3R1cmUgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9OT1RFLXdzYS1yZXFzLTIwMDQwMjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZXMgQXJjaGl0ZWN0dXJlIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlcyBBcmNoaXRlY3R1cmUgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgQXJjaGl0ZWN0dXJlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMi0xMSAtIDxhIHRpdGxlPSJXZWIgU2VydmljZXMgQXJjaGl0ZWN0dXJlIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvd3NhLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQXVzdGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWJiaWUgQmFyYmlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXN0b3BoZXIgRmVycmlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhcmFkIEdhcmcKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBnbG9zc2FyeSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvTk9URS13cy1nbG9zcy0yMDA0MDIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEdsb3NzYXJ5IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViIFNlcnZpY2VzIEdsb3NzYXJ5PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgQXJjaGl0ZWN0dXJlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMi0xMSAtIDxhIHRpdGxlPSJXZWIgU2VydmljZXMgR2xvc3NhcnkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWdsb3NzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SHVnbyBIYWFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxsZW4gQnJvd24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlcyBhcmNoaXRlY3R1cmUiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L05PVEUtd3MtYXJjaC0yMDA0MDIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEFyY2hpdGVjdHVyZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBTZXJ2aWNlcyBBcmNoaXRlY3R1cmU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBBcmNoaXRlY3R1cmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAyLTExIC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBBcmNoaXRlY3R1cmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWFyY2giPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBCb290aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkh1Z28gSGFhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyYW5jaXMgTWNDYWJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBOZXdjb21lcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgQ2hhbXBpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpc3RvcGhlciBGZXJyaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBPcmNoYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgc2VydmljZXMgYXJjaGl0ZWN0dXJlIHVzYWdlIHNjZW5hcmlvcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvTk9URS13cy1hcmNoLXNjZW5hcmlvcy0yMDA0MDIxMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIFNlcnZpY2VzIEFyY2hpdGVjdHVyZSBVc2FnZSBTY2VuYXJpb3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgQXJjaGl0ZWN0dXJlIFVzYWdlIFNjZW5hcmlvczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIFNlcnZpY2VzIEFyY2hpdGVjdHVyZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDItMTEgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2VzIEFyY2hpdGVjdHVyZSBVc2FnZSBTY2VuYXJpb3MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWFyY2gtc2NlbmFyaW9zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGFvIEhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SHVnbyBIYWFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgT3JjaGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIHdlYiBvbnRvbG9neSBsYW5ndWFnZSB1c2UgY2FzZXMgYW5kIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1JFQy13ZWJvbnQtcmVxLTIwMDQwMjEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIE9udG9sb2d5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMi0xMCAtIDxhIHRpdGxlPSJPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93ZWJvbnQtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVmZiBIZWZsaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgd2ViIG9udG9sb2d5IGxhbmd1YWdlIGd1aWRlIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLW93bC1ndWlkZS0yMDA0MDIxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBHdWlkZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgR3VpZGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBPbnRvbG9neSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDItMTAgLSA8YSB0aXRsZT0iT1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBHdWlkZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsLWd1aWRlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXN0b3BoZXIgV2VsdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZWJvcmFoIE1jR3Vpbm5lc3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmRmIHNlbWFudGljcyIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1JFQy1yZGYtbXQtMjAwNDAyMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERiBTZW1hbnRpY3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SREYgU2VtYW50aWNzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDItMTAgLSA8YSB0aXRsZT0iUkRGIFNlbWFudGljcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRmLW10Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF0cmljayBIYXllcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXNvdXJjZSBkZXNjcmlwdGlvbiBmcmFtZXdvcmsgKHJkZik6IGNvbmNlcHRzIGFuZCBhYnN0cmFjdCBzeW50YXgiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9SRUMtcmRmLWNvbmNlcHRzLTIwMDQwMjEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXNvdXJjZSBEZXNjcmlwdGlvbiBGcmFtZXdvcmsgKFJERik6IENvbmNlcHRzIGFuZCBBYnN0cmFjdCBTeW50YXggZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXNvdXJjZSBEZXNjcmlwdGlvbiBGcmFtZXdvcmsgKFJERik6IENvbmNlcHRzIGFuZCBBYnN0cmFjdCBTeW50YXg8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMi0xMCAtIDxhIHRpdGxlPSJSZXNvdXJjZSBEZXNjcmlwdGlvbiBGcmFtZXdvcmsgKFJERik6IENvbmNlcHRzIGFuZCBBYnN0cmFjdCBTeW50YXggcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZi1jb25jZXB0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyYWhhbSBLbHluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplcmVteSBDYXJyb2xsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im93bCB3ZWIgb250b2xvZ3kgbGFuZ3VhZ2Ugc2VtYW50aWNzIGFuZCBhYnN0cmFjdCBzeW50YXgiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9SRUMtb3dsLXNlbWFudGljcy0yMDA0MDIxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBTZW1hbnRpY3MgYW5kIEFic3RyYWN0IFN5bnRheCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgU2VtYW50aWNzIGFuZCBBYnN0cmFjdCBTeW50YXg8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBPbnRvbG9neSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDItMTAgLSA8YSB0aXRsZT0iT1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBTZW1hbnRpY3MgYW5kIEFic3RyYWN0IFN5bnRheCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsLXNlbWFudGljcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFBhdGVsLVNjaG5laWRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgSGF5ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSG9ycm9ja3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgd2ViIG9udG9sb2d5IGxhbmd1YWdlIHJlZmVyZW5jZSIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1JFQy1vd2wtcmVmLTIwMDQwMjEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIFJlZmVyZW5jZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUmVmZXJlbmNlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgT250b2xvZ3kgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAyLTEwIC0gPGEgdGl0bGU9Ik9XTCBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUmVmZXJlbmNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wtcmVmIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBEZWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3V1cyBTY2hyZWliZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmRmIHByaW1lciIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1JFQy1yZGYtcHJpbWVyLTIwMDQwMjEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSREYgUHJpbWVyIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGIFByaW1lcjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UkRGIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAyLTEwIC0gPGEgdGl0bGU9IlJERiBQcmltZXIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3JkZi1wcmltZXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmFuayBNYW5vbGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FcmljIE1pbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIHdlYiBvbnRvbG9neSBsYW5ndWFnZSB0ZXN0IGNhc2VzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9SRUMtb3dsLXRlc3QtMjAwNDAyMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE9XTCBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgVGVzdCBDYXNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk9XTCBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgVGVzdCBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIE9udG9sb2d5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMi0xMCAtIDxhIHRpdGxlPSJPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIFRlc3QgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L293bC10ZXN0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVyZW15IENhcnJvbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb3MgRGUgUm9vCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJkZiB0ZXN0IGNhc2VzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLXJkZi10ZXN0Y2FzZXMtMjAwNDAyMTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJERiBUZXN0IENhc2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UkRGIFRlc3QgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlJERiBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMi0xMCAtIDxhIHRpdGxlPSJSREYgVGVzdCBDYXNlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRmLXRlc3RjYXNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPmphbiBncmFudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgQmVja2V0dAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im93bCB3ZWIgb250b2xvZ3kgbGFuZ3VhZ2Ugb3ZlcnZpZXciIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwNC9SRUMtb3dsLWZlYXR1cmVzLTIwMDQwMjEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIE92ZXJ2aWV3IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBPdmVydmlldzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIE9udG9sb2d5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwNC0wMi0xMCAtIDxhIHRpdGxlPSJPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIE92ZXJ2aWV3IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wtZmVhdHVyZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EZWJvcmFoIE1jR3Vpbm5lc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmFuayB2YW4gSGFybWVsZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgaW5mb3JtYXRpb24gc2V0IChzZWNvbmQgZWRpdGlvbikiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA0L1JFQy14bWwtaW5mb3NldC0yMDA0MDIwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEluZm9ybWF0aW9uIFNldCAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEluZm9ybWF0aW9uIFNldCAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDQtMDItMDQgLSA8YSB0aXRsZT0iWE1MIEluZm9ybWF0aW9uIFNldCAoU2Vjb25kIEVkaXRpb24pIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtaW5mb3NldCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gQ293YW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFRvYmluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRvY3VtZW50IG9iamVjdCBtb2RlbCAoZG9tKSBsZXZlbCAzIHZhbGlkYXRpb24gc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9ImRvbSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLURPTS1MZXZlbC0zLVZhbC0yMDA0MDEyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRG9jdW1lbnQgT2JqZWN0IE1vZGVsIChET00pIExldmVsIDMgVmFsaWRhdGlvbiBTcGVjaWZpY2F0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RG9jdW1lbnQgT2JqZWN0IE1vZGVsIChET00pIExldmVsIDMgVmFsaWRhdGlvbiBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5ET00gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAxLTI3IC0gPGEgdGl0bGU9IkRvY3VtZW50IE9iamVjdCBNb2RlbCAoRE9NKSBMZXZlbCAzIFZhbGlkYXRpb24gU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvRE9NLUxldmVsLTMtVmFsIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QmVuIENoYW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZXBoIEtlc3NlbG1hbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnJlemF1ciByYWhtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkb20iPkRPTQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ib3dsIHdlYiBvbnRvbG9neSBsYW5ndWFnZSBwYXJzaW5nIG93bCBpbiByZGYveG1sIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvTk9URS1vd2wtcGFyc2luZy0yMDA0MDEyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgT1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBQYXJzaW5nIE9XTCBpbiBSREYvWE1MIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBQYXJzaW5nIE9XTCBpbiBSREYvWE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgT250b2xvZ3kgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAxLTIxIC0gPGEgdGl0bGU9Ik9XTCBXZWIgT250b2xvZ3kgTGFuZ3VhZ2UgUGFyc2luZyBPV0wgaW4gUkRGL1hNTCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvb3dsLXBhcnNpbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TZWFuIEJlY2hob2ZlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbXBvc2l0ZSBjYXBhYmlsaXR5L3ByZWZlcmVuY2UgcHJvZmlsZXMgKGNjL3BwKTogc3RydWN0dXJlIGFuZCB2b2NhYnVsYXJpZXMgMS4wIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDQvUkVDLUNDUFAtc3RydWN0LXZvY2FiLTIwMDQwMTE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDb21wb3NpdGUgQ2FwYWJpbGl0eS9QcmVmZXJlbmNlIFByb2ZpbGVzIChDQy9QUCk6IFN0cnVjdHVyZSBhbmQgVm9jYWJ1bGFyaWVzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbXBvc2l0ZSAgQ2FwYWJpbGl0eS9QcmVmZXJlbmNlICBQcm9maWxlcyAgKENDL1BQKTogIFN0cnVjdHVyZSAgYW5kICBWb2NhYnVsYXJpZXMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZSBJbmRlcGVuZGVuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDA0LTAxLTE1IC0gPGEgdGl0bGU9IkNvbXBvc2l0ZSBDYXBhYmlsaXR5L1ByZWZlcmVuY2UgUHJvZmlsZXMgKENDL1BQKTogU3RydWN0dXJlIGFuZCBWb2NhYnVsYXJpZXMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9DQ1BQLXN0cnVjdC12b2NhYiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyYWhhbSBLbHluZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkZyYW5rbGluIFJleW5vbGRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXN0b3BoZXIgV29vZHJvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhpZGV0YWthIE9odG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbiBIamVsbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgQnV0bGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+THV1IFRyYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2libGUgc3R5bGVzaGVldCBsYW5ndWFnZSAoeHNsKSB2ZXJzaW9uIDEuMSByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QteHNsMTEtcmVxLTIwMDMxMjE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBFeHRlbnNpYmxlIFN0eWxlc2hlZXQgTGFuZ3VhZ2UgKFhTTCkgVmVyc2lvbiAxLjEgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RXh0ZW5zaWJsZSBTdHlsZXNoZWV0IExhbmd1YWdlIChYU0wpIFZlcnNpb24gMS4xIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMTItMTcgLSA8YSB0aXRsZT0iRXh0ZW5zaWJsZSBTdHlsZXNoZWV0IExhbmd1YWdlIChYU0wpIFZlcnNpb24gMS4xIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsMTEtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBHcm9zc28KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzdHJ1Y3R1cmVkIHR5cGVzIGluIG1hdGhtbCAyLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL05PVEUtbWF0aG1sLXR5cGVzLTIwMDMxMTEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTdHJ1Y3R1cmVkIFR5cGVzIGluIE1hdGhNTCAyLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TdHJ1Y3R1cmVkICBUeXBlcyAgaW4gIE1hdGhNTCZuYnNwOzIuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TWF0aCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMTEtMTAgLSA8YSB0aXRsZT0iU3RydWN0dXJlZCBUeXBlcyBpbiBNYXRoTUwgMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9tYXRobWwtdHlwZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGFuIERldml0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pY2hhZWwgS29obGhhc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXggRnJvdW1lbnRpbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idW5pdHMgaW4gbWF0aG1sIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9OT1RFLW1hdGhtbC11bml0cy0yMDAzMTExMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVW5pdHMgaW4gTWF0aE1MIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VW5pdHMgaW4gTWF0aE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NYXRoIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0xMS0xMCAtIDxhIHRpdGxlPSJVbml0cyBpbiBNYXRoTUwgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21hdGhtbC11bml0cyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvdWdsYXMgSGFyZGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RhbiBEZXZpdHQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwb3J0YWJsZSBuZXR3b3JrIGdyYXBoaWNzIChwbmcpIHNwZWNpZmljYXRpb24gKHNlY29uZCBlZGl0aW9uKSIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyBlZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9SRUMtUE5HLTIwMDMxMTEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQb3J0YWJsZSBOZXR3b3JrIEdyYXBoaWNzIChQTkcpIFNwZWNpZmljYXRpb24gKFNlY29uZCBFZGl0aW9uKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvcnRhYmxlIE5ldHdvcmsgR3JhcGhpY3MgKFBORykgU3BlY2lmaWNhdGlvbiAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0xMS0xMCAtIDxhIHRpdGxlPSJQb3J0YWJsZSBOZXR3b3JrIEdyYXBoaWNzIChQTkcpIFNwZWNpZmljYXRpb24gKFNlY29uZCBFZGl0aW9uKSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUE5HIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAtIDxhIGhyZWY9Imh0dHBzOi8vdzNjLmdpdGh1Yi5pby9QTkctc3BlYy8iIHRpdGxlPSJMYXRlc3QgZWRpdG9yJ3MgZHJhZnQgb2YgUG9ydGFibGUgTmV0d29yayBHcmFwaGljcyAoUE5HKSBTcGVjaWZpY2F0aW9uIChTZWNvbmQgRWRpdGlvbikiPkVkaXRvcidzIERyYWZ0PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2aWQgRHVjZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYm91bmQgdmFyaWFibGVzIGluIG1hdGhtbCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvTk9URS1tYXRobWwtYnZhci0yMDAzMTExMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQm91bmQgVmFyaWFibGVzIGluIE1hdGhNTCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkJvdW5kIFZhcmlhYmxlcyBpbiBNYXRoTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPk1hdGggV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTExLTEwIC0gPGEgdGl0bGU9IkJvdW5kIFZhcmlhYmxlcyBpbiBNYXRoTUwgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21hdGhtbC1idmFyIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RhbiBEZXZpdHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWNoYWVsIEtvaGxoYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibWF0aGVtYXRpY2FsIG1hcmt1cCBsYW5ndWFnZSAobWF0aG1sKSB2ZXJzaW9uIDIuMCAoc2Vjb25kIGVkaXRpb24pIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9SRUMtTWF0aE1MMi0yMDAzMTAyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTWF0aGVtYXRpY2FsIE1hcmt1cCBMYW5ndWFnZSAoTWF0aE1MKSBWZXJzaW9uIDIuMCAoU2Vjb25kIEVkaXRpb24pIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TWF0aGVtYXRpY2FsIE1hcmt1cCBMYW5ndWFnZSAoTWF0aE1MKSBWZXJzaW9uIDIuMCAoU2Vjb25kIEVkaXRpb24pPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NYXRoIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0xMC0yMSAtIDxhIHRpdGxlPSJNYXRoZW1hdGljYWwgTWFya3VwIExhbmd1YWdlIChNYXRoTUwpIFZlcnNpb24gMi4wIChTZWNvbmQgRWRpdGlvbikgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L01hdGhNTDIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBDYXJsaXNsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgRCBGIElvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvYmVydCBSIE1pbmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TmljbyBQb3BwZWxpZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGV2ZW50cyIgZGF0YS10YWc9ImRvbSB4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1JFQy14bWwtZXZlbnRzLTIwMDMxMDE0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgRXZlbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEV2ZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WEhUTUwyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0xMC0xNCAtIDxhIHRpdGxlPSJYTUwgRXZlbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtZXZlbnRzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZW4gUGVtYmVydG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VC5WLiBSYW1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRvbSI+RE9NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4Zm9ybXMgMS4wIGJhc2ljIHByb2ZpbGUiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJjciIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5DUjwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IkNhbmRpZGF0ZVJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9DUi14Zm9ybXMtYmFzaWMtMjAwMzEwMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhGb3JtcyAxLjAgQmFzaWMgUHJvZmlsZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhGb3JtcyAxLjAgQmFzaWMgUHJvZmlsZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Rm9ybXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTEwLTE0IC0gPGEgdGl0bGU9IlhGb3JtcyAxLjAgQmFzaWMgUHJvZmlsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveGZvcm1zLWJhc2ljIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljYWggRHViaW5rbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlQuVi4gUmFtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibGJhc2U6IHNlbWFudGljcyBmb3IgbGFuZ3VhZ2VzIG9mIHRoZSBzZW1hbnRpYyB3ZWIiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9OT1RFLWxiYXNlLTIwMDMxMDEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBMQmFzZTogU2VtYW50aWNzIGZvciBMYW5ndWFnZXMgb2YgdGhlIFNlbWFudGljIFdlYiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkxCYXNlOiBTZW1hbnRpY3MgZm9yIExhbmd1YWdlcyBvZiB0aGUgU2VtYW50aWMgV2ViPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5SREYgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMTAtMTAgLSA8YSB0aXRsZT0iTEJhc2U6IFNlbWFudGljcyBmb3IgTGFuZ3VhZ2VzIG9mIHRoZSBTZW1hbnRpYyBXZWIgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2xiYXNlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UmFtYW5hdGhhbiBHdWhhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF0cmljayBIYXllcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNvYXAgdmVyc2lvbiAxLjIgbWVzc2FnZSBub3JtYWxpemF0aW9uIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9OT1RFLXNvYXAxMi1uMTFuLTIwMDMxMDA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTT0FQIFZlcnNpb24gMS4yIE1lc3NhZ2UgTm9ybWFsaXphdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNPQVAgVmVyc2lvbiAxLjIgTWVzc2FnZSBOb3JtYWxpemF0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTEwLTA4IC0gPGEgdGl0bGU9IlNPQVAgVmVyc2lvbiAxLjIgTWVzc2FnZSBOb3JtYWxpemF0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zb2FwMTItbjExbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnRpbiBHdWRnaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjIEhhZGxleQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwcm9wb3NhbCBmb3IgeG1sIGZyYWdtZW50IGlkZW50aWZpZXIgc3ludGF4IDAuOSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9OT1RFLXhtbC1mcmFnaWQtMjAwMzA5MTIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByb3Bvc2FsIGZvciBYTUwgRnJhZ21lbnQgSWRlbnRpZmllciBTeW50YXggMC45IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UHJvcG9zYWwgIGZvciAgWE1MICBGcmFnbWVudCAgSWRlbnRpZmllciAgU3ludGF4Jm5ic3A7MC45PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wOS0xMiAtIDxhIHRpdGxlPSJQcm9wb3NhbCBmb3IgWE1MIEZyYWdtZW50IElkZW50aWZpZXIgU3ludGF4IDAuOSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLWZyYWdpZCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgR3Jvc3NvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZXZpY2UgaW5kZXBlbmRlbmNlIHByaW5jaXBsZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL05PVEUtZGktcHJpbmMtMjAwMzA5MDEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERldmljZSBJbmRlcGVuZGVuY2UgUHJpbmNpcGxlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRldmljZSBJbmRlcGVuZGVuY2UgUHJpbmNpcGxlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlIEluZGVwZW5kZW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMDktMDEgLSA8YSB0aXRsZT0iRGV2aWNlIEluZGVwZW5kZW5jZSBQcmluY2lwbGVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9kaS1wcmluYyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvZ2VyIEdpbXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYXV0aG9yaW5nIGNoYWxsZW5nZXMgZm9yIGRldmljZSBpbmRlcGVuZGVuY2UiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL05PVEUtYWNkaS0yMDAzMDkwMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXV0aG9yaW5nIENoYWxsZW5nZXMgZm9yIERldmljZSBJbmRlcGVuZGVuY2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BdXRob3JpbmcgQ2hhbGxlbmdlcyBmb3IgRGV2aWNlIEluZGVwZW5kZW5jZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+RGV2aWNlIEluZGVwZW5kZW5jZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMDktMDEgLSA8YSB0aXRsZT0iQXV0aG9yaW5nIENoYWxsZW5nZXMgZm9yIERldmljZSBJbmRlcGVuZGVuY2UgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L2FjZGkiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaHlzIExld2lzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbDppZCByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QteG1sLWlkLXJlcS0yMDAzMDgwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgeG1sOmlkIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPnhtbDppZCBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBDb3JlIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wOC0wNiAtIDxhIHRpdGxlPSJ4bWw6aWQgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtaWQtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uYXRoYW4gTWFyc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InNvYXAgdmVyc2lvbiAxLjIgdXNhZ2Ugc2NlbmFyaW9zIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9OT1RFLXhtbHAtc2NlbmFyaW9zLTIwMDMwNzMwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTT0FQIFZlcnNpb24gMS4yIFVzYWdlIFNjZW5hcmlvcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNPQVAgVmVyc2lvbiAxLjIgVXNhZ2UgU2NlbmFyaW9zPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTA3LTMwIC0gPGEgdGl0bGU9IlNPQVAgVmVyc2lvbiAxLjIgVXNhZ2UgU2NlbmFyaW9zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxwLXNjZW5hcmlvcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gSWJib3Rzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHByb3RvY29sICh4bWxwKSByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL05PVEUteG1scC1yZXFzLTIwMDMwNzI4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgUHJvdG9jb2wgKFhNTFApIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBQcm90b2NvbCAoWE1MUCkgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTA3LTI4IC0gPGEgdGl0bGU9IlhNTCBQcm90b2NvbCAoWE1MUCkgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxwLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4IENlcG9ua3VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBDb3R0b24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZpZCBFemVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIEZhbGxzaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFydGluIEd1ZGdpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk9pc2luIEh1cmxleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gSWJib3Rzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGV4IE1pxYJvd3NraQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPktldmluIE1pdGNoZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVhbi1KYWNxdWVzIE1vcmVhdQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWMgTmV3Y29tZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yaWsgRnJ5c3R5ayBOaWVsc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Qm9iIExvamVrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBOb3R0aW5naGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2FxYXIgU2FkaXEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdHVhcnQgV2lsbGlhbXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbXIgWWFzc2luCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJvd2wgd2ViIG9udG9sb2d5IGxhbmd1YWdlIHhtbCBwcmVzZW50YXRpb24gc3ludGF4IiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvTk9URS1vd2wteG1sc3ludGF4LTIwMDMwNjExLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIFhNTCBQcmVzZW50YXRpb24gU3ludGF4IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+T1dMIFdlYiBPbnRvbG9neSBMYW5ndWFnZSBYTUwgUHJlc2VudGF0aW9uIFN5bnRheDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+V2ViIE9udG9sb2d5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wNi0xMSAtIDxhIHRpdGxlPSJPV0wgV2ViIE9udG9sb2d5IExhbmd1YWdlIFhNTCBQcmVzZW50YXRpb24gU3ludGF4IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9vd2wteG1sc3ludGF4Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzYWhpcm8gSG9yaQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkrDqXLDtG1lIEV1emVuYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QZXRlciBQYXRlbC1TY2huZWlkZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvcmUgcHJlc2VudGF0aW9uIGNoYXJhY3RlcmlzdGljczrCoHJlcXVpcmVtZW50cyBhbmQgdXNlIGNhc2VzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELWNwYy1yZXEtMjAwMzA1MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvcmUgUHJlc2VudGF0aW9uIENoYXJhY3RlcmlzdGljczrCoFJlcXVpcmVtZW50cyBhbmQgVXNlIENhc2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29yZSBQcmVzZW50YXRpb24gQ2hhcmFjdGVyaXN0aWNzOsKgUmVxdWlyZW1lbnRzIGFuZCBVc2UgQ2FzZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkRldmljZSBJbmRlcGVuZGVuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTA1LTEwIC0gPGEgdGl0bGU9IkNvcmUgUHJlc2VudGF0aW9uIENoYXJhY3RlcmlzdGljczrCoFJlcXVpcmVtZW50cyBhbmQgVXNlIENhc2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9jcGMtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFya3VzIExhdWZmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW15IFl1CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3M2MgbXVsdGltb2RhbCBpbnRlcmFjdGlvbiBmcmFtZXdvcmsiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL05PVEUtbW1pLWZyYW1ld29yay0yMDAzMDUwNi8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVzNDIE11bHRpbW9kYWwgSW50ZXJhY3Rpb24gRnJhbWV3b3JrIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VzNDIE11bHRpbW9kYWwgSW50ZXJhY3Rpb24gRnJhbWV3b3JrPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wNS0wNiAtIDxhIHRpdGxlPSJXM0MgTXVsdGltb2RhbCBJbnRlcmFjdGlvbiBGcmFtZXdvcmsgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21taS1mcmFtZXdvcmsiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ULlYuIFJhbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBSYWdnZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwga2V5IG1hbmFnZW1lbnQgKHhrbXMgMi4wKSByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL05PVEUteGttczItcmVxLTIwMDMwNTA1IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBLZXkgTWFuYWdlbWVudCAoWEtNUyAyLjApIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBLZXkgTWFuYWdlbWVudCAoWEtNUyAyLjApIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMDUtMDUgLSA8YSB0aXRsZT0iWE1MIEtleSBNYW5hZ2VtZW50IChYS01TIDIuMCkgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94a21zMi1yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmVkZXJpY2sgSGlyc2NoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrZSBKdXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImZyYW1ld29yayBkb2N1bWVudCBmb3IgaTE4biBndWlkZWxpbmVzIDEuMCIgZGF0YS10YWc9ImkxOG4iIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtaTE4bi1ndWlkZS1mcmFtZXdvcmstMjAwMzA0MTcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEZyYW1ld29yayBEb2N1bWVudCBmb3IgaTE4biBHdWlkZWxpbmVzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkZyYW1ld29yayAgRG9jdW1lbnQgIGZvciAgaTE4biAgR3VpZGVsaW5lcyZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTA0LTE3IC0gPGEgdGl0bGU9IkZyYW1ld29yayBEb2N1bWVudCBmb3IgaTE4biBHdWlkZWxpbmVzIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaTE4bi1ndWlkZS1mcmFtZXdvcmsiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIElzaGlkYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHBvaW50ZXIgZWxlbWVudCgpIHNjaGVtZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvUkVDLXhwdHItZWxlbWVudC0yMDAzMDMyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFBvaW50ZXIgZWxlbWVudCgpIFNjaGVtZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhQb2ludGVyIGVsZW1lbnQoKSBTY2hlbWU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBMaW5raW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wMy0yNSAtIDxhIHRpdGxlPSJYUG9pbnRlciBlbGVtZW50KCkgU2NoZW1lIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cHRyLWVsZW1lbnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIEdyb3NzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV2ZSBNYWxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvbmF0aGFuIE1hcnNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cG9pbnRlciB4bWxucygpIHNjaGVtZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvUkVDLXhwdHIteG1sbnMtMjAwMzAzMjUvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhQb2ludGVyIHhtbG5zKCkgU2NoZW1lIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFBvaW50ZXIgeG1sbnMoKSBTY2hlbWU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBMaW5raW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wMy0yNSAtIDxhIHRpdGxlPSJYUG9pbnRlciB4bWxucygpIFNjaGVtZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHB0ci14bWxucyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBEZVJvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb24gRGFuaWVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXZlIE1hbGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uYXRoYW4gTWFyc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhwb2ludGVyIGZyYW1ld29yayIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvUkVDLXhwdHItZnJhbWV3b3JrLTIwMDMwMzI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYUG9pbnRlciBGcmFtZXdvcmsgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YUG9pbnRlciBGcmFtZXdvcms8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBMaW5raW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wMy0yNSAtIDxhIHRpdGxlPSJYUG9pbnRlciBGcmFtZXdvcmsgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwdHItZnJhbWV3b3JrIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBHcm9zc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FdmUgTWFsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBNYXJzaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vcm1hbiBXYWxzaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgcHJvdG9jb2wgYWJzdHJhY3QgbW9kZWwiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QteG1scC1hbS0yMDAzMDIyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFByb3RvY29sIEFic3RyYWN0IE1vZGVsIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFByb3RvY29sIEFic3RyYWN0IE1vZGVsPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgUHJvdG9jb2wgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTAyLTIwIC0gPGEgdGl0bGU9IlhNTCBQcm90b2NvbCBBYnN0cmFjdCBNb2RlbCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1scC1hbSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0dWFydCBXaWxsaWFtcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmsgSm9uZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3ZnIHByaW50aW5nIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELVNWR1ByaW50UmVxcy0yMDAzMDIxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1ZHIFByaW50aW5nIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNWRyBQcmludGluZyBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNWRyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMDItMTggLSA8YSB0aXRsZT0iU1ZHIFByaW50aW5nIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvU1ZHUHJpbnRSZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SnVuIEZ1amlzYXdhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGVlIEtsb3N0ZXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DcmFpZyBCcm93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFsZXggRGFuaWxvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJlcXVpcmVtZW50cyBmb3Igd2NhZyAyLjAgY2hlY2tsaXN0cyBhbmQgdGVjaG5pcXVlcyIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0Qtd2NhZzItdGVjaC1yZXEtMjAwMzAyMDcvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgV0NBRyAyLjAgQ2hlY2tsaXN0cyBhbmQgVGVjaG5pcXVlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyBmb3IgV0NBRyAyLjAgQ2hlY2tsaXN0cyBhbmQgVGVjaG5pcXVlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wMi0wNyAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIFdDQUcgMi4wIENoZWNrbGlzdHMgYW5kIFRlY2huaXF1ZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3djYWcyLXRlY2gtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGFlbCBDb29wZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIHRoZSBpbmsgbWFya3VwIGxhbmd1YWdlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9OT1RFLWlua3JlcXMtMjAwMzAxMjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgdGhlIEluayBNYXJrdXAgTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXF1aXJlbWVudHMgZm9yIHRoZSBJbmsgTWFya3VwIExhbmd1YWdlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wMS0yMiAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIHRoZSBJbmsgTWFya3VwIExhbmd1YWdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9pbmtyZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+WWktTWluIENoZWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYWkgUHJhc2FkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icmVxdWlyZW1lbnRzIGZvciB4bWwgc2NoZW1hIDEuMSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC14bWxzY2hlbWEtMTEtcmVxLTIwMDMwMTIxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXF1aXJlbWVudHMgZm9yIFhNTCBTY2hlbWEgMS4xIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+UmVxdWlyZW1lbnRzICBmb3IgIFhNTCAgU2NoZW1hJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2NoZW1hIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wMS0yMSAtIDxhIHRpdGxlPSJSZXF1aXJlbWVudHMgZm9yIFhNTCBTY2hlbWEgMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxzY2hlbWEtMTEtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBDYW1wYmVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UHJpc2NpbGxhIFdhbG1zbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJtb2JpbGUgc3ZnIHByb2ZpbGVzOiBzdmcgdGlueSBhbmQgc3ZnIGJhc2ljIiBkYXRhLXRhZz0iZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1JFQy1TVkdNb2JpbGUtMjAwMzAxMTQvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vYmlsZSBTVkcgUHJvZmlsZXM6IFNWRyBUaW55IGFuZCBTVkcgQmFzaWMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Nb2JpbGUgU1ZHIFByb2ZpbGVzOiBTVkcgVGlueSBhbmQgU1ZHIEJhc2ljPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAzLTAxLTE0IC0gPGEgdGl0bGU9Ik1vYmlsZSBTVkcgUHJvZmlsZXM6IFNWRyBUaW55IGFuZCBTVkcgQmFzaWMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWR01vYmlsZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvbGdhIENhcGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXF1aXJlbWVudHMgZm9yIGVtbWEiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL05PVEUtRU1NQXJlcXMtMjAwMzAxMTMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJlcXVpcmVtZW50cyBmb3IgRU1NQSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJlcXVpcmVtZW50cyBmb3IgRU1NQTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDMtMDEtMTMgLSA8YSB0aXRsZT0iUmVxdWlyZW1lbnRzIGZvciBFTU1BIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9FTU1BcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0w6lwaGFuZSBNYWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RlcGhlbiBQb3R0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im11bHRpbW9kYWwgaW50ZXJhY3Rpb24gcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9OT1RFLW1taS1yZXFzLTIwMDMwMTA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNdWx0aW1vZGFsIEludGVyYWN0aW9uIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk11bHRpbW9kYWwgSW50ZXJhY3Rpb24gUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMy0wMS0wOCAtIDxhIHRpdGxlPSJNdWx0aW1vZGFsIEludGVyYWN0aW9uIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvbW1pLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdMOpcGhhbmUgTWFlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZpamF5IFNhcmFzd2F0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhwb2ludGVyIHhwb2ludGVyKCkgc2NoZW1lIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL1dELXhwdHIteHBvaW50ZXItMjAwMjEyMTkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhQb2ludGVyIHhwb2ludGVyKCkgU2NoZW1lIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFBvaW50ZXIgeHBvaW50ZXIoKSBTY2hlbWU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBMaW5raW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMi0xMi0xOSAtIDxhIHRpdGxlPSJYUG9pbnRlciB4cG9pbnRlcigpIFNjaGVtZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHB0ci14cG9pbnRlciI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBEZVJvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FdmUgTWFsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb24gRGFuaWVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZWNobmlxdWVzIGZvciB1c2VyIGFnZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGh0bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL05PVEUtVUFBRzEwLVRFQ0hTLTIwMDIxMjE3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUZWNobmlxdWVzIGZvciBVc2VyIEFnZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UZWNobmlxdWVzICBmb3IgIFVzZXIgIEFnZW50ICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Vc2VyIEFnZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMTItMTcgLSA8YSB0aXRsZT0iVGVjaG5pcXVlcyBmb3IgVXNlciBBZ2VudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9VQUFHMTAtVEVDSFMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSmFjb2JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uIEd1bmRlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkVyaWMgSGFuc2VuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idXNlciBhZ2VudCBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDIvUkVDLVVBQUcxMC0yMDAyMTIxNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVXNlciBBZ2VudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VXNlciAgQWdlbnQgIEFjY2Vzc2liaWxpdHkgIEd1aWRlbGluZXMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVzZXIgQWdlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMi0xMi0xNyAtIDxhIHRpdGxlPSJVc2VyIEFnZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1VBQUcxMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBKYWNvYnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb24gR3VuZGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBIYW5zZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJkZWNyeXB0aW9uIHRyYW5zZm9ybSBmb3IgeG1sIHNpZ25hdHVyZSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDIvUkVDLXhtbGVuYy1kZWNyeXB0LTIwMDIxMjEwIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIERlY3J5cHRpb24gVHJhbnNmb3JtIGZvciBYTUwgU2lnbmF0dXJlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGVjcnlwdGlvbiBUcmFuc2Zvcm0gZm9yIFhNTCBTaWduYXR1cmU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMTItMTAgLSA8YSB0aXRsZT0iRGVjcnlwdGlvbiBUcmFuc2Zvcm0gZm9yIFhNTCBTaWduYXR1cmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbGVuYy1kZWNyeXB0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWVybGluIEh1Z2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRha2VzaGkgSW1hbXVyYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhpcm9zaGkgTWFydXlhbWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibXVsdGltb2RhbCBpbnRlcmFjdGlvbiB1c2UgY2FzZXMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL05PVEUtbW1pLXVzZS1jYXNlcy0yMDAyMTIwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTXVsdGltb2RhbCBJbnRlcmFjdGlvbiBVc2UgQ2FzZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NdWx0aW1vZGFsIEludGVyYWN0aW9uIFVzZSBDYXNlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+TXVsdGltb2RhbCBJbnRlcmFjdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMTItMDQgLSA8YSB0aXRsZT0iTXVsdGltb2RhbCBJbnRlcmFjdGlvbiBVc2UgQ2FzZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L21taS11c2UtY2FzZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIFJhZ2dldHQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icWEgZnJhbWV3b3JrOiBvcGVyYXRpb25hbCBleGFtcGxlcyAmYW1wOyB0ZWNobmlxdWVzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL05PVEUtcWFmcmFtZS1vcHMtZXh0ZWNoLTIwMDIxMjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBRQSBGcmFtZXdvcms6IE9wZXJhdGlvbmFsIEV4YW1wbGVzICZhbXA7IFRlY2huaXF1ZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5RQSBGcmFtZXdvcms6IE9wZXJhdGlvbmFsIEV4YW1wbGVzICYgVGVjaG5pcXVlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UXVhbGl0eSBBc3N1cmFuY2UgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTEyLTAyIC0gPGEgdGl0bGU9IlFBIEZyYW1ld29yazogT3BlcmF0aW9uYWwgRXhhbXBsZXMgJmFtcDsgVGVjaG5pcXVlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcWFmcmFtZS1vcHMtZXh0ZWNoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TG9mdG9uIEhlbmRlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkx5bm5lIFJvc2VudGhhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRpbWl0cmlzIERpbWl0cmlhZGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+S2lyaWxsIEdhdnJ5bHl1awogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwtc2lnbmF0dXJlIHhwYXRoIGZpbHRlciAyLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL1JFQy14bWxkc2lnLWZpbHRlcjItMjAwMjExMDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTC1TaWduYXR1cmUgWFBhdGggRmlsdGVyIDIuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTC1TaWduYXR1cmUgIFhQYXRoICBGaWx0ZXImbmJzcDsyLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMTEtMDggLSA8YSB0aXRsZT0iWE1MLVNpZ25hdHVyZSBYUGF0aCBGaWx0ZXIgMi4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWxkc2lnLWZpbHRlcjIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIEJveWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWVybGluIEh1Z2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBSZWFnbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZWNobmlxdWVzIGZvciBhdXRob3JpbmcgdG9vbCBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMgMS4wIiBkYXRhLXRhZz0iYWNjZXNzaWJpbGl0eSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0idXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMi9OT1RFLUFUQUcxMC1URUNIUy0yMDAyMTAyOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGVjaG5pcXVlcyBmb3IgQXV0aG9yaW5nIFRvb2wgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRlY2huaXF1ZXMgIGZvciAgQXV0aG9yaW5nICBUb29sICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BdXRob3JpbmcgVG9vbCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTEwLTI5IC0gPGEgdGl0bGU9IlRlY2huaXF1ZXMgZm9yIEF1dGhvcmluZyBUb29sIEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0FUQUcxMC1URUNIUyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1dHRhIFRyZXZpcmFudXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGFybGVzIE1jQ2F0aGllTmV2aWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFuIFJpY2hhcmRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R3JlZ29yeSBSb3NtYWl0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0id2ViIHNlcnZpY2VzIGRlc2NyaXB0aW9uIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMi9XRC13cy1kZXNjLXJlcXMtMjAwMjEwMjgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFdlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZXMgRGVzY3JpcHRpb24gUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5XZWIgU2VydmljZXMgRGVzY3JpcHRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTEwLTI4IC0gPGEgdGl0bGU9IldlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3dzLWRlc2MtcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplZmZyZXkgU2NobGltbWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0id2QiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+V0Q8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJXb3JraW5nRHJhZnQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL1dELXhhZy0yMDAyMTAwMyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UHJvdG9jb2xzIGFuZCBGb3JtYXRzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMi0xMC0wMyAtIDxhIHRpdGxlPSJYTUwgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94YWciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgRGFyZGFpbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNlYW4gUGFsbWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBNY0NhdGhpZU5ldmlsZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhodG1sIDEuMCBpbiB4bWwgc2NoZW1hIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDIvTk9URS14aHRtbDEtc2NoZW1hLTIwMDIwOTAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTCAxLjAgaW4gWE1MIFNjaGVtYSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhIVE1MIDEuMCBpbiBYTUwgU2NoZW1hPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTA5LTAyIC0gPGEgdGl0bGU9IlhIVE1MIDEuMCBpbiBYTUwgU2NoZW1hIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbDEtc2NoZW1hIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzYXlhc3UgSXNoaWthd2EKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImFuIHhodG1sICsgbWF0aG1sICsgc3ZnIHByb2ZpbGUiIGRhdGEtdGFnPSJncmFwaGljcyBodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL1dELVhIVE1McGx1c01hdGhNTHBsdXNTVkctMjAwMjA4MDkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEFuIFhIVE1MICsgTWF0aE1MICsgU1ZHIFByb2ZpbGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BbiBYSFRNTCArIE1hdGhNTCArIFNWRyBQcm9maWxlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTA4LTA5IC0gPGEgdGl0bGU9IkFuIFhIVE1MICsgTWF0aE1MICsgU1ZHIFByb2ZpbGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1hIVE1McGx1c01hdGhNTHBsdXNTVkciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXNheWFzdSBJc2hpa2F3YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImdyYXBoaWNzIj5HcmFwaGljcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InZvaWNlIGJyb3dzZXIgaW50ZXJvcGVyYXRpb246IHJlcXVpcmVtZW50cyIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL1dELXZiaS1yZXFzLTIwMDIwODA4LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBWb2ljZSBCcm93c2VyIEludGVyb3BlcmF0aW9uOiBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Wb2ljZSBCcm93c2VyIEludGVyb3BlcmF0aW9uOiBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTA4LTA4IC0gPGEgdGl0bGU9IlZvaWNlIEJyb3dzZXIgSW50ZXJvcGVyYXRpb246IFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvdmJpLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5LZW5uZXRoIFJlaG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4Y2x1c2l2ZSB4bWwgY2Fub25pY2FsaXphdGlvbiB2ZXJzaW9uIDEuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDIvUkVDLXhtbC1leGMtYzE0bi0yMDAyMDcxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXhjbHVzaXZlIFhNTCBDYW5vbmljYWxpemF0aW9uIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RXhjbHVzaXZlICBYTUwgIENhbm9uaWNhbGl6YXRpb24gIFZlcnNpb24mbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMDctMTggLSA8YSB0aXRsZT0iRXhjbHVzaXZlIFhNTCBDYW5vbmljYWxpemF0aW9uIFZlcnNpb24gMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtZXhjLWMxNG4iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIEJveWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RG9uYWxkIEVhc3RsYWtlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZXBoIFJlYWdsZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzb2FwIHZlcnNpb24gMS4yIGVtYWlsIGJpbmRpbmciIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL05PVEUtc29hcDEyLWVtYWlsLTIwMDIwNzAzIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNPQVAgVmVyc2lvbiAxLjIgRW1haWwgQmluZGluZyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNPQVAgVmVyc2lvbiAxLjIgRW1haWwgQmluZGluZzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFByb3RvY29sIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMi0wNy0wMyAtIDxhIHRpdGxlPSJTT0FQIFZlcnNpb24gMS4yIEVtYWlsIEJpbmRpbmcgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3NvYXAxMi1lbWFpbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhpZ2hsYW5kIE1hcnkgTW91bnRhaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYWNlayBLb3BlY2t5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3R1YXJ0IFdpbGxpYW1zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+R2xlbiBEYW5pZWxzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9haCBNZW5kZWxzb2huCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBzZXJ2aWNlIGRlc2NyaXB0aW9uIHVzYWdlIHNjZW5hcmlvcyIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMi9XRC13cy1kZXNjLXVzZWNhc2VzLTIwMDIwNjA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgU2VydmljZSBEZXNjcmlwdGlvbiBVc2FnZSBTY2VuYXJpb3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgU2VydmljZSBEZXNjcmlwdGlvbiBVc2FnZSBTY2VuYXJpb3M8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPldlYiBTZXJ2aWNlcyBEZXNjcmlwdGlvbiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMDYtMDQgLSA8YSB0aXRsZT0iV2ViIFNlcnZpY2UgRGVzY3JpcHRpb24gVXNhZ2UgU2NlbmFyaW9zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS93cy1kZXNjLXVzZWNhc2VzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2FxYXIgU2FkaXEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TYW5kZWVwIEt1bWFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzdmcgMS4xLzEuMi8yLjAgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0iZ3JhcGhpY3MiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDIvV0QtU1ZHMlJlcXMtMjAwMjA0MjIvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFNWRyAxLjEvMS4yLzIuMCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgMS4xLzEuMi8yLjAgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TVkcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTA0LTIyIC0gPGEgdGl0bGU9IlNWRyAxLjEvMS4yLzIuMCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NWRzJSZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVhbiBKYWNrc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImEgcDNwIHByZWZlcmVuY2UgZXhjaGFuZ2UgbGFuZ3VhZ2UgMS4wIChhcHBlbDEuMCkiIGRhdGEtdGFnPSJwcml2YWN5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL1dELVAzUC1wcmVmZXJlbmNlcy0yMDAyMDQxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQSBQM1AgUHJlZmVyZW5jZSBFeGNoYW5nZSBMYW5ndWFnZSAxLjAgKEFQUEVMMS4wKSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkEgUDNQIFByZWZlcmVuY2UgRXhjaGFuZ2UgTGFuZ3VhZ2UgMS4wIChBUFBFTDEuMCk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlAzUCBTcGVjaWZpY2F0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMi0wNC0xNSAtIDxhIHRpdGxlPSJBIFAzUCBQcmVmZXJlbmNlIEV4Y2hhbmdlIExhbmd1YWdlIDEuMCAoQVBQRUwxLjApIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9QM1AtcHJlZmVyZW5jZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJjIExhbmdoZWlucmljaAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InByaXZhY3kiPlByaXZhY3kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibmFtZXNwYWNlcyBpbiB4bWwgMS4xIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMi9XRC14bWwtbmFtZXMxMS1yZXEtMjAwMjA0MDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE5hbWVzcGFjZXMgaW4gWE1MIDEuMSBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5OYW1lc3BhY2VzIGluIFhNTCAxLjEgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMDQtMDMgLSA8YSB0aXRsZT0iTmFtZXNwYWNlcyBpbiBYTUwgMS4xIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLW5hbWVzMTEtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uYXRoYW4gTWFyc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwga2V5IG1hbmFnZW1lbnQgc3BlY2lmaWNhdGlvbiBidWxrIG9wZXJhdGlvbiAoeC1idWxrKSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMi9XRC14a21zMi14YnVsay0yMDAyMDMxOC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEtleSBNYW5hZ2VtZW50IFNwZWNpZmljYXRpb24gQnVsayBPcGVyYXRpb24gKFgtQlVMSykgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgS2V5IE1hbmFnZW1lbnQgU3BlY2lmaWNhdGlvbiBCdWxrIE9wZXJhdGlvbiAoWC1CVUxLKTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDItMDMtMTggLSA8YSB0aXRsZT0iWE1MIEtleSBNYW5hZ2VtZW50IFNwZWNpZmljYXRpb24gQnVsayBPcGVyYXRpb24gKFgtQlVMSykgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hrbXMyLXhidWxrIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWVybGluIEh1Z2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgZW5jcnlwdGlvbiByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL05PVEUteG1sLWVuY3J5cHRpb24tcmVxLTIwMDIwMzA0IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBFbmNyeXB0aW9uIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhNTCBFbmNyeXB0aW9uIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMi0wMy0wNCAtIDxhIHRpdGxlPSJYTUwgRW5jcnlwdGlvbiBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1lbmNyeXB0aW9uLXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBSZWFnbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0aGUgcGxhdGZvcm0gZm9yIHByaXZhY3kgcHJlZmVyZW5jZXMgMS4wIGRlcGxveW1lbnQgZ3VpZGUiIGRhdGEtdGFnPSJwcml2YWN5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAyL05PVEUtcDNwZGVwbG95bWVudC0yMDAyMDIxMSIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgUGxhdGZvcm0gZm9yIFByaXZhY3kgUHJlZmVyZW5jZXMgMS4wIERlcGxveW1lbnQgR3VpZGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgUGxhdGZvcm0gZm9yIFByaXZhY3kgUHJlZmVyZW5jZXMgMS4wIERlcGxveW1lbnQgR3VpZGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlAzUCBTcGVjaWZpY2F0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMi0wMi0xMSAtIDxhIHRpdGxlPSJUaGUgUGxhdGZvcm0gZm9yIFByaXZhY3kgUHJlZmVyZW5jZXMgMS4wIERlcGxveW1lbnQgR3VpZGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3AzcGRlcGxveW1lbnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gUHJlc2xlck1hcnNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icHJpdmFjeSI+UHJpdmFjeQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieGh0bWwrc21pbCBwcm9maWxlIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDIvTk9URS1YSFRNTHBsdXNTTUlMLTIwMDIwMTMxLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTCtTTUlMIFByb2ZpbGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YSFRNTCtTTUlMIFByb2ZpbGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNZTU0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAyLTAxLTMxIC0gPGEgdGl0bGU9IlhIVE1MK1NNSUwgUHJvZmlsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvWEhUTUxwbHVzU01JTCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFhcm9uIFBhdHRlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgU2NobWl0egogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY2MvcHAgaW1wbGVtZW50b3JzIGd1aWRlOiBwcml2YWN5IGFuZCBwcm90b2NvbHMiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL1dELUNDUFAtdHJ1c3QtMjAwMTEyMjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENDL1BQIEltcGxlbWVudG9ycyBHdWlkZTogUHJpdmFjeSBhbmQgUHJvdG9jb2xzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q0MvUFAgSW1wbGVtZW50b3JzIEd1aWRlOiBQcml2YWN5IGFuZCBQcm90b2NvbHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNDL1BQIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0xMi0yMCAtIDxhIHRpdGxlPSJDQy9QUCBJbXBsZW1lbnRvcnMgR3VpZGU6IFByaXZhY3kgYW5kIFByb3RvY29scyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvQ0NQUC10cnVzdCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhpZGV0YWthIE9odG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5MYWxpdGhhIFN1cnlhbmFyYXlhbmEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2hhbiBIamVsbQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNjL3BwIGltcGxlbWVudG9ycyBndWlkZTogaGFybW9uaXphdGlvbiB3aXRoIGV4aXN0aW5nIHZvY2FidWxhcmllcyBhbmQgY29udGVudCB0cmFuc2Zvcm1hdGlvbiBoZXVyaXN0aWNzIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvTk9URS1DQ1BQLUNPT1JESU5BVElPTi0yMDAxMTIyMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ0MvUFAgSW1wbGVtZW50b3JzIEd1aWRlOiBIYXJtb25pemF0aW9uIHdpdGggRXhpc3RpbmcgVm9jYWJ1bGFyaWVzIGFuZCBDb250ZW50IFRyYW5zZm9ybWF0aW9uIEhldXJpc3RpY3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DQy9QUCBJbXBsZW1lbnRvcnMgR3VpZGU6IEhhcm1vbml6YXRpb24gd2l0aCBFeGlzdGluZyBWb2NhYnVsYXJpZXMgYW5kIENvbnRlbnQgVHJhbnNmb3JtYXRpb24gSGV1cmlzdGljczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q0MvUFAgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAxLTEyLTIwIC0gPGEgdGl0bGU9IkNDL1BQIEltcGxlbWVudG9ycyBHdWlkZTogSGFybW9uaXphdGlvbiB3aXRoIEV4aXN0aW5nIFZvY2FidWxhcmllcyBhbmQgQ29udGVudCBUcmFuc2Zvcm1hdGlvbiBIZXVyaXN0aWNzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9DQ1BQLUNPT1JESU5BVElPTiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaGFuIEhqZWxtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TGFsaXRoYSBTdXJ5YW5hcmF5YW5hCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY29tcG9uZW50IGV4dGVuc2lvbiAoY3gpIGFwaSByZXF1aXJlbWVudHMgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL05PVEUtQ1gtMjAwMTEyMTEiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29tcG9uZW50IEV4dGVuc2lvbiAoQ1gpIEFQSSByZXF1aXJlbWVudHMgVmVyc2lvbiAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db21wb25lbnQgIEV4dGVuc2lvbiAgKENYKSAgQVBJICByZXF1aXJlbWVudHMgIFZlcnNpb24mbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkh5cGVydGV4dCBDb29yZGluYXRpb24gR3JvdXAgKE1lbWJlcik8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0xMi0xMSAtIDxhIHRpdGxlPSJDb21wb25lbnQgRXh0ZW5zaW9uIChDWCkgQVBJIHJlcXVpcmVtZW50cyBWZXJzaW9uIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvQ1giPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbmdlbCBEaWF6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9uIEZlcnJhaW9sbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWxpcHBlIExlIEjDqWdhcmV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGlsbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hhcmxlcyBNY0NhdGhpZU5ldmlsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRhcGFzIFJveQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJheSBXaGl0bWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImV4dGVuc2libGUgc3R5bGVzaGVldCBsYW5ndWFnZSAoeHNsKSB2ZXJzaW9uIDEuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXhzbC0yMDAxMTAxNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRXh0ZW5zaWJsZSBTdHlsZXNoZWV0IExhbmd1YWdlIChYU0wpIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RXh0ZW5zaWJsZSAgU3R5bGVzaGVldCAgTGFuZ3VhZ2UgIChYU0wpICBWZXJzaW9uJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0xMC0xNSAtIDxhIHRpdGxlPSJFeHRlbnNpYmxlIFN0eWxlc2hlZXQgTGFuZ3VhZ2UgKFhTTCkgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hzbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNoYXJvbiBBZGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFuZGVycyBCZXJnbHVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkplZmZyZXkgQ2FydXNvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RlcGhlbiBEZWFjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvbnkgR3JhaGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGF1bCBHcm9zc28KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FZHVhcmRvIEd1dGVudGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QWxleCBNacWCb3dza2kKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBQYXJuZWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmVyZW15IFJpY2htYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBaaWxsZXMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgc2NoZW1hOiBmb3JtYWwgZGVzY3JpcHRpb24iIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvV0QteG1sc2NoZW1hLWZvcm1hbC0yMDAxMDkyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIFNjaGVtYTogRm9ybWFsIERlc2NyaXB0aW9uIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFNjaGVtYTogRm9ybWFsIERlc2NyaXB0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgU2NoZW1hIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0wOS0yNSAtIDxhIHRpdGxlPSJYTUwgU2NoZW1hOiBGb3JtYWwgRGVzY3JpcHRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbHNjaGVtYS1mb3JtYWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BbGxlbiBCcm93bgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hdHRoZXcgRnVjaHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb25hdGhhbiBSb2JpZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWxpcCBXYWRsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ1cmlzLCB1cmxzLCBhbmQgdXJuczogY2xhcmlmaWNhdGlvbnMgYW5kIHJlY29tbWVuZGF0aW9ucyAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL05PVEUtdXJpLWNsYXJpZmljYXRpb24tMjAwMTA5MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFVSSXMsIFVSTHMsIGFuZCBVUk5zOiBDbGFyaWZpY2F0aW9ucyBhbmQgUmVjb21tZW5kYXRpb25zIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlVSSXMsICBVUkxzLCAgYW5kICBVUk5zOiAgQ2xhcmlmaWNhdGlvbnMgIGFuZCAgUmVjb21tZW5kYXRpb25zJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VUkkgQ29vcmRpbmF0aW9uIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDEtMDktMjEgLSA8YSB0aXRsZT0iVVJJcywgVVJMcywgYW5kIFVSTnM6IENsYXJpZmljYXRpb25zIGFuZCBSZWNvbW1lbmRhdGlvbnMgMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS91cmktY2xhcmlmaWNhdGlvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGJsdWViZXJyeSByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvV0QteG1sLWJsdWViZXJyeS1yZXEtMjAwMTA5MjEiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEJsdWViZXJyeSBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgQmx1ZWJlcnJ5IFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIENvcmUgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAxLTA5LTIxIC0gPGEgdGl0bGU9IlhNTCBCbHVlYmVycnkgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtYmx1ZWJlcnJ5LXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaG4gQ293YW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic21pbCBhbmltYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JFQy1zbWlsLWFuaW1hdGlvbi0yMDAxMDkwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU01JTCBBbmltYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TTUlMIEFuaW1hdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TWU1NIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0wOS0wNCAtIDxhIHRpdGxlPSJTTUlMIEFuaW1hdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc21pbC1hbmltYXRpb24iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXRyaWNrIFNjaG1pdHoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5BYXJvbiBDb2hlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhzbCB0cmFuc2Zvcm1hdGlvbnMgKHhzbHQpIHZlcnNpb24gMS4xIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL1dELXhzbHQxMS0yMDAxMDgyNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFNMIFRyYW5zZm9ybWF0aW9ucyAoWFNMVCkgVmVyc2lvbiAxLjEgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YU0wgIFRyYW5zZm9ybWF0aW9ucyAgKFhTTFQpICBWZXJzaW9uJm5ic3A7MS4xPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0wOC0yNCAtIDxhIHRpdGxlPSJYU0wgVHJhbnNmb3JtYXRpb25zIChYU0xUKSBWZXJzaW9uIDEuMSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsdDExIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQ2xhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzdmcgbW9iaWxlIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL1dELVNWR01vYmlsZVJlcXMtMjAwMTA4MDMiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU1ZHIE1vYmlsZSBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TVkcgTW9iaWxlIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0wOC0wMyAtIDxhIHRpdGxlPSJTVkcgTW9iaWxlIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvU1ZHTW9iaWxlUmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJpY2sgR3JhaGFtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VG9sZ2EgQ2FwaW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJncmFwaGljcyI+R3JhcGhpY3MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBsaW5raW5nIGxhbmd1YWdlICh4bGluaykgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0idXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXhsaW5rLTIwMDEwNjI3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgTGlua2luZyBMYW5ndWFnZSAoWExpbmspIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MICBMaW5raW5nICBMYW5ndWFnZSAgKFhMaW5rKSAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIExpbmtpbmcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAxLTA2LTI3IC0gPGEgdGl0bGU9IlhNTCBMaW5raW5nIExhbmd1YWdlIChYTGluaykgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hsaW5rIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmVuIERlUm9zZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkV2ZSBNYWxlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIE9yY2hhcmQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGxpbmtpbmcgYW5kIHN0eWxlIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMS9OT1RFLXhtbC1saW5rLXN0eWxlLTIwMDEwNjA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgTGlua2luZyBhbmQgU3R5bGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgTGlua2luZyBhbmQgU3R5bGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBMaW5raW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0wNi0wNSAtIDxhIHRpdGxlPSJYTUwgTGlua2luZyBhbmQgU3R5bGUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1saW5rLXN0eWxlIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm9ybWFuIFdhbHNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InJ1YnkgYW5ub3RhdGlvbiIgZGF0YS10YWc9Imh0bWwgaTE4biIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvUkVDLXJ1YnktMjAwMTA1MzEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFJ1YnkgQW5ub3RhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlJ1YnkgQW5ub3RhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+SW50ZXJuYXRpb25hbGl6YXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAxLTA1LTMxIC0gPGEgdGl0bGU9IlJ1YnkgQW5ub3RhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcnVieSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmNpbiBTYXdpY2tpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljaGVsIFN1aWduYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzYXlhc3UgSXNoaWthd2EKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJ0aW4gRMO8cnN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGV4IFRleGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpMThuIj5pMThuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNhbGwgY29udHJvbCByZXF1aXJlbWVudHMgaW4gYSB2b2ljZSBicm93c2VyIGZyYW1ld29yayIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL1dELWNhbGwtY29udHJvbC1yZXFzLTIwMDEwNDEzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDYWxsIENvbnRyb2wgUmVxdWlyZW1lbnRzIGluIGEgVm9pY2UgQnJvd3NlciBGcmFtZXdvcmsgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DYWxsIENvbnRyb2wgUmVxdWlyZW1lbnRzIGluIGEgVm9pY2UgQnJvd3NlciBGcmFtZXdvcms8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAxLTA0LTEzIC0gPGEgdGl0bGU9IkNhbGwgQ29udHJvbCBSZXF1aXJlbWVudHMgaW4gYSBWb2ljZSBCcm93c2VyIEZyYW1ld29yayBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2FsbC1jb250cm9sLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CcmFuZG9uIFBvcnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iYW4gcmRmIHNjaGVtYSBmb3IgdGhlIHhtbCBpbmZvcm1hdGlvbiBzZXQiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCB1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL05PVEUteG1sLWluZm9zZXQtcmRmcy0yMDAxMDQwNiIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBbiBSREYgU2NoZW1hIGZvciB0aGUgWE1MIEluZm9ybWF0aW9uIFNldCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkFuIFJERiBTY2hlbWEgZm9yIHRoZSBYTUwgSW5mb3JtYXRpb24gU2V0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDEtMDQtMDYgLSA8YSB0aXRsZT0iQW4gUkRGIFNjaGVtYSBmb3IgdGhlIFhNTCBJbmZvcm1hdGlvbiBTZXQgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1pbmZvc2V0LXJkZnMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5SaWNoYXJkIFRvYmluCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Inhmb3JtcyByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJ3ZCIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5XRDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IldvcmtpbmdEcmFmdCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvV0QteGh0bWwtZm9ybXMtcmVxLTIwMDEwNDA0IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhGb3JtcyBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YRm9ybXMgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Gb3JtcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDEtMDQtMDQgLSA8YSB0aXRsZT0iWEZvcm1zIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveGh0bWwtZm9ybXMtcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWljYWggRHViaW5rbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlNlYmFzdGlhbiBTY2huaXR6ZW5iYXVtZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYXZlIFJhZ2dldHQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNhbm9uaWNhbCB4bWwgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL1JFQy14bWwtYzE0bi0yMDAxMDMxNSIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDYW5vbmljYWwgWE1MIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q2Fub25pY2FsICBYTUwgIFZlcnNpb24mbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTZWN1cml0eSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDEtMDMtMTUgLSA8YSB0aXRsZT0iQ2Fub25pY2FsIFhNTCBWZXJzaW9uIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLWMxNG4iPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2huIEJveWVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieHNsdCByZXF1aXJlbWVudHMgdmVyc2lvbiAyLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvV0QteHNsdDIwcmVxLTIwMDEwMjE0IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhTTFQgUmVxdWlyZW1lbnRzIFZlcnNpb24gMi4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFNMVCAgUmVxdWlyZW1lbnRzICBWZXJzaW9uJm5ic3A7Mi4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YU0xUIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0wMi0xNCAtIDxhIHRpdGxlPSJYU0xUIFJlcXVpcmVtZW50cyBWZXJzaW9uIDIuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveHNsdDIwcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmUgTXVlbmNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBTY2FyZGluYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBmcmFnbWVudCBpbnRlcmNoYW5nZSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMS9DUi14bWwtZnJhZ21lbnQtMjAwMTAyMTIiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEZyYWdtZW50IEludGVyY2hhbmdlIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIEZyYWdtZW50IEludGVyY2hhbmdlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDEtMDItMTIgLSA8YSB0aXRsZT0iWE1MIEZyYWdtZW50IEludGVyY2hhbmdlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtZnJhZ21lbnQiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXVsIEdyb3NzbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbmllbCBWZWlsbGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImEgcDNwIGFzc3VyYW5jZSBzaWduYXR1cmUgcHJvZmlsZSIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDEvTk9URS14bWxkc2lnLXAzcC1wcm9maWxlLTIwMDEwMjAyLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBIFAzUCBBc3N1cmFuY2UgU2lnbmF0dXJlIFByb2ZpbGUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BIFAzUCBBc3N1cmFuY2UgU2lnbmF0dXJlIFByb2ZpbGU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAxLTAyLTAyIC0gPGEgdGl0bGU9IkEgUDNQIEFzc3VyYW5jZSBTaWduYXR1cmUgUHJvZmlsZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sZHNpZy1wM3AtcHJvZmlsZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBSZWFnbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3RvY2hhc3RpYyBsYW5ndWFnZSBtb2RlbHMgKG4tZ3JhbSkgc3BlY2lmaWNhdGlvbiIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAxL1dELW5ncmFtLXNwZWMtMjAwMTAxMDMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFN0b2NoYXN0aWMgTGFuZ3VhZ2UgTW9kZWxzIChOLUdyYW0pIFNwZWNpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TdG9jaGFzdGljIExhbmd1YWdlIE1vZGVscyAoTi1HcmFtKSBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMS0wMS0wMyAtIDxhIHRpdGxlPSJTdG9jaGFzdGljIExhbmd1YWdlIE1vZGVscyAoTi1HcmFtKSBTcGVjaWZpY2F0aW9uIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9uZ3JhbS1zcGVjIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmVhcyBLZWxsbmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBSYWdnZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InZvaWNlIGJyb3dzZXJzLCBpbnRyb2R1Y3Rpb24iIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMC9XRC12b2ljZS1pbnRyby0yMDAwMTIwNC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVm9pY2UgQnJvd3NlcnMsIEludHJvZHVjdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlZvaWNlIEJyb3dzZXJzLCBJbnRyb2R1Y3Rpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTEyLTA0IC0gPGEgdGl0bGU9IlZvaWNlIEJyb3dzZXJzLCBJbnRyb2R1Y3Rpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvaWNlLWludHJvIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIExhcnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJuYXR1cmFsIGxhbmd1YWdlIHNlbWFudGljcyBtYXJrdXAgbGFuZ3VhZ2UgZm9yIHRoZSBzcGVlY2ggaW50ZXJmYWNlIGZyYW1ld29yayIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL1dELW5sLXNwZWMtMjAwMDExMjAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE5hdHVyYWwgTGFuZ3VhZ2UgU2VtYW50aWNzIE1hcmt1cCBMYW5ndWFnZSBmb3IgdGhlIFNwZWVjaCBJbnRlcmZhY2UgRnJhbWV3b3JrIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TmF0dXJhbCBMYW5ndWFnZSBTZW1hbnRpY3MgTWFya3VwIExhbmd1YWdlIGZvciB0aGUgU3BlZWNoIEludGVyZmFjZSBGcmFtZXdvcms8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTExLTIwIC0gPGEgdGl0bGU9Ik5hdHVyYWwgTGFuZ3VhZ2UgU2VtYW50aWNzIE1hcmt1cCBMYW5ndWFnZSBmb3IgdGhlIFNwZWVjaCBJbnRlcmZhY2UgRnJhbWV3b3JrIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9ubC1zcGVjIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGVib3JhaCBEYWhsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0bWwgd29ya2luZyBncm91cCByb2FkbWFwIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMC9OT1RFLXhodG1sLXJvYWRtYXAtMjAwMDExMDgvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgV29ya2luZyBHcm91cCBSb2FkbWFwIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTCBXb3JraW5nIEdyb3VwIFJvYWRtYXA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhIVE1MMiBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDAtMTEtMDggLSA8YSB0aXRsZT0iSFRNTCBXb3JraW5nIEdyb3VwIFJvYWRtYXAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hodG1sLXJvYWRtYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZW4gUGVtYmVydG9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGF2ZSBSYWdnZXR0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFzYXlhc3UgSXNoaWthd2EKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRlY2huaXF1ZXMgZm9yIHdlYiBjb250ZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJ1cGNvbWluZyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL05PVEUtV0NBRzEwLVRFQ0hTLTIwMDAxMTA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUZWNobmlxdWVzIGZvciBXZWIgQ29udGVudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGVjaG5pcXVlcyAgZm9yICBXZWIgIENvbnRlbnQgIEFjY2Vzc2liaWxpdHkgIEd1aWRlbGluZXMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDAtMTEtMDYgLSA8YSB0aXRsZT0iVGVjaG5pcXVlcyBmb3IgV2ViIENvbnRlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0NBRzEwLVRFQ0hTIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2VuZHkgQ2hpc2hvbG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBWYW5kZXJoZWlkZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSmFjb2JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb3JlIHRlY2huaXF1ZXMgZm9yIHdlYiBjb250ZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMC9OT1RFLVdDQUcxMC1DT1JFLVRFQ0hTLTIwMDAxMTA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDb3JlIFRlY2huaXF1ZXMgZm9yIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db3JlICBUZWNobmlxdWVzICBmb3IgIFdlYiAgQ29udGVudCAgQWNjZXNzaWJpbGl0eSAgR3VpZGVsaW5lcyZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+QWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMC0xMS0wNiAtIDxhIHRpdGxlPSJDb3JlIFRlY2huaXF1ZXMgZm9yIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dDQUcxMC1DT1JFLVRFQ0hTIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2VuZHkgQ2hpc2hvbG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBWYW5kZXJoZWlkZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSmFjb2JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHRlY2huaXF1ZXMgZm9yIHdlYiBjb250ZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGNzcyIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDAvTk9URS1XQ0FHMTAtQ1NTLVRFQ0hTLTIwMDAxMTA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBDU1MgVGVjaG5pcXVlcyBmb3IgV2ViIENvbnRlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNTUyAgVGVjaG5pcXVlcyAgZm9yICBXZWIgIENvbnRlbnQgIEFjY2Vzc2liaWxpdHkgIEd1aWRlbGluZXMmbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDAtMTEtMDYgLSA8YSB0aXRsZT0iQ1NTIFRlY2huaXF1ZXMgZm9yIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dDQUcxMC1DU1MtVEVDSFMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XZW5keSBDaGlzaG9sbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWdnIFZhbmRlcmhlaWRlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBKYWNvYnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIHRlY2huaXF1ZXMgZm9yIHdlYiBjb250ZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IGh0bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL05PVEUtV0NBRzEwLUhUTUwtVEVDSFMtMjAwMDExMDYvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUTUwgVGVjaG5pcXVlcyBmb3IgV2ViIENvbnRlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUTUwgIFRlY2huaXF1ZXMgIGZvciAgV2ViICBDb250ZW50ICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTExLTA2IC0gPGEgdGl0bGU9IkhUTUwgVGVjaG5pcXVlcyBmb3IgV2ViIENvbnRlbnQgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0NBRzEwLUhUTUwtVEVDSFMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XZW5keSBDaGlzaG9sbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkdyZWdnIFZhbmRlcmhlaWRlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPklhbiBKYWNvYnMKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhY2Nlc3NpYmlsaXR5Ij5BY2Nlc3NpYmlsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0bWwiPkhUTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImhhcnZlc3RpbmcgcmRmIHN0YXRlbWVudHMgZnJvbSB4bGlua3MiIGRhdGEtdGFnPSJkYXRhIHhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDAvTk9URS14bGluazJyZGYtMjAwMDA5MjkvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhhcnZlc3RpbmcgUkRGIFN0YXRlbWVudHMgZnJvbSBYTGlua3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5IYXJ2ZXN0aW5nIFJERiBTdGF0ZW1lbnRzIGZyb20gWExpbmtzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMC0wOS0yOSAtIDxhIHRpdGxlPSJIYXJ2ZXN0aW5nIFJERiBTdGF0ZW1lbnRzIGZyb20gWExpbmtzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bGluazJyZGYiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Sb24gRGFuaWVsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhzbCB0cmFuc2Zvcm1hdGlvbnMgcmVxdWlyZW1lbnRzIHZlcnNpb24gMS4xIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL1dELXhzbHQxMXJlcS0yMDAwMDgyNSIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYU0wgVHJhbnNmb3JtYXRpb25zIFJlcXVpcmVtZW50cyBWZXJzaW9uIDEuMSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhTTCAgVHJhbnNmb3JtYXRpb25zICBSZXF1aXJlbWVudHMgIFZlcnNpb24mbmJzcDsxLjE8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTA4LTI1IC0gPGEgdGl0bGU9IlhTTCBUcmFuc2Zvcm1hdGlvbnMgUmVxdWlyZW1lbnRzIFZlcnNpb24gMS4xIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94c2x0MTFyZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZSBNdWVuY2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb21wb3NpdGUgY2FwYWJpbGl0aWVzL3ByZWZlcmVuY2UgcHJvZmlsZXM6IHJlcXVpcmVtZW50cyBhbmQgYXJjaGl0ZWN0dXJlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL1dELUNDUFAtcmEtMjAwMDA3MjEvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbXBvc2l0ZSBDYXBhYmlsaXRpZXMvUHJlZmVyZW5jZSBQcm9maWxlczogUmVxdWlyZW1lbnRzIGFuZCBBcmNoaXRlY3R1cmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db21wb3NpdGUgQ2FwYWJpbGl0aWVzL1ByZWZlcmVuY2UgUHJvZmlsZXM6IFJlcXVpcmVtZW50cyBhbmQgQXJjaGl0ZWN0dXJlPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DQy9QUCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDAtMDctMjEgLSA8YSB0aXRsZT0iQ29tcG9zaXRlIENhcGFiaWxpdGllcy9QcmVmZXJlbmNlIFByb2ZpbGVzOiBSZXF1aXJlbWVudHMgYW5kIEFyY2hpdGVjdHVyZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvQ0NQUC1yYSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2FlbCBOaWxzc29uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9oYW4gSGplbG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IaWRldGFrYSBPaHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImNvbXBvc2l0ZSBjYXBhYmlsaXRpZXMvcHJlZmVyZW5jZSBwcm9maWxlczogdGVybWlub2xvZ3kgYW5kIGFiYnJldmlhdGlvbnMiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDAvV0QtQ0NQUC10YS0yMDAwMDcyMS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29tcG9zaXRlIENhcGFiaWxpdGllcy9QcmVmZXJlbmNlIFByb2ZpbGVzOiBUZXJtaW5vbG9neSBhbmQgQWJicmV2aWF0aW9ucyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkNvbXBvc2l0ZSBDYXBhYmlsaXRpZXMvUHJlZmVyZW5jZSBQcm9maWxlczogVGVybWlub2xvZ3kgYW5kIEFiYnJldmlhdGlvbnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNDL1BQIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMC0wNy0yMSAtIDxhIHRpdGxlPSJDb21wb3NpdGUgQ2FwYWJpbGl0aWVzL1ByZWZlcmVuY2UgUHJvZmlsZXM6IFRlcm1pbm9sb2d5IGFuZCBBYmJyZXZpYXRpb25zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9DQ1BQLXRhIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWlrYWVsIE5pbHNzb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibXVsdGltb2RhbCByZXF1aXJlbWVudHMgZm9yIHZvaWNlIG1hcmt1cCBsYW5ndWFnZXMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMC9XRC1tdWx0aW1vZGFsLXJlcXMtMjAwMDA3MTAiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTXVsdGltb2RhbCBSZXF1aXJlbWVudHMgZm9yIFZvaWNlIE1hcmt1cCBMYW5ndWFnZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5NdWx0aW1vZGFsIFJlcXVpcmVtZW50cyBmb3IgVm9pY2UgTWFya3VwIExhbmd1YWdlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Vm9pY2UgQnJvd3NlciBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDAtMDctMTAgLSA8YSB0aXRsZT0iTXVsdGltb2RhbCBSZXF1aXJlbWVudHMgZm9yIFZvaWNlIE1hcmt1cCBMYW5ndWFnZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L211bHRpbW9kYWwtcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcmlhbm5lIEhpY2tleQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJyZXVzYWJsZSBkaWFsb2cgcmVxdWlyZW1lbnRzIGZvciB2b2ljZSBtYXJrdXAgbGFuZ3VhZ2UiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMC9XRC1yZXVzYWJsZS1kaWFsb2ctcmVxcy0yMDAwMDQyNiIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBSZXVzYWJsZSBEaWFsb2cgUmVxdWlyZW1lbnRzIGZvciBWb2ljZSBNYXJrdXAgTGFuZ3VhZ2UgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5SZXVzYWJsZSBEaWFsb2cgUmVxdWlyZW1lbnRzIGZvciBWb2ljZSBNYXJrdXAgTGFuZ3VhZ2U8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTA0LTI2IC0gPGEgdGl0bGU9IlJldXNhYmxlIERpYWxvZyBSZXF1aXJlbWVudHMgZm9yIFZvaWNlIE1hcmt1cCBMYW5ndWFnZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmV1c2FibGUtZGlhbG9nLXJlcXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5EYW5pZWwgQnVybmV0dAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ0ZWNobmlxdWVzIGZvciBhY2Nlc3NpYmlsaXR5IGV2YWx1YXRpb24gYW5kIHJlcGFpciB0b29scyIgZGF0YS10YWc9ImFjY2Vzc2liaWxpdHkiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDAvV0QtQUVSVC0yMDAwMDQyNiIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUZWNobmlxdWVzIEZvciBBY2Nlc3NpYmlsaXR5IEV2YWx1YXRpb24gQW5kIFJlcGFpciBUb29scyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRlY2huaXF1ZXMgRm9yIEFjY2Vzc2liaWxpdHkgRXZhbHVhdGlvbiBBbmQgUmVwYWlyIFRvb2xzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5FdmFsdWF0aW9uIGFuZCBSZXBhaXIgVG9vbHMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTA0LTI2IC0gPGEgdGl0bGU9IlRlY2huaXF1ZXMgRm9yIEFjY2Vzc2liaWxpdHkgRXZhbHVhdGlvbiBBbmQgUmVwYWlyIFRvb2xzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9BRVJUIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgUmlkcGF0aAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldlbmR5IENoaXNob2xtCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzeW5jaHJvbml6ZWQgbXVsdGltZWRpYSBpbnRlZ3JhdGlvbiBsYW5ndWFnZSBkb2N1bWVudCBvYmplY3QgbW9kZWwiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDAvV0Qtc21pbC1ib3N0b24tZG9tLTIwMDAwMjI1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTeW5jaHJvbml6ZWQgTXVsdGltZWRpYSBJbnRlZ3JhdGlvbiBMYW5ndWFnZSBEb2N1bWVudCBPYmplY3QgTW9kZWwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TeW5jaHJvbml6ZWQgTXVsdGltZWRpYSBJbnRlZ3JhdGlvbiBMYW5ndWFnZSBEb2N1bWVudCBPYmplY3QgTW9kZWw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNZTU0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTAyLTI1IC0gPGEgdGl0bGU9IlN5bmNocm9uaXplZCBNdWx0aW1lZGlhIEludGVncmF0aW9uIExhbmd1YWdlIERvY3VtZW50IE9iamVjdCBNb2RlbCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc21pbC1ib3N0b24tZG9tIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbGlwcGUgTGUgSMOpZ2FyZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QYXRyaWNrIFNjaG1pdHoKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImF1dGhvcmluZyB0b29sIGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMjAwMC9SRUMtQVRBRzEwLTIwMDAwMjAzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBdXRob3JpbmcgVG9vbCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QXV0aG9yaW5nICBUb29sICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BdXRob3JpbmcgVG9vbCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4yMDAwLTAyLTAzIC0gPGEgdGl0bGU9IkF1dGhvcmluZyBUb29sIEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0FUQUcxMCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkp1dHRhIFRyZXZpcmFudXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaGFybGVzIE1jQ2F0aGllTmV2aWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SWFuIEphY29icwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbiBSaWNoYXJkcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImFjY2Vzc2liaWxpdHkiPkFjY2Vzc2liaWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idzNjIGFuZCBlbGVjdHJvbmljIGNvbW1lcmNlIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL05PVEUtRUMtcmVsYXRlZC1hY3Rpdml0aWVzLTIwMDAwMTA3IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFczQyBhbmQgRWxlY3Ryb25pYyBDb21tZXJjZSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlczQyBhbmQgRWxlY3Ryb25pYyBDb21tZXJjZTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjIwMDAtMDEtMDcgLSA8YSB0aXRsZT0iVzNDIGFuZCBFbGVjdHJvbmljIENvbW1lcmNlIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9FQy1yZWxhdGVkLWFjdGl2aXRpZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGllcnJ5IE1pY2hlbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJidWlsZGluZyB4aHRtbOKEoiBtb2R1bGVzIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL1dELXhodG1sLWJ1aWxkaW5nLTIwMDAwMTA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBCdWlsZGluZyBYSFRNTOKEoiBNb2R1bGVzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+QnVpbGRpbmcgWEhUTUzihKIgTW9kdWxlczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WEhUTUwyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MjAwMC0wMS0wNSAtIDxhIHRpdGxlPSJCdWlsZGluZyBYSFRNTOKEoiBNb2R1bGVzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbC1idWlsZGluZyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk11cnJheSBBbHRoZWltCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hhbmUgTWNDYXJyb24KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ibW9kZWwgYXJjaGl0ZWN0dXJlIGZvciB2b2ljZSBicm93c2VyIHN5c3RlbXMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9XRC12b2ljZS1hcmNoaXRlY3R1cmUtMTk5OTEyMjMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE1vZGVsIEFyY2hpdGVjdHVyZSBmb3IgVm9pY2UgQnJvd3NlciBTeXN0ZW1zIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+TW9kZWwgQXJjaGl0ZWN0dXJlIGZvciBWb2ljZSBCcm93c2VyIFN5c3RlbXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTEyLTIzIC0gPGEgdGl0bGU9Ik1vZGVsIEFyY2hpdGVjdHVyZSBmb3IgVm9pY2UgQnJvd3NlciBTeXN0ZW1zIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2ljZS1hcmNoaXRlY3R1cmUiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRpYWxvZyByZXF1aXJlbWVudHMgZm9yIHZvaWNlIG1hcmt1cCBsYW5ndWFnZXMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9XRC12b2ljZS1kaWFsb2ctcmVxcy0xOTk5MTIyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgRGlhbG9nIFJlcXVpcmVtZW50cyBmb3IgVm9pY2UgTWFya3VwIExhbmd1YWdlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkRpYWxvZyBSZXF1aXJlbWVudHMgZm9yIFZvaWNlIE1hcmt1cCBMYW5ndWFnZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlZvaWNlIEJyb3dzZXIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTEyLTIzIC0gPGEgdGl0bGU9IkRpYWxvZyBSZXF1aXJlbWVudHMgZm9yIFZvaWNlIE1hcmt1cCBMYW5ndWFnZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvaWNlLWRpYWxvZy1yZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2NvdHQgTWNHbGFzaGFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibWVkaWEiPk1lZGlhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImdyYW1tYXIgcmVwcmVzZW50YXRpb24gcmVxdWlyZW1lbnRzIGZvciB2b2ljZSBtYXJrdXAgbGFuZ3VhZ2VzIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvV0Qtdm9pY2UtZ3JhbW1hci1yZXFzLTE5OTkxMjIzLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBHcmFtbWFyIFJlcHJlc2VudGF0aW9uIFJlcXVpcmVtZW50cyBmb3IgVm9pY2UgTWFya3VwIExhbmd1YWdlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkdyYW1tYXIgUmVwcmVzZW50YXRpb24gUmVxdWlyZW1lbnRzIGZvciBWb2ljZSBNYXJrdXAgTGFuZ3VhZ2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0xMi0yMyAtIDxhIHRpdGxlPSJHcmFtbWFyIFJlcHJlc2VudGF0aW9uIFJlcXVpcmVtZW50cyBmb3IgVm9pY2UgTWFya3VwIExhbmd1YWdlcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvdm9pY2UtZ3JhbW1hci1yZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJuYXR1cmFsIGxhbmd1YWdlIHByb2Nlc3NpbmcgcmVxdWlyZW1lbnRzIGZvciB2b2ljZSBtYXJrdXAgbGFuZ3VhZ2VzIiBkYXRhLXRhZz0ibWVkaWEiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvV0Qtdm9pY2Utbmx1LXJlcXMtMTk5OTEyMjMvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIE5hdHVyYWwgTGFuZ3VhZ2UgUHJvY2Vzc2luZyBSZXF1aXJlbWVudHMgZm9yIFZvaWNlIE1hcmt1cCBMYW5ndWFnZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5OYXR1cmFsIExhbmd1YWdlIFByb2Nlc3NpbmcgUmVxdWlyZW1lbnRzIGZvciBWb2ljZSBNYXJrdXAgTGFuZ3VhZ2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0xMi0yMyAtIDxhIHRpdGxlPSJOYXR1cmFsIExhbmd1YWdlIFByb2Nlc3NpbmcgUmVxdWlyZW1lbnRzIGZvciBWb2ljZSBNYXJrdXAgTGFuZ3VhZ2VzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2ljZS1ubHUtcmVxcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRlYm9yYWggRGFobAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzcGVlY2ggc3ludGhlc2lzIG1hcmt1cCByZXF1aXJlbWVudHMgZm9yIHZvaWNlIG1hcmt1cCBsYW5ndWFnZXMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9XRC12b2ljZS10dHMtcmVxcy0xOTk5MTIyMy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU3BlZWNoIFN5bnRoZXNpcyBNYXJrdXAgUmVxdWlyZW1lbnRzIGZvciBWb2ljZSBNYXJrdXAgTGFuZ3VhZ2VzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U3BlZWNoIFN5bnRoZXNpcyBNYXJrdXAgUmVxdWlyZW1lbnRzIGZvciBWb2ljZSBNYXJrdXAgTGFuZ3VhZ2VzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5Wb2ljZSBCcm93c2VyIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0xMi0yMyAtIDxhIHRpdGxlPSJTcGVlY2ggU3ludGhlc2lzIE1hcmt1cCBSZXF1aXJlbWVudHMgZm9yIFZvaWNlIE1hcmt1cCBMYW5ndWFnZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3ZvaWNlLXR0cy1yZXFzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+QW5kcmV3IEh1bnQKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIHBhdGggbGFuZ3VhZ2UgKHhwYXRoKSB2ZXJzaW9uIDEuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJlYyIgZGF0YS12ZXJzaW9uPSIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5SRUM8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZWNvbW1lbmRhdGlvbiI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvUkVDLXhwYXRoLTE5OTkxMTE2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgUGF0aCBMYW5ndWFnZSAoWFBhdGgpIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MICBQYXRoICBMYW5ndWFnZSAgKFhQYXRoKSAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIExpbmtpbmcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTExLTE2IC0gPGEgdGl0bGU9IlhNTCBQYXRoIExhbmd1YWdlIChYUGF0aCkgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hwYXRoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQ2xhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZW4gRGVSb3NlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhzbCB0cmFuc2Zvcm1hdGlvbnMgKHhzbHQpIHZlcnNpb24gMS4wIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9SRUMteHNsdC0xOTk5MTExNiIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYU0wgVHJhbnNmb3JtYXRpb25zIChYU0xUKSBWZXJzaW9uIDEuMCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhTTCAgVHJhbnNmb3JtYXRpb25zICAoWFNMVCkgIFZlcnNpb24mbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhTTFQgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTExLTE2IC0gPGEgdGl0bGU9IlhTTCBUcmFuc2Zvcm1hdGlvbnMgKFhTTFQpIFZlcnNpb24gMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94c2x0Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmFtZXMgQ2xhcmsKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idHYgYnJvYWRjYXN0IHVyaSBzY2hlbWVzIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9Im1lZGlhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QgdXBjb21pbmciPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9OT1RFLVRWV2ViLVVSSS1SZXF1aXJlbWVudHMtMTk5OTEwMjEiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVFYgQnJvYWRjYXN0IFVSSSBTY2hlbWVzIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlRWIEJyb2FkY2FzdCBVUkkgU2NoZW1lcyBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTEwLTIxIC0gPGEgdGl0bGU9IlRWIEJyb2FkY2FzdCBVUkkgU2NoZW1lcyBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1RWV2ViLVVSSS1SZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5XYXJuZXIgdGVuIEthdGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJtZWRpYSI+TWVkaWEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sLXNpZ25hdHVyZSByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvV0QteG1sZHNpZy1yZXF1aXJlbWVudHMtMTk5OTEwMTQiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MLVNpZ25hdHVyZSBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwtU2lnbmF0dXJlIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIFNlY3VyaXR5IFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0xMC0xNCAtIDxhIHRpdGxlPSJYTUwtU2lnbmF0dXJlIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sZHNpZy1yZXF1aXJlbWVudHMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBjYW1icmlkZ2UgY29tbXVuaXF1w6kiIGRhdGEtdGFnPSJkYXRhIHhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0IHVwY29taW5nIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvTk9URS1zY2hlbWEtYXJjaC0xOTk5MTAwNyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBUaGUgQ2FtYnJpZGdlIENvbW11bmlxdcOpIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VGhlIENhbWJyaWRnZSBDb21tdW5pcXXDqTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMTAtMDcgLSA8YSB0aXRsZT0iVGhlIENhbWJyaWRnZSBDb21tdW5pcXXDqSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3Rvcnkvc2NoZW1hLWFyY2giPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5IZW5yeSBUaG9tcHNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEiPkRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieGh0bWzihKIgZG9jdW1lbnQgcHJvZmlsZSByZXF1aXJlbWVudHMiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk5L1dELXhodG1sLXByb2YtcmVxLTE5OTkwOTA2LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYSFRNTOKEoiBEb2N1bWVudCBQcm9maWxlIFJlcXVpcmVtZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhIVE1M4oSiIERvY3VtZW50IFByb2ZpbGUgUmVxdWlyZW1lbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YSFRNTDIgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTA5LTA2IC0gPGEgdGl0bGU9IlhIVE1M4oSiIERvY3VtZW50IFByb2ZpbGUgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aHRtbC1wcm9mLXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmFnZ2V0dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBldGVyIFN0YXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+VGVkIFd1Z29mc2tpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJwb3NpdGlvbmluZyBodG1sIGVsZW1lbnRzIHdpdGggY2FzY2FkaW5nIHN0eWxlIHNoZWV0cyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9XRC1wb3NpdGlvbmluZy0xOTk5MDkwMiIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQb3NpdGlvbmluZyBIVE1MIEVsZW1lbnRzIHdpdGggQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlBvc2l0aW9uaW5nIEhUTUwgRWxlbWVudHMgd2l0aCBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5DYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0wOS0wMiAtIDxhIHRpdGxlPSJQb3NpdGlvbmluZyBIVE1MIEVsZW1lbnRzIHdpdGggQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0QtcG9zaXRpb25pbmciPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBGdXJtYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TY290dCBJc2FhY3NvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvYmVydCBTdGV2YWhuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY3NzIHByaW50aW5nIGV4dGVuc2lvbnMiIGRhdGEtdGFnPSJjc3MiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvV0QtcHJpbnQtMTk5OTA5MDIiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ1NTIFByaW50aW5nIEV4dGVuc2lvbnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5DU1MgUHJpbnRpbmcgRXh0ZW5zaW9uczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMDktMDIgLSA8YSB0aXRsZT0iQ1NTIFByaW50aW5nIEV4dGVuc2lvbnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELXByaW50Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9iZXJ0IFN0ZXZhaG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Iw6Vrb24gV2l1bSBMaWUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJjc3MiPkNTUwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhdXJhbCBjYXNjYWRpbmcgc3R5bGUgc2hlZXRzIChhY3NzKSBzcGVjaWZpY2F0aW9uIiBkYXRhLXRhZz0iY3NzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk5L1dELWFjc3MtMTk5OTA5MDIiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQXVyYWwgQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQUNTUykgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkF1cmFsIENhc2NhZGluZyBTdHlsZSBTaGVldHMgKEFDU1MpIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPkNhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTA5LTAyIC0gPGEgdGl0bGU9IkF1cmFsIENhc2NhZGluZyBTdHlsZSBTaGVldHMgKEFDU1MpIFNwZWNpZmljYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELWFjc3MiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5DaHJpcyBMaWxsZXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5ULlYuIFJhbWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iY3NzIj5DU1MKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iY29tbW9uIG1hcmt1cCBmb3IgbWljcm9wYXltZW50IHBlci1mZWUtbGlua3MiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvV0QtTWljcm9wYXltZW50LU1hcmt1cC0xOTk5MDgyNS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29tbW9uIE1hcmt1cCBmb3IgbWljcm9wYXltZW50IHBlci1mZWUtbGlua3MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db21tb24gTWFya3VwIGZvciBtaWNyb3BheW1lbnQgcGVyLWZlZS1saW5rczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMDgtMjUgLSA8YSB0aXRsZT0iQ29tbW9uIE1hcmt1cCBmb3IgbWljcm9wYXltZW50IHBlci1mZWUtbGlua3MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L01pY3JvcGF5bWVudC1NYXJrdXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5UaGllcnJ5IE1pY2hlbAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb21wb3NpdGUgY2FwYWJpbGl0eS9wcmVmZXJlbmNlIHByb2ZpbGVzIChjYy9wcCk6IGEgdXNlciBzaWRlIGZyYW1ld29yayBmb3IgY29udGVudCBuZWdvdGlhdGlvbiIgZGF0YS10YWc9ImRhdGEiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy8xOTk5LzA3L05PVEUtQ0NQUC0xOTk5MDcyNy8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgQ29tcG9zaXRlIENhcGFiaWxpdHkvUHJlZmVyZW5jZSBQcm9maWxlcyAoQ0MvUFApOiBBIHVzZXIgc2lkZSBmcmFtZXdvcmsgZm9yIGNvbnRlbnQgbmVnb3RpYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5Db21wb3NpdGUgQ2FwYWJpbGl0eS9QcmVmZXJlbmNlIFByb2ZpbGVzIChDQy9QUCk6IEEgdXNlciBzaWRlIGZyYW1ld29yayBmb3IgY29udGVudCBuZWdvdGlhdGlvbjwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMDctMjcgLSA8YSB0aXRsZT0iQ29tcG9zaXRlIENhcGFiaWxpdHkvUHJlZmVyZW5jZSBQcm9maWxlcyAoQ0MvUFApOiBBIHVzZXIgc2lkZSBmcmFtZXdvcmsgZm9yIGNvbnRlbnQgbmVnb3RpYXRpb24gcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NDUFAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5GcmFua2xpbiBSZXlub2xkcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaGFuIEhqZWxtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3BlbmNlciBEYXdraW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2FuZGVlcCBTaW5naGFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Im1hdGhlbWF0aWNhbCBtYXJrdXAgbGFuZ3VhZ2UgKG1hdGhtbCkgMS4wMSBzcGVjaWZpY2F0aW9uIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0icmVjIiBkYXRhLXZlcnNpb249IiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPlJFQzwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJlY29tbWVuZGF0aW9uIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvMTk5OS8wNy9SRUMtTWF0aE1MLTE5OTkwNzA3LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBNYXRoZW1hdGljYWwgTWFya3VwIExhbmd1YWdlIChNYXRoTUwpIDEuMDEgU3BlY2lmaWNhdGlvbiBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPk1hdGhlbWF0aWNhbCBNYXJrdXAgTGFuZ3VhZ2UgKE1hdGhNTCkgMS4wMSBTcGVjaWZpY2F0aW9uPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5NYXRoIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0wNy0wNyAtIDxhIHRpdGxlPSJNYXRoZW1hdGljYWwgTWFya3VwIExhbmd1YWdlIChNYXRoTUwpIDEuMDEgU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUkVDLU1hdGhNTCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgRCBGIElvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvYmVydCBSIE1pbmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBjYW5vbmljYWxpemF0aW9uIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvTk9URS14bWwtY2Fub25pY2FsLXJlcS0xOTk5MDYwNSIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgQ2Fub25pY2FsaXphdGlvbiBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgQ2Fub25pY2FsaXphdGlvbiBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTA2LTA1IC0gPGEgdGl0bGU9IlhNTCBDYW5vbmljYWxpemF0aW9uIFJlcXVpcmVtZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveG1sLWNhbm9uaWNhbC1yZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5KYW1lcyBUYXViZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb2VsIE5hdmEKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgY2hhcmFjdGVyaXphdGlvbiB0ZXJtaW5vbG9neSAmYW1wOyBkZWZpbml0aW9ucyBzaGVldCIgZGF0YS10YWc9IiIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvMTk5OS8wNS9XQ0EtdGVybXMvMDEiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIENoYXJhY3Rlcml6YXRpb24gVGVybWlub2xvZ3kgJmFtcDsgRGVmaW5pdGlvbnMgU2hlZXQgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5XZWIgQ2hhcmFjdGVyaXphdGlvbiBUZXJtaW5vbG9neSAmIERlZmluaXRpb25zIFNoZWV0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0wNS0yNCAtIDxhIHRpdGxlPSJXZWIgQ2hhcmFjdGVyaXphdGlvbiBUZXJtaW5vbG9neSAmYW1wOyBEZWZpbml0aW9ucyBTaGVldCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0NBLXRlcm1zIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVucmlrIEZyeXN0eWsgTmllbHNlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9IndlYiBjb250ZW50IGFjY2Vzc2liaWxpdHkgZ3VpZGVsaW5lcyAxLjAiIGRhdGEtdGFnPSJhY2Nlc3NpYmlsaXR5IiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk5L1dBSS1XRUJDT05URU5ULTE5OTkwNTA1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBXZWIgQ29udGVudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+V2ViICBDb250ZW50ICBBY2Nlc3NpYmlsaXR5ICBHdWlkZWxpbmVzJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5BY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTA1LTA1IC0gPGEgdGl0bGU9IldlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dBSS1XRUJDT05URU5UIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+V2VuZHkgQ2hpc2hvbG0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5HcmVnZyBWYW5kZXJoZWlkZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5JYW4gSmFjb2JzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYWNjZXNzaWJpbGl0eSI+QWNjZXNzaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ3ZWIgY2hhcmFjdGVyaXphdGlvbjogZnJvbSB3b3JraW5nIGdyb3VwIHRvIGFjdGl2aXR5IiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9OT1RFLVdDQS0xOTk5MDMxOS8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgV2ViIENoYXJhY3Rlcml6YXRpb246IEZyb20gd29ya2luZyBncm91cCB0byBhY3Rpdml0eSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPldlYiBDaGFyYWN0ZXJpemF0aW9uOiBGcm9tIHdvcmtpbmcgZ3JvdXAgdG8gYWN0aXZpdHk8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTAzLTE5IC0gPGEgdGl0bGU9IldlYiBDaGFyYWN0ZXJpemF0aW9uOiBGcm9tIHdvcmtpbmcgZ3JvdXAgdG8gYWN0aXZpdHkgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dDQSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvaGFuIEhqZWxtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVucmlrIEZyeXN0eWsgTmllbHNlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJodG1sIDQuMCBndWlkZWxpbmVzIGZvciBtb2JpbGUgYWNjZXNzIiBkYXRhLXRhZz0iaHRtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvTk9URS1odG1sNDAtbW9iaWxlLTE5OTkwMzE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBIVE1MIDQuMCBHdWlkZWxpbmVzIGZvciBNb2JpbGUgQWNjZXNzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+SFRNTCA0LjAgR3VpZGVsaW5lcyBmb3IgTW9iaWxlIEFjY2VzczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMDMtMTUgLSA8YSB0aXRsZT0iSFRNTCA0LjAgR3VpZGVsaW5lcyBmb3IgTW9iaWxlIEFjY2VzcyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaHRtbDQwLW1vYmlsZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRvbWloaXNhIEthbWFkYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hc2F5YXN1IElzaGlrYXdhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U2hpbmljaGkgTWF0c3VpCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCB4bGluayByZXF1aXJlbWVudHMgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk5L05PVEUteGxpbmstcmVxLTE5OTkwMjI0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBYTUwgWExpbmsgUmVxdWlyZW1lbnRzIFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MICBYTGluayAgUmVxdWlyZW1lbnRzICBWZXJzaW9uJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgTGlua2luZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMDItMjQgLSA8YSB0aXRsZT0iWE1MIFhMaW5rIFJlcXVpcmVtZW50cyBWZXJzaW9uIDEuMCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkveGxpbmstcmVxIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+U3RldmVuIERlUm9zZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4cG9pbnRlci1pbmZvcm1hdGlvbiBzZXQgbGlhaXNvbiBzdGF0ZW1lbnQgdmVyc2lvbiAxLjAiIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJub3RlIiBkYXRhLXZlcnNpb249ImxhdGVzdCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPk5vdGU8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJHcm91cE5vdGUiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk5L05PVEUteHB0ci1pbmZvc2V0LWxpYWlzb24tMTk5OTAyMjQiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWFBvaW50ZXItSW5mb3JtYXRpb24gU2V0IExpYWlzb24gU3RhdGVtZW50IFZlcnNpb24gMS4wIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WFBvaW50ZXItSW5mb3JtYXRpb24gIFNldCAgTGlhaXNvbiAgU3RhdGVtZW50ICBWZXJzaW9uJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgTGlua2luZyBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMDItMjQgLSA8YSB0aXRsZT0iWFBvaW50ZXItSW5mb3JtYXRpb24gU2V0IExpYWlzb24gU3RhdGVtZW50IFZlcnNpb24gMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cHRyLWluZm9zZXQtbGlhaXNvbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBEZVJvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgeHBvaW50ZXIgcmVxdWlyZW1lbnRzIHZlcnNpb24gMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9OT1RFLXhwdHItcmVxLTE5OTkwMjI0IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBYUG9pbnRlciBSZXF1aXJlbWVudHMgVmVyc2lvbiAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgIFhQb2ludGVyICBSZXF1aXJlbWVudHMgIFZlcnNpb24mbmJzcDsxLjA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBMaW5raW5nIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0wMi0yNCAtIDxhIHRpdGxlPSJYTUwgWFBvaW50ZXIgUmVxdWlyZW1lbnRzIFZlcnNpb24gMS4wIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94cHRyLXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBEZVJvc2UKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic3luY2hyb25pemVkIG11bHRpbWVkaWEgbW9kdWxlcyBiYXNlZCB1cG9uIHNtaWwgMS4wIiBkYXRhLXRhZz0iIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9OT1RFLVNZTU0tbW9kdWxlcy0xOTk5MDIyMyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTeW5jaHJvbml6ZWQgTXVsdGltZWRpYSBNb2R1bGVzIGJhc2VkIHVwb24gU01JTCAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TeW5jaHJvbml6ZWQgIE11bHRpbWVkaWEgIE1vZHVsZXMgIGJhc2VkICB1cG9uICBTTUlMJm5ic3A7MS4wPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5TWU1NIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OS0wMi0yMyAtIDxhIHRpdGxlPSJTeW5jaHJvbml6ZWQgTXVsdGltZWRpYSBNb2R1bGVzIGJhc2VkIHVwb24gU01JTCAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1NZTU0tbW9kdWxlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdHJpY2sgU2NobWl0egogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlRlZCBXdWdvZnNraQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPldhcm5lciB0ZW4gS2F0ZQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgaW5mb3JtYXRpb24gc2V0IHJlcXVpcmVtZW50cyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTkvTk9URS14bWwtaW5mb3NldC1yZXEtMTk5OTAyMTgiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEluZm9ybWF0aW9uIFNldCBSZXF1aXJlbWVudHMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgSW5mb3JtYXRpb24gU2V0IFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTktMDItMTggLSA8YSB0aXRsZT0iWE1MIEluZm9ybWF0aW9uIFNldCBSZXF1aXJlbWVudHMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3htbC1pbmZvc2V0LXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmlkIE1lZ2dpbnNvbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InhtbCI+WE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InhtbCBzY2hlbWEgcmVxdWlyZW1lbnRzIiBkYXRhLXRhZz0ieG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OS9OT1RFLXhtbC1zY2hlbWEtcmVxLTE5OTkwMjE1IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBTY2hlbWEgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIFNjaGVtYSBSZXF1aXJlbWVudHM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlhNTCBTY2hlbWEgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk5LTAyLTE1IC0gPGEgdGl0bGU9IlhNTCBTY2hlbWEgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94bWwtc2NoZW1hLXJlcSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkFzaG9rIE1hbGhvdHJhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TXVycmF5IE1hbG9uZXkKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJsaXN0IG9mIHN1Z2dlc3RlZCBleHRlbnNpb25zIHRvIGNzcyIgZGF0YS10YWc9ImNzcyIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OC9OT1RFLUNTUy1wb3RlbnRpYWwtMTk5ODEyMTAiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgTGlzdCBvZiBzdWdnZXN0ZWQgZXh0ZW5zaW9ucyB0byBDU1MgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5MaXN0IG9mIHN1Z2dlc3RlZCBleHRlbnNpb25zIHRvIENTUzwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+Q2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTgtMTItMTAgLSA8YSB0aXRsZT0iTGlzdCBvZiBzdWdnZXN0ZWQgZXh0ZW5zaW9ucyB0byBDU1MgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L0NTUy1wb3RlbnRpYWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5CZXJ0IEJvcwogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNzcyI+Q1NTCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4bWwgZnJhZ21lbnQgaW50ZXJjaGFuZ2UgcmVxdWlyZW1lbnRzLCB2ZXJzaW9uIDEuMCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvTk9URS1YTUwtRlJBRy1SRVEtMTk5ODExMjMiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgWE1MIEZyYWdtZW50IEludGVyY2hhbmdlIFJlcXVpcmVtZW50cywgVmVyc2lvbiAxLjAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgIEZyYWdtZW50ICBJbnRlcmNoYW5nZSAgUmVxdWlyZW1lbnRzLCAgVmVyc2lvbiZuYnNwOzEuMDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTgtMTEtMjMgLSA8YSB0aXRsZT0iWE1MIEZyYWdtZW50IEludGVyY2hhbmdlIFJlcXVpcmVtZW50cywgVmVyc2lvbiAxLjAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1hNTC1GUkFHLVJFUSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBhdWwgR3Jvc3NvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ic2NhbGFibGUgdmVjdG9yIGdyYXBoaWNzIChzdmcpIHJlcXVpcmVtZW50cyIgZGF0YS10YWc9ImdyYXBoaWNzIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk4L1dELVNWR1JlcS0xOTk4MTAyOSIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTY2FsYWJsZSBWZWN0b3IgR3JhcGhpY3MgKFNWRykgUmVxdWlyZW1lbnRzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+U2NhbGFibGUgVmVjdG9yIEdyYXBoaWNzIChTVkcpIFJlcXVpcmVtZW50czwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+U1ZHIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OC0xMC0yOSAtIDxhIHRpdGxlPSJTY2FsYWJsZSBWZWN0b3IgR3JhcGhpY3MgKFNWRykgUmVxdWlyZW1lbnRzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XRC1TVkdSZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Kb24gRmVycmFpb2xvCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImEgZGlzY3Vzc2lvbiBvZiB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcmRmLXNjaGVtYSBhbmQgdW1sIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvTk9URS1yZGYtdW1sLTE5OTgwODA0LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBBIERpc2N1c3Npb24gb2YgdGhlIFJlbGF0aW9uc2hpcCBCZXR3ZWVuIFJERi1TY2hlbWEgYW5kIFVNTCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkEgRGlzY3Vzc2lvbiBvZiB0aGUgUmVsYXRpb25zaGlwIEJldHdlZW4gUkRGLVNjaGVtYSBhbmQgVU1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OC0wOC0wNCAtIDxhIHRpdGxlPSJBIERpc2N1c3Npb24gb2YgdGhlIFJlbGF0aW9uc2hpcCBCZXR3ZWVuIFJERi1TY2hlbWEgYW5kIFVNTCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvcmRmLXVtbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0dHAtbmcgd2ViIGludGVyZmFjZXMiIGRhdGEtdGFnPSJodHRwIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk4L1dELUhUVFAtTkctaW50ZXJmYWNlcy0xOTk4MDcxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSFRUUC1uZyBXZWIgSW50ZXJmYWNlcyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUVFAtbmcgV2ViIEludGVyZmFjZXM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTA3LTEwIC0gPGEgdGl0bGU9IkhUVFAtbmcgV2ViIEludGVyZmFjZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELUhUVFAtTkctaW50ZXJmYWNlcyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodHRwIj5IVFRQCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRlc2lnbiBvZiBodHRwLW5nIHRlc3RiZWQiIGRhdGEtdGFnPSJodHRwIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk4L05PVEUtSFRUUC1ORy10ZXN0YmVkLTE5OTgwNzEwLyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEZXNpZ24gb2YgSFRUUC1uZyBUZXN0YmVkIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+RGVzaWduIG9mIEhUVFAtbmcgVGVzdGJlZDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTgtMDctMTAgLSA8YSB0aXRsZT0iRGVzaWduIG9mIEhUVFAtbmcgVGVzdGJlZCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvSFRUUC1ORy10ZXN0YmVkIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RGFuaWVsIFZlaWxsYXJkCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHR0cCI+SFRUUAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzbXV4IHByb3RvY29sIHNwZWNpZmljYXRpb24iIGRhdGEtdGFnPSJodHRwIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk4L1dELW11eC0xOTk4MDcxMCIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTTVVYIFByb3RvY29sIFNwZWNpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TTVVYIFByb3RvY29sIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTA3LTEwIC0gPGEgdGl0bGU9IlNNVVggUHJvdG9jb2wgU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0QtbXV4Ij5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIEdldHR5cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJpayBGcnlzdHlrIE5pZWxzZW4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodHRwIj5IVFRQCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0dHAtbmcgYmluYXJ5IHdpcmUgcHJvdG9jb2wiIGRhdGEtdGFnPSJodHRwIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk4L1dELUhUVFAtTkctd2lyZS0xOTk4MDcxMC8iIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgSFRUUC1uZyBCaW5hcnkgV2lyZSBQcm90b2NvbCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUVFAtbmcgQmluYXJ5IFdpcmUgUHJvdG9jb2w8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTA3LTEwIC0gPGEgdGl0bGU9IkhUVFAtbmcgQmluYXJ5IFdpcmUgUHJvdG9jb2wgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELUhUVFAtTkctd2lyZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodHRwIj5IVFRQCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9Imh0dHAtbmcgYXJjaGl0ZWN0dXJhbCBtb2RlbCIgZGF0YS10YWc9Imh0dHAiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvV0QtSFRUUC1ORy1hcmNoaXRlY3R1cmUtMTk5ODA3MTAvIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEhUVFAtbmcgQXJjaGl0ZWN0dXJhbCBNb2RlbCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkhUVFAtbmcgQXJjaGl0ZWN0dXJhbCBNb2RlbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTgtMDctMTAgLSA8YSB0aXRsZT0iSFRUUC1uZyBBcmNoaXRlY3R1cmFsIE1vZGVsIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XRC1IVFRQLU5HLWFyY2hpdGVjdHVyZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkhlbnJpayBGcnlzdHlrIE5pZWxzZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NaWtlIFNwcmVpdHplcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0dHAiPkhUVFAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzeW5jaHJvbml6ZWQgbXVsdGltZWRpYSBpbnRlZ3JhdGlvbiBsYW5ndWFnZSAoc21pbCkgMS4wIHNwZWNpZmljYXRpb24iIGRhdGEtdGFnPSIiIGRhdGEtc3RhdHVzPSJyZWMiIGRhdGEtdmVyc2lvbj0iIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+UkVDPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmVjb21tZW5kYXRpb24iPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi8xOTk4L1JFQy1zbWlsLTE5OTgwNjE1LyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTeW5jaHJvbml6ZWQgTXVsdGltZWRpYSBJbnRlZ3JhdGlvbiBMYW5ndWFnZSAoU01JTCkgMS4wIFNwZWNpZmljYXRpb24gZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TeW5jaHJvbml6ZWQgTXVsdGltZWRpYSBJbnRlZ3JhdGlvbiBMYW5ndWFnZSAoU01JTCkgMS4wIFNwZWNpZmljYXRpb248L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlNZTU0gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTA2LTE1IC0gPGEgdGl0bGU9IlN5bmNocm9uaXplZCBNdWx0aW1lZGlhIEludGVncmF0aW9uIExhbmd1YWdlIChTTUlMKSAxLjAgU3BlY2lmaWNhdGlvbiBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUkVDLXNtaWwiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5QaGlsaXBwIEhvc2Noa2EKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGluIGh0bWwgbWVldGluZyByZXBvcnQiIGRhdGEtdGFnPSJkYXRhIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OC9OT1RFLXhoLTE5OTgwNTExIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBpbiBIVE1MIE1lZXRpbmcgUmVwb3J0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+WE1MIGluIEhUTUwgTWVldGluZyBSZXBvcnQ8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTA1LTExIC0gPGEgdGl0bGU9IlhNTCBpbiBIVE1MIE1lZXRpbmcgUmVwb3J0IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS94aCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbiBDb25ub2xseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkxhdXJlbiBXb29kCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YSI+RGF0YQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJ4c2wgcmVxdWlyZW1lbnRzIHN1bW1hcnkiIGRhdGEtdGFnPSJ4bWwiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvV0QtWFNMUmVxLTE5OTgwNTExIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhTTCBSZXF1aXJlbWVudHMgU3VtbWFyeSBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlhTTCBSZXF1aXJlbWVudHMgU3VtbWFyeTwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WFNMVCBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTgtMDUtMTEgLSA8YSB0aXRsZT0iWFNMIFJlcXVpcmVtZW50cyBTdW1tYXJ5IHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9XRC1YU0xSZXEiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3JtYW4gV2Fsc2gKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzaG9ydC0gYW5kIGxvbmctdGVybSBnb2FscyBmb3IgdGhlIGh0dHAtbmcgcHJvamVjdCIgZGF0YS10YWc9Imh0dHAiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvV0QtSFRUUC1ORy1nb2Fscy0xOTk4MDMyNyIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBTaG9ydC0gYW5kIExvbmctVGVybSBHb2FscyBmb3IgdGhlIEhUVFAtTkcgUHJvamVjdCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlNob3J0LSBhbmQgTG9uZy1UZXJtIEdvYWxzIGZvciB0aGUgSFRUUC1ORyBQcm9qZWN0PC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5OC0wMy0yNyAtIDxhIHRpdGxlPSJTaG9ydC0gYW5kIExvbmctVGVybSBHb2FscyBmb3IgdGhlIEhUVFAtTkcgUHJvamVjdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0QtSFRUUC1ORy1nb2FscyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1pa2UgU3ByZWl0emVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVucmlrIEZyeXN0eWsgTmllbHNlbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0dHAiPkhUVFAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icDNwIHByb3RvY29sIGFuZCBkYXRhIHRyYW5zcG9ydCB3b3JraW5nIGdyb3VwIGRyYWZ0IHdoaXRlIHBhcGVyIiBkYXRhLXRhZz0icHJpdmFjeSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OC9OT1RFLVAzUDEwLVByb3RvY29scy0xOTk4MDMyNCIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQM1AgUHJvdG9jb2wgYW5kIERhdGEgVHJhbnNwb3J0IFdvcmtpbmcgR3JvdXAgRHJhZnQgV2hpdGUgUGFwZXIgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QM1AgUHJvdG9jb2wgYW5kIERhdGEgVHJhbnNwb3J0IFdvcmtpbmcgR3JvdXAgRHJhZnQgV2hpdGUgUGFwZXI8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTAzLTI0IC0gPGEgdGl0bGU9IlAzUCBQcm90b2NvbCBhbmQgRGF0YSBUcmFuc3BvcnQgV29ya2luZyBHcm91cCBEcmFmdCBXaGl0ZSBQYXBlciBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvUDNQMTAtUHJvdG9jb2xzIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+UGhpbGlwIERlc0F1dGVscwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0ZXZlbiBMdWNhcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBSZWFnbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwcml2YWN5Ij5Qcml2YWN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InByaW1hcnkgbGFuZ3VhZ2UgaW4gaHRtbCIgZGF0YS10YWc9Imh0bWwgaTE4biIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvMTk5OC9OT1RFLWh0bWwtbGFuLTE5OTgwMzEzIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFByaW1hcnkgTGFuZ3VhZ2UgaW4gSFRNTCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlByaW1hcnkgTGFuZ3VhZ2UgaW4gSFRNTDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTgtMDMtMTMgLSA8YSB0aXRsZT0iUHJpbWFyeSBMYW5ndWFnZSBpbiBIVE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9odG1sLWxhbiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodG1sIj5IVE1MCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImkxOG4iPmkxOG4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0ieG1sIGxpbmtpbmcgbGFuZ3VhZ2UgKHhsaW5rKSBkZXNpZ24gcHJpbmNpcGxlcyIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvTk9URS14bGluay1wcmluY2lwbGVzLTE5OTgwMzAzIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFhNTCBMaW5raW5nIExhbmd1YWdlIChYTGluaykgRGVzaWduIFByaW5jaXBsZXMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5YTUwgTGlua2luZyBMYW5ndWFnZSAoWExpbmspIERlc2lnbiBQcmluY2lwbGVzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5YTUwgQ29yZSBXb3JraW5nIEdyb3VwPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+WE1MIExpbmtpbmcgV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTAzLTAzIC0gPGEgdGl0bGU9IlhNTCBMaW5raW5nIExhbmd1YWdlIChYTGluaykgRGVzaWduIFByaW5jaXBsZXMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L3hsaW5rLXByaW5jaXBsZXMiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5FdmUgTWFsZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5TdGV2ZW4gRGVSb3NlCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0idm9pY2UgYnJvd3NlcnMiIGRhdGEtdGFnPSJtZWRpYSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvTk9URS12b2ljZS0wMTI4IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFZvaWNlIEJyb3dzZXJzIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Vm9pY2UgQnJvd3NlcnM8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk4LTAxLTI4IC0gPGEgdGl0bGU9IlZvaWNlIEJyb3dzZXJzIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS92b2ljZSI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhdmUgUmFnZ2V0dAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im1lZGlhIj5NZWRpYQogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJjb21wYXJpc29uIG9mIHNnbWwgYW5kIHhtbCIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSL05PVEUtc2dtbC14bWwtOTcxMjE1IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIENvbXBhcmlzb24gb2YgU0dNTCBhbmQgWE1MIGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+Q29tcGFyaXNvbiBvZiBTR01MIGFuZCBYTUw8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk3LTEyLTE1IC0gPGEgdGl0bGU9IkNvbXBhcmlzb24gb2YgU0dNTCBhbmQgWE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9zZ21sLXhtbCI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkphbWVzIENsYXJrCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ieG1sIj5YTUwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icGVwIHNwZWNpZmljYXRpb246IGFuIGV4dGVuc2lvbiBtZWNoYW5pc20gZm9yIGh0dHAiIGRhdGEtdGFnPSJodHRwIiBkYXRhLXN0YXR1cz0icmV0IiBkYXRhLXZlcnNpb249IiIgc3R5bGU9Im9wYWNpdHk6IDA7IGRpc3BsYXk6IG5vbmU7IiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InByb2ZpbGUiPnJldDwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9IlJldGlyZWQiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnczLm9yZy9UUi9XRC1odHRwLXBlcC05NzExMjEiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgUEVQIFNwZWNpZmljYXRpb246IGFuIEV4dGVuc2lvbiBNZWNoYW5pc20gZm9yIEhUVFAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QRVAgU3BlY2lmaWNhdGlvbjogYW4gRXh0ZW5zaW9uIE1lY2hhbmlzbSBmb3IgSFRUUDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTctMTEtMjEgLSA8YSB0aXRsZT0iUEVQIFNwZWNpZmljYXRpb246IGFuIEV4dGVuc2lvbiBNZWNoYW5pc20gZm9yIEhUVFAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELWh0dHAtcGVwIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SGVucmlrIEZyeXN0eWsgTmllbHNlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRhbiBDb25ub2xseQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvaGl0IEtoYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+RXJpYyBQcnVkJiMwMzk7aG9tbWVhdXgKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJodHRwIj5IVFRQCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InAzcCBhcmNoaXRlY3R1cmUgd29ya2luZyBncm91cDogZ2VuZXJhbCBvdmVydmlldyBvZiB0aGUgcDNwIGFyY2hpdGVjdHVyZSIgZGF0YS10YWc9InByaXZhY3kiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSL1dELVAzUC1hcmNoLTk3MTAyMiIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBQM1AgQXJjaGl0ZWN0dXJlIFdvcmtpbmcgR3JvdXA6IEdlbmVyYWwgT3ZlcnZpZXcgb2YgdGhlIFAzUCBBcmNoaXRlY3R1cmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5QM1AgQXJjaGl0ZWN0dXJlIFdvcmtpbmcgR3JvdXA6IEdlbmVyYWwgT3ZlcnZpZXcgb2YgdGhlIFAzUCBBcmNoaXRlY3R1cmU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlAzUCBTcGVjaWZpY2F0aW9uIFdvcmtpbmcgR3JvdXA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5Ny0xMC0yMiAtIDxhIHRpdGxlPSJQM1AgQXJjaGl0ZWN0dXJlIFdvcmtpbmcgR3JvdXA6IEdlbmVyYWwgT3ZlcnZpZXcgb2YgdGhlIFAzUCBBcmNoaXRlY3R1cmUgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELVAzUC1hcmNoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Sm9zZXBoIFJlYWdsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk1hcnRpbiBQcmVzbGVyTWFyc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NZWxpc3NhIFcgRHVubgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWxpcCBEZXNBdXRlbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Mb3JyaWUgQ3Jhbm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TWFyayBBY2tlcm1hbgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InByaXZhY3kiPlByaXZhY3kKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0icDNwIHZvY2FidWxhcnkgd29ya2luZyBncm91cDogZ3JhbW1hdGljYWwgbW9kZWwgYW5kIGRhdGEgZGVzaWduIG1vZGVsIiBkYXRhLXRhZz0icHJpdmFjeSIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvV0QtUDNQLWdyYW1tYXItOTcxMDE0IiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIFAzUCBWb2NhYnVsYXJ5IFdvcmtpbmcgR3JvdXA6IEdyYW1tYXRpY2FsIE1vZGVsIGFuZCBEYXRhIERlc2lnbiBNb2RlbCBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPlAzUCBWb2NhYnVsYXJ5IFdvcmtpbmcgR3JvdXA6IEdyYW1tYXRpY2FsIE1vZGVsIGFuZCBEYXRhIERlc2lnbiBNb2RlbDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+UDNQIFNwZWNpZmljYXRpb24gV29ya2luZyBHcm91cDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk3LTEwLTE0IC0gPGEgdGl0bGU9IlAzUCBWb2NhYnVsYXJ5IFdvcmtpbmcgR3JvdXA6IEdyYW1tYXRpY2FsIE1vZGVsIGFuZCBEYXRhIERlc2lnbiBNb2RlbCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0QtUDNQLWdyYW1tYXIiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJlZGl0b3JsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrIEFja2VybWFuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+TG9ycmllIENyYW5vcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlBoaWxpcCBEZXNBdXRlbHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NZWxpc3NhIFcgRHVubgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkpvc2VwaCBSZWFnbGUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwcml2YWN5Ij5Qcml2YWN5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InVzZSBvZiBjZ20gYXMgYSBzY2FsYWJsZSBncmFwaGljcyBmb3JtYXQiIGRhdGEtdGFnPSJncmFwaGljcyIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSL05PVEUtY2dtLTk3MDYxOCIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBVc2Ugb2YgQ0dNIGFzIGEgU2NhbGFibGUgR3JhcGhpY3MgRm9ybWF0IGZvcm1hbGx5IGFwcHJvdmVkIGJ5IHRoZSBncm91cCI+VXNlIG9mIENHTSBhcyBhIFNjYWxhYmxlIEdyYXBoaWNzIEZvcm1hdDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTctMDYtMTggLSA8YSB0aXRsZT0iVXNlIG9mIENHTSBhcyBhIFNjYWxhYmxlIEdyYXBoaWNzIEZvcm1hdCBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvY2dtIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Q2hyaXMgTGlsbGV5CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZ3JhcGhpY3MiPkdyYXBoaWNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9ImRpZ2l0YWwgc2lnbmF0dXJlIGxhYmVsIGFyY2hpdGVjdHVyZSIgZGF0YS10YWc9InhtbCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvV0QtRFNJRy1sYWJlbC1hcmNoLTk3MDYxMCIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBEaWdpdGFsIFNpZ25hdHVyZSBMYWJlbCBBcmNoaXRlY3R1cmUgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5EaWdpdGFsIFNpZ25hdHVyZSBMYWJlbCBBcmNoaXRlY3R1cmU8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ZGVsaXZlcmVyPlVOS05PV04gV09SS0lORyBHUk9VUDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9cHViZGV0YWlscz4xOTk3LTA2LTEwIC0gPGEgdGl0bGU9IkRpZ2l0YWwgU2lnbmF0dXJlIExhYmVsIEFyY2hpdGVjdHVyZSBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvV0QtRFNJRy1sYWJlbC1hcmNoIj5IaXN0b3J5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iZWRpdG9ybGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Um9oaXQgS2hhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ4bWwiPlhNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJzZWxlY3RpbmcgcGF5bWVudCBtZWNoYW5pc21zIG92ZXIgaHR0cCIgZGF0YS10YWc9Imh0dHAiIGRhdGEtc3RhdHVzPSJyZXQiIGRhdGEtdmVyc2lvbj0iIiBzdHlsZT0ib3BhY2l0eTogMDsgZGlzcGxheTogbm9uZTsiIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+cmV0PC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iUmV0aXJlZCI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1RSL1dELWplcGktdXBwZmxvdy05NzAxMDYiIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgU2VsZWN0aW5nIFBheW1lbnQgTWVjaGFuaXNtcyBPdmVyIEhUVFAgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5TZWxlY3RpbmcgUGF5bWVudCBNZWNoYW5pc21zIE92ZXIgSFRUUDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTctMDEtMDYgLSA8YSB0aXRsZT0iU2VsZWN0aW5nIFBheW1lbnQgTWVjaGFuaXNtcyBPdmVyIEhUVFAgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELWplcGktdXBwZmxvdyI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkRvbmFsZCBFYXN0bGFrZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlJvaGl0IEtoYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+SmltIE1pbGxlcgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGFnbGlzdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Imh0dHAiPkhUVFAKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgZGF0YS10aXRsZT0iaW1hZ2VtYXBwZWQgaW1hZ2VzIGFuZCBpbWFnZS1pbmNhcGFibGUgdXNlciBhZ2VudHMiIGRhdGEtdGFnPSJodG1sIiBkYXRhLXN0YXR1cz0ibm90ZSIgZGF0YS12ZXJzaW9uPSJsYXRlc3QiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5Ob3RlPC9kaXY+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iR3JvdXBOb3RlIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvTk9URS1pbWFnZW1hcCIgdGl0bGU9IkxhdGVzdCBkcmFmdCBvZiBJbWFnZW1hcHBlZCBJbWFnZXMgYW5kIEltYWdlLUluY2FwYWJsZSBVc2VyIEFnZW50cyBmb3JtYWxseSBhcHByb3ZlZCBieSB0aGUgZ3JvdXAiPkltYWdlbWFwcGVkIEltYWdlcyBhbmQgSW1hZ2UtSW5jYXBhYmxlIFVzZXIgQWdlbnRzPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5Ni0xMS0yNyAtIDxhIHRpdGxlPSJJbWFnZW1hcHBlZCBJbWFnZXMgYW5kIEltYWdlLUluY2FwYWJsZSBVc2VyIEFnZW50cyBwdWJsaWNhdGlvbiBoaXN0b3J5IiBocmVmPSIvc3RhbmRhcmRzL2hpc3RvcnkvaW1hZ2VtYXAiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHRtbCI+SFRNTAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBkYXRhLXRpdGxlPSJhIHByb3Bvc2VkIGNvbnZlbnRpb24gZm9yIGVtYmVkZGluZyBtZXRhZGF0YSBpbiBodG1sIiBkYXRhLXRhZz0iZGF0YSIgZGF0YS1zdGF0dXM9Im5vdGUiIGRhdGEtdmVyc2lvbj0ibGF0ZXN0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZmlsZSI+Tm90ZTwvZGl2PgogICAgICAgICAgICA8aDIgY2xhc3M9Ikdyb3VwTm90ZSI+PGEgaHJlZj0iaHR0cHM6Ly93d3cudzMub3JnL1NlYXJjaC85NjA1LUluZGV4aW5nLVdvcmtzaG9wL1JlcG9ydE91dGNvbWVzL1M2R3JvdXAyIiB0aXRsZT0iTGF0ZXN0IGRyYWZ0IG9mIEEgUHJvcG9zZWQgQ29udmVudGlvbiBmb3IgRW1iZWRkaW5nIE1ldGFkYXRhIGluIEhUTUwgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5BIFByb3Bvc2VkIENvbnZlbnRpb24gZm9yIEVtYmVkZGluZyBNZXRhZGF0YSBpbiBIVE1MPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPWRlbGl2ZXJlcj5VTktOT1dOIFdPUktJTkcgR1JPVVA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPXB1YmRldGFpbHM+MTk5Ni0wNi0wMiAtIDxhIHRpdGxlPSJBIFByb3Bvc2VkIENvbnZlbnRpb24gZm9yIEVtYmVkZGluZyBNZXRhZGF0YSBpbiBIVE1MIHB1YmxpY2F0aW9uIGhpc3RvcnkiIGhyZWY9Ii9zdGFuZGFyZHMvaGlzdG9yeS9TNkdyb3VwMiI+SGlzdG9yeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImVkaXRvcmxpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlN0dSBXZWliZWwKICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRhZ2xpc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhIj5EYXRhCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGRhdGEtdGl0bGU9InRoZSBpbHUgcmVxdWVzdGVyOiBvYmplY3Qgc2VydmljZXMgaW4gaHR0cCBzZXJ2ZXJzIiBkYXRhLXRhZz0iaHR0cCIgZGF0YS1zdGF0dXM9InJldCIgZGF0YS12ZXJzaW9uPSIiIHN0eWxlPSJvcGFjaXR5OiAwOyBkaXNwbGF5OiBub25lOyIgYXJpYS1oaWRkZW49InRydWUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9maWxlIj5yZXQ8L2Rpdj4KICAgICAgICAgICAgPGgyIGNsYXNzPSJSZXRpcmVkIj48YSBocmVmPSJodHRwczovL3d3dy53My5vcmcvVFIvV0QtaWx1LXJlcXVlc3Rvci05NjAzMDciIHRpdGxlPSJMYXRlc3QgZHJhZnQgb2YgVGhlIElMVSBSZXF1ZXN0ZXI6IE9iamVjdCBTZXJ2aWNlcyBpbiBIVFRQIFNlcnZlcnMgZm9ybWFsbHkgYXBwcm92ZWQgYnkgdGhlIGdyb3VwIj5UaGUgSUxVIFJlcXVlc3RlcjogT2JqZWN0IFNlcnZpY2VzIGluIEhUVFAgU2VydmVyczwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1kZWxpdmVyZXI+VU5LTk9XTiBXT1JLSU5HIEdST1VQPC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1wdWJkZXRhaWxzPjE5OTYtMDMtMDcgLSA8YSB0aXRsZT0iVGhlIElMVSBSZXF1ZXN0ZXI6IE9iamVjdCBTZXJ2aWNlcyBpbiBIVFRQIFNlcnZlcnMgcHVibGljYXRpb24gaGlzdG9yeSIgaHJlZj0iL3N0YW5kYXJkcy9oaXN0b3J5L1dELWlsdS1yZXF1ZXN0b3IiPkhpc3Rvcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0YWdsaXN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaHR0cCI+SFRUUAogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8L3VsPjwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICA8L2Rpdj4gPCEtLSAvZW5kICN3M2NfbWFpbkNvbCAtLT4KICAgIDwvZGl2PiA8IS0tIGVuZCAjdzNjX21haW4gLS0+CiA8IS0tIC9lbmQgI3czY19jb250YWluZXIgLS0+Cgo8ZGl2IGlkPSJ3M2NfZm9vdGVyIj4KPGRpdiBpZD0idzNjX2Zvb3Rlci1pbm5lciI+CjxoMiBjbGFzcz0ib2Zmc2NyZWVuIj5Gb290ZXIgTmF2aWdhdGlvbjwvaDI+CjxkaXYgY2xhc3M9InczY19mb290ZXItbmF2Ij4KPGgzPk5hdmlnYXRpb248L2gzPgo8dWwgY2xhc3M9ImZvb3Rlcl90b3BfbmF2Ij4KPGxpPjxhIGhyZWY9Imh0dHA6Ly93d3cudzMub3JnLyI+SG9tZTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvc3RhbmRhcmRzLyI+U3RhbmRhcmRzPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwOi8vd3d3LnczLm9yZy9wYXJ0aWNpcGF0ZS8iPlBhcnRpY2lwYXRlPC9hPjwvbGk+CjxsaT48YSBocmVmPSJodHRwOi8vd3d3LnczLm9yZy9Db25zb3J0aXVtL21lbWJlcnNoaXAiPk1lbWJlcnNoaXA8L2E+PC9saT4KPGxpIGNsYXNzPSJsYXN0LWl0ZW0iPjxhIGhyZWY9Imh0dHA6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vIj5BYm91dCBXM0M8L2E+PC9saT4KPC91bD4KPC9kaXY+CjxkaXYgY2xhc3M9InczY19mb290ZXItbmF2Ij4KPGgzPkNvbnRhY3QgVzNDPC9oMz4KPHVsIGNsYXNzPSJmb290ZXJfYm90dG9tX25hdiI+CjxsaT48YSBocmVmPSJodHRwOi8vd3d3LnczLm9yZy9Db25zb3J0aXVtL2NvbnRhY3QiPkNvbnRhY3Q8L2E+PC9saT4KPGxpPjxhIGFjY2Vzc2tleT0iMCIgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvSGVscC8iPkhlbHAgYW5kIEZBUTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS9zcG9uc29yLyI+U3BvbnNvciAvIERvbmF0ZTwvYT48L2xpPgo8bGk+PGEgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS9zaXRlaW5kZXgiPlNpdGUgTWFwPC9hPjwvbGk+CjxsaT4KPGFkZHJlc3MgaWQ9InczY19zaWduYXR1cmUiPjxhIGhyZWY9Imh0dHA6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3NpdGUtY29tbWVudHMvIj5GZWVkYmFjazwvYT48L2FkZHJlc3M+PC9saT4KCjwvdWw+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJ3M2NfZm9vdGVyLW5hdiI+CjxoMz5XM0MgVXBkYXRlczwvaDM+Cjx1bCBjbGFzcz0iZm9vdGVyX2ZvbGxvd19uYXYiPgo8bGk+PGEgaHJlZj0iaHR0cDovL3R3aXR0ZXIuY29tL1czQyIgdGl0bGU9IkZvbGxvdyBXM0Mgb24gVHdpdHRlciI+PGltZyBzcmM9Imh0dHBzOi8vd3d3LnczLm9yZy8yMDA4L3NpdGUvaW1hZ2VzL1R3aXR0ZXJfYmlyZF9sb2dvXzIwMTIuc3ZnIiBhbHQ9IlR3aXR0ZXIiIGNsYXNzPSJzb2NpYWwtaWNvbiIgaGVpZ2h0PSI0MCI+PC9hPjwvbGk+CjwvdWw+CjwvZGl2Pgo8IS0tICNmb290ZXIgYWRkcmVzcyAvIHBhZ2Ugc2lnbmF0dXJlIC0tPgo8cCBjbGFzcz0iY29weXJpZ2h0Ij5Db3B5cmlnaHQgwqkgMjAyMQpXM0MgPHN1cD7Crjwvc3VwPiAoPGEgaHJlZj0iaHR0cDovL3d3dy5jc2FpbC5taXQuZWR1LyI+PGFiYnIgdGl0bGU9Ik1hc3NhY2h1c2V0dHMgSW5zdGl0dXRlIG9mIFRlY2hub2xvZ3kiPk1JVDwvYWJicj48L2E+LCA8YSBocmVmPSJodHRwOi8vd3d3LmVyY2ltLmV1LyI+PGFiYnIgdGl0bGU9IkV1cm9wZWFuIFJlc2VhcmNoIENvbnNvcnRpdW0gZm9yIEluZm9ybWF0aWNzIGFuZCBNYXRoZW1hdGljcyI+IEVSQ0lNPC9hYmJyPjwvYT4sIDxhIGhyZWY9Imh0dHA6Ly93d3cua2Vpby5hYy5qcC8iPktlaW88L2E+LCA8YSBocmVmPSJodHRwOi8vZXYuYnVhYS5lZHUuY24vIj5CZWloYW5nPC9hPikgPGEgaHJlZj0iaHR0cDovL3d3dy53My5vcmcvQ29uc29ydGl1bS9MZWdhbC9pcHItbm90aWNlIj5Vc2FnZSBwb2xpY2llcyBhcHBseTwvYT4uPC9wPgo8L2Rpdj4KPC9kaXY+CjxkaXYgaWQ9InczY19zY3JpcHRzIj48c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3d3dy53My5vcmcvMjAwOC9zaXRlL2pzL21haW4iPjwvc2NyaXB0PjwvZGl2PgogICAgPHNjcmlwdCBzcmM9Ii8yMDA4L3NpdGUvc2YvYnVpbGQvcnVudGltZS43ODNiMzMwMC5qcyI+PC9zY3JpcHQ+PHNjcmlwdCBzcmM9Ii8yMDA4L3NpdGUvc2YvYnVpbGQvMC5iZmE1YmQwMS5qcyI+PC9zY3JpcHQ+PHNjcmlwdCBzcmM9Ii8yMDA4L3NpdGUvc2YvYnVpbGQvMy5jN2Q1MWI0OC5qcyI+PC9zY3JpcHQ+PHNjcmlwdCBzcmM9Ii8yMDA4L3NpdGUvc2YvYnVpbGQvcHVibGljYXRpb24tdHIuYTE1MWE5NmQuanMiPjwvc2NyaXB0Pgo8L2JvZHk+PC9odG1sPgo=
    http_version:
  recorded_at: Mon, 23 Aug 2021 12:00:16 GMT
- request:
    method: get
    uri: https://www.w3.org/TR/2020/REC-json-ld11-20200716/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 23 Aug 2021 12:00:17 GMT
      Content-Location:
      - Overview.html
      Last-Modified:
      - Wed, 08 Jul 2020 09:18:28 GMT
      Etag:
      - '"f9614-5a9ea9737a100-gzip"'
      Accept-Ranges:
      - bytes
      Cache-Control:
      - max-age=31536000
      Expires:
      - Tue, 23 Aug 2022 12:00:17 GMT
      Vary:
      - Accept-Encoding
      Link:
      - <https://timetravel.mementoweb.org/w3c/timegate/https://www.w3.org/TR/json-ld11/>;rel="timegate",
        <https://www.w3.org/TR/json-ld11/>;rel="original"
      Access-Control-Allow-Origin:
      - "*"
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
      Memento-Datetime:
      - Wed, 08 Jul 2020 09:18:28 GMT
      X-Backend:
      - ssl-mirrors
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 23 Aug 2021 12:00:19 GMT
- request:
    method: get
    uri: https://www.w3.org/TR/2014/REC-json-ld-20140116/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 23 Aug 2021 12:00:20 GMT
      Content-Location:
      - Overview.html
      Last-Modified:
      - Fri, 07 May 2021 12:43:12 GMT
      Etag:
      - '"3c8bb-5c1bcc5513800-gzip"'
      Accept-Ranges:
      - bytes
      Cache-Control:
      - max-age=31536000
      Expires:
      - Tue, 23 Aug 2022 12:00:20 GMT
      Vary:
      - Accept-Encoding
      Link:
      - <https://www.w3.org/TR/json-ld/>;rel="canonical", <https://timetravel.mementoweb.org/w3c/timegate/https://www.w3.org/TR/json-ld/>;rel="timegate",
        <https://www.w3.org/TR/json-ld/>;rel="original"
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '46740'
      Content-Type:
      - text/html; charset=utf-8
      Memento-Datetime:
      - Fri, 07 May 2021 12:43:12 GMT
      X-Backend:
      - ssl-mirrors
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 23 Aug 2021 12:00:20 GMT
recorded_with: VCR 5.1.0
